# Compilação C- para código intermediário
# Arquivo: testes/par_ou_impar.txt
# Fim da execução.

********** Código intermediário **********

1: (function, parOuImpar, _, _)
2: (get_param, n, _, _)
3: (modulo, n, 2, t1)
4: (equal, t1, 0, t2)
5: (jump_if_false, t2, L1, _)
6: (param_list, 2, _, _)
7: (set_param, 2, _, _)
8: (set_param, 2, _, _)
9: (call, output, 2, t3)
10: (goto, L2, _, _)
11: (label, L1, _, _)
12: (param_list, 2, _, _)
13: (set_param, 1, _, _)
14: (set_param, 2, _, _)
15: (call, output, 2, t4)
16: (label, L2, _, _)
17: (return, _, _, _)
18: (function, main, _, _)
19: (param_list, 0, _, _)
20: (call, input, 0, t5)
21: (assign, n, n, _)
22: (param_list, 1, _, _)
23: (set_param, n, _, _)
24: (call, parOuImpar, 1, t6)
25: (halt, _, _, _)

********** Código objeto **********

parOuImpar:
    0:	addi	$sp, $sp, 2
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	modi	$t0, $s0, 2
    4:	eq	$t1, $t0, 0
    5:	jf	$t1, L1
    6:	li	$a0, 2
    7:	li	$a1, 2
    8:	out	$a0, 2
    9:	j	L2
.L1	
    10:	li	$a0, 1
    11:	li	$a1, 2
    12:	out	$a0, 2
.L2	
    13:	jr	$ra

main:
    14:	addi	$sp, $sp, 0
    15:	in	$t0
    16:	lw	$s0, 0($sp)
    17:	sw	$s0, 0($sp)
    18:	lw	$s1, 0($sp)
    19:	mov	$a0, $s1
    20:	jal	parOuImpar
    21:	mov	$t1, $v0
    22:	subi	$sp, $sp, 2
    23:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b100101_00000000000000000000001111;		// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000010; 	// addi
memoria_instrucoes[2] = 32'b011110_00011_00111_0000000000000000; 	// sw
memoria_instrucoes[3] = 32'b011011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[4] = 32'b001010_01011_10101_0000000000000010; 	// modi
memoria_instrucoes[5] = 32'b011111_10101_10110_0000000000000000; 	// eq
memoria_instrucoes[6] = 32'b100110_10110_00000_0000000000001011; 	// jf
memoria_instrucoes[7] = 32'b011100_00000_00111_0000000000000010; 	// li
memoria_instrucoes[8] = 32'b011100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[9] = 32'b101010_00000_00111_0000000000000010; 	// out
memoria_instrucoes[10] = 32'b100101_00000000000000000000001110; 	// j
memoria_instrucoes[11] = 32'b011100_00000_00111_0000000000000001; 	// li
memoria_instrucoes[12] = 32'b011100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[13] = 32'b101010_00000_00111_0000000000000010; 	// out
memoria_instrucoes[14] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[15] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[16] = 32'b101001_00000_10101_0000000000000000; 	// in
memoria_instrucoes[17] = 32'b011011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[18] = 32'b011110_00011_01011_0000000000000000; 	// sw
memoria_instrucoes[19] = 32'b011011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[20] = 32'b011010_01100_00111_0000000000000000; 	// mov
memoria_instrucoes[21] = 32'b100111_00000000000000000000000001; 	// jal
memoria_instrucoes[22] = 32'b011010_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[23] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[24] = 32'b111111_00000000000000000000000000; 	// halt
