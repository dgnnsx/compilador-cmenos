# Compilação C- para código intermediário
# Arquivo: testes/teste.cm
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # mostra
                # -> function call
                # output
                # -> function call: arguments
                    # -> identifier
                    # n
                    # <- identifier
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
                # -> return
                # -> return: expression
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # a
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # b
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 10
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # a
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 22
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # b
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # mostra
                # -> function call: arguments
                    # -> identifier
                    # a
                    # <- identifier
                # <- function call: arguments
                # <- function call
                # -> function call
                # mostra
                # -> function call: arguments
                    # -> identifier
                    # b
                    # <- identifier
                # <- function call: arguments
                # <- function call
                # -> function call
                # output
                # -> function call: arguments
                    # -> constant
                    # 11
                    # <- constant
                    # -> constant
                    # 0
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, mostra, _, _)
2: (get_param, n, _, _)
3: (param_list, 2, _, _)
4: (set_param, n, _, _)
5: (set_param, 2, _, _)
6: (call, output, 2, t1)
7: (return, _, _, _)
8: (function, main, _, _)
9: (assign, a, 10, _)
10: (assign, b, 22, _)
11: (param_list, 1, _, _)
12: (set_param, a, _, _)
13: (call, mostra, 1, t2)
14: (param_list, 1, _, _)
15: (set_param, b, _, _)
16: (call, mostra, 1, t3)
17: (param_list, 2, _, _)
18: (set_param, 11, _, _)
19: (set_param, 0, _, _)
20: (call, output, 2, t4)
21: (halt, _, _, _)

********** Código objeto **********

mostra:
    0:	addi	$sp, $sp, 2
    1:	li	$a1, 2
    2:	out	$a0, 2
    3:	jr	$ra

main:
    4:	addi	$sp, $sp, 1
    5:	li	$t0, 10
    6:	sw	$t0, -1($sp)
    7:	li	$t1, 22
    8:	sw	$t1, 0($sp)
    9:	lw	$s0, -1($sp)
    10:	mov	$a0, $s0
    11:	jal	mostra
    12:	mov	$t2, $v0
    13:	subi	$sp, $sp, 2
    14:	lw	$s1, 0($sp)
    15:	mov	$a0, $s1
    16:	jal	mostra
    17:	mov	$t3, $v0
    18:	subi	$sp, $sp, 2
    19:	li	$a0, 11
    20:	li	$a1, 0
    21:	out	$a0, 0
    22:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011101_00000000000000000000000101; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000010; 	// addi
memoria_instrucoes[2] = 32'b010100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[3] = 32'b100001_00000_00111_0000000000000010; 	// out
memoria_instrucoes[4] = 32'b011111_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[5] = 32'b000010_00011_00011_0000000000000001; 	// addi
memoria_instrucoes[6] = 32'b010100_00000_10101_0000000000001010; 	// li
memoria_instrucoes[7] = 32'b010110_00011_10101_1111111111111111; 	// sw
memoria_instrucoes[8] = 32'b010100_00000_10110_0000000000010110; 	// li
memoria_instrucoes[9] = 32'b010110_00011_10110_0000000000000000; 	// sw
memoria_instrucoes[10] = 32'b010011_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[11] = 32'b010010_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[12] = 32'b011110_00000000000000000000000001; 	// jal
memoria_instrucoes[13] = 32'b010010_00001_10111_0000000000000000; 	// mov
memoria_instrucoes[14] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[15] = 32'b010011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[16] = 32'b010010_01100_00111_0000000000000000; 	// mov
memoria_instrucoes[17] = 32'b011110_00000000000000000000000001; 	// jal
memoria_instrucoes[18] = 32'b010010_00001_11000_0000000000000000; 	// mov
memoria_instrucoes[19] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[20] = 32'b010100_00000_00111_0000000000001011; 	// li
memoria_instrucoes[21] = 32'b010100_00000_01000_0000000000000000; 	// li
memoria_instrucoes[22] = 32'b100001_00000_00111_0000000000000000; 	// out
memoria_instrucoes[23] = 32'b111111_00000000000000000000000000; 	// halt
