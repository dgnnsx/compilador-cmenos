# Compilação C- para código intermediário
# Arquivo: testes/teste.cm
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # a
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # b
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 10
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # a
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> identifier
                    # a
                    # <- identifier
                    # -> constant
                    # 0
                    # <- constant
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 20
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # b
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> identifier
                    # b
                    # <- identifier
                    # -> constant
                    # 1
                    # <- constant
                # <- function call: arguments
                # <- function call
                # -> function call
                # output
                # -> function call: arguments
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> identifier
                        # b
                        # <- identifier
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, main, _, _)
2: (assign, a, 10, _)
3: (param_list, 2, _, _)
4: (set_param, a, _, _)
5: (set_param, 0, _, _)
6: (call, output, 2, t1)
7: (assign, b, 20, _)
8: (param_list, 2, _, _)
9: (set_param, b, _, _)
10: (set_param, 1, _, _)
11: (call, output, 2, t2)
12: (param_list, 2, _, _)
13: (addition, a, b, t3)
14: (set_param, t3, _, _)
15: (set_param, 2, _, _)
16: (call, output, 2, t4)
17: (halt, _, _, _)

********** Código objeto **********

main:
    0:	addi	$sp, $sp, 1
    1:	li	$t0, 10
    2:	sw	$t0, -1($sp)
    3:	lw	$s0, -1($sp)
    4:	mov	$a0, $s0
    5:	li	$a1, 0
    6:	out	$a0, 0
    7:	li	$t1, 20
    8:	sw	$t1, 0($sp)
    9:	lw	$s1, 0($sp)
    10:	mov	$a0, $s1
    11:	li	$a1, 1
    12:	out	$a0, 1
    13:	lw	$s2, -1($sp)
    14:	lw	$s3, 0($sp)
    15:	add	$t2, $s2, $s3
    16:	mov	$a0, $t2
    17:	li	$a1, 2
    18:	out	$a0, 2
    19:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b000010_00011_00011_0000000000000001; 	// addi
memoria_instrucoes[1] = 32'b010100_00000_10101_0000000000001010; 	// li
memoria_instrucoes[2] = 32'b010110_00011_10101_1111111111111111; 	// sw
memoria_instrucoes[3] = 32'b010011_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[4] = 32'b010010_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[5] = 32'b010100_00000_01000_0000000000000000; 	// li
memoria_instrucoes[6] = 32'b100001_00000_00111_0000000000000000; 	// out
memoria_instrucoes[7] = 32'b010100_00000_10110_0000000000010100; 	// li
memoria_instrucoes[8] = 32'b010110_00011_10110_0000000000000000; 	// sw
memoria_instrucoes[9] = 32'b010011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[10] = 32'b010010_01100_00111_0000000000000000; 	// mov
memoria_instrucoes[11] = 32'b010100_00000_01000_0000000000000001; 	// li
memoria_instrucoes[12] = 32'b100001_00000_00111_0000000000000001; 	// out
memoria_instrucoes[13] = 32'b010011_00011_01101_1111111111111111; 	// lw
memoria_instrucoes[14] = 32'b010011_00011_01110_0000000000000000; 	// lw
memoria_instrucoes[15] = 32'b000001_01101_01110_10111_00000000000; 	// add
memoria_instrucoes[16] = 32'b010010_10111_00111_0000000000000000; 	// mov
memoria_instrucoes[17] = 32'b010100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[18] = 32'b100001_00000_00111_0000000000000010; 	// out
memoria_instrucoes[19] = 32'b111111_00000000000000000000000000; 	// halt
