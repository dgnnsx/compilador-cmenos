# Compilação C- para código intermediário
# Arquivo: testes/teste.cm
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # mostra
                # -> assign
                # -> assign: right argument
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: right argument
                    # arithmetic operator: -
                    # <- Operator
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # a
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> identifier
                    # a
                    # <- identifier
                    # -> constant
                    # 0
                    # <- constant
                # <- function call: arguments
                # <- function call
                # -> function call
                # output
                # -> function call: arguments
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: right argument
                    # arithmetic operator: -
                    # <- Operator
                    # -> constant
                    # 1
                    # <- constant
                # <- function call: arguments
                # <- function call
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # a
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> function call
                # mostra
                # -> function call: arguments
                    # -> identifier
                    # a
                    # <- identifier
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # a
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 3
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # a
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # mostra
                    # -> function call: arguments
                        # -> identifier
                        # a
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, mostra, _, _)
2: (get_param, a, _, _)
3: (subtraction, a, 1, t1)
4: (assign, a, t1, _)
5: (param_list, 2, _, _)
6: (set_param, a, _, _)
7: (set_param, 0, _, _)
8: (call, output, 2, t2)
9: (param_list, 2, _, _)
10: (subtraction, a, 1, t3)
11: (set_param, t3, _, _)
12: (set_param, 1, _, _)
13: (call, output, 2, t4)
14: (equal, a, 1, t5)
15: (jump_if_false, t5, L1, _)
16: (return, a, _, _)
17: (label, L1, _, _)
18: (param_list, 1, _, _)
19: (set_param, a, _, _)
20: (call, mostra, 1, t6)
21: (function, main, _, _)
22: (assign, a, 3, _)
23: (param_list, 2, _, _)
24: (param_list, 1, _, _)
25: (set_param, a, _, _)
26: (call, mostra, 1, t7)
27: (set_param, t7, _, _)
28: (set_param, 2, _, _)
29: (call, output, 2, t8)
30: (halt, _, _, _)

********** Código objeto **********

mostra:
    0:	addi	$sp, $sp, 2
    1:	subi	$t0, $a0, 1
    2:	sw	$t0, 0($sp)
    3:	lw	$s0, 0($sp)
    4:	mov	$a0, $s0
    5:	li	$a1, 0
    6:	out	$a0, 0
    7:	lw	$s1, 0($sp)
    8:	subi	$t1, $s1, 1
    9:	mov	$a0, $t1
    10:	li	$a1, 1
    11:	out	$a0, 1
    12:	li	$t2, 1
    13:	beq	$s1, $t2, L1
    14:	mov	$v0, $s1
    15:	jr	$ra
.L1	
    16:	mov	$a0, $s1
    17:	sw	$ra, 1($sp)
    18:	jal	mostra
    19:	subi	$sp, $sp, 2
    20:	lw	$ra, 1($sp)
    21:	mov	$t3, $v0

main:
    22:	addi	$sp, $sp, 0
    23:	li	$t0, 3
    24:	sw	$t0, 0($sp)
    25:	lw	$s0, 0($sp)
    26:	mov	$a0, $s0
    27:	jal	mostra
    28:	mov	$t1, $v0
    29:	subi	$sp, $sp, 2
    30:	mov	$a0, $t1
    31:	li	$a1, 2
    32:	out	$a0, 2
    33:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011101_00000000000000000000010111; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000010; 	// addi
memoria_instrucoes[2] = 32'b000100_00111_10101_0000000000000001; 	// subi
memoria_instrucoes[3] = 32'b010110_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[4] = 32'b010011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[5] = 32'b010010_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[6] = 32'b010100_00000_01000_0000000000000000; 	// li
memoria_instrucoes[7] = 32'b100001_00000_00111_0000000000000000; 	// out
memoria_instrucoes[8] = 32'b010011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[9] = 32'b000100_01100_10110_0000000000000001; 	// subi
memoria_instrucoes[10] = 32'b010010_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[11] = 32'b010100_00000_01000_0000000000000001; 	// li
memoria_instrucoes[12] = 32'b100001_00000_00111_0000000000000001; 	// out
memoria_instrucoes[13] = 32'b010100_00000_10111_0000000000000001; 	// li
memoria_instrucoes[14] = 32'b010111_01100_10111_0000000000010001; 	// beq
memoria_instrucoes[15] = 32'b010010_01100_00001_0000000000000000; 	// mov
memoria_instrucoes[16] = 32'b011111_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[17] = 32'b010010_01100_00111_0000000000000000; 	// mov
memoria_instrucoes[18] = 32'b010110_00011_11111_0000000000000001; 	// sw
memoria_instrucoes[19] = 32'b011110_00000000000000000000000001; 	// jal
memoria_instrucoes[20] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[21] = 32'b010011_00011_11111_0000000000000001; 	// lw
memoria_instrucoes[22] = 32'b010010_00001_11000_0000000000000000; 	// mov
memoria_instrucoes[23] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[24] = 32'b010100_00000_10101_0000000000000011; 	// li
memoria_instrucoes[25] = 32'b010110_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[26] = 32'b010011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[27] = 32'b010010_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[28] = 32'b011110_00000000000000000000000001; 	// jal
memoria_instrucoes[29] = 32'b010010_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[30] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[31] = 32'b010010_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[32] = 32'b010100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[33] = 32'b100001_00000_00111_0000000000000010; 	// out
memoria_instrucoes[34] = 32'b111111_00000000000000000000000000; 	// halt
