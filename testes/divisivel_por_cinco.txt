# Compilação C- para código intermediário
# Arquivo: testes/divisivel_por_cinco.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # isDivisibleByFive
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # number
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 2
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> arithmetic operator
                        # -> arithmetic operator: left argument
                            # -> identifier
                            # number
                            # <- identifier
                        # <- arithmetic operator: left argument
                        # -> arithmetic operator: right argument
                            # -> constant
                            # 5
                            # <- constant
                        # <- arithmetic operator: right argument
                        # modulo operator: %
                        # <- Operator
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 1
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 2
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # number
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # number
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # isDivisibleByFive
                    # -> function call: arguments
                        # -> identifier
                        # number
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, isDivisibleByFive, _, _)
2: (get_param, number, _, _)
3: (equal, number, 0, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 2, _, _)
6: (label, L1, _, _)
7: (modulo, number, 5, t2)
8: (equal, t2, 0, t3)
9: (jump_if_false, t3, L2, _)
10: (return, 1, _, _)
11: (goto, L3, _, _)
12: (label, L2, _, _)
13: (return, 2, _, _)
14: (label, L3, _, _)
15: (return, _, _, _)
16: (function, main, _, _)
17: (param_list, 0, _, _)
18: (call, input, 0, t4)
19: (assign, number, t4, _)
20: (param_list, 2, _, _)
21: (param_list, 1, _, _)
22: (set_param, number, _, _)
23: (call, isDivisibleByFive, 1, t5)
24: (set_param, t5, _, _)
25: (set_param, 2, _, _)
26: (call, output, 2, t6)
27: (halt, _, _, _)

********** Código objeto **********

isDivisibleByFive:
    0:	addi	$sp, $sp, 2
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t0, 0
    4:	beq	$s0, $t0, L1
    5:	li	$t1, 2
    6:	mov	$v0, $t1
    7:	jr	$ra
.L1	
    8:	modi	$t2, $s0, 5
    9:	li	$t3, 0
    10:	beq	$t2, $t3, L2
    11:	li	$t4, 1
    12:	mov	$v0, $t4
    13:	jr	$ra
    14:	j	L3
.L2	
    15:	li	$t5, 2
    16:	mov	$v0, $t5
    17:	jr	$ra
.L3	
    18:	jr	$ra

main:
    19:	addi	$sp, $sp, 0
    20:	in	$t0
    21:	sw	$t0, 0($sp)
    22:	lw	$s0, 0($sp)
    23:	mov	$a0, $s0
    24:	jal	isDivisibleByFive
    25:	mov	$t1, $v0
    26:	subi	$sp, $sp, 2
    27:	mov	$a0, $t1
    28:	li	$a1, 2
    29:	out	$a0, 2
    30:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011111_00000000000000000000010100; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000010; 	// addi
memoria_instrucoes[2] = 32'b011000_00011_00111_0000000000000000; 	// sw
memoria_instrucoes[3] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[4] = 32'b010110_00000_10101_0000000000000000; 	// li
memoria_instrucoes[5] = 32'b011001_01011_10101_0000000000001001; 	// beq
memoria_instrucoes[6] = 32'b010110_00000_10110_0000000000000010; 	// li
memoria_instrucoes[7] = 32'b010100_10110_00001_0000000000000000; 	// mov
memoria_instrucoes[8] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[9] = 32'b001010_01011_10111_0000000000000101; 	// modi
memoria_instrucoes[10] = 32'b010110_00000_11000_0000000000000000; 	// li
memoria_instrucoes[11] = 32'b011001_10111_11000_0000000000010000; 	// beq
memoria_instrucoes[12] = 32'b010110_00000_11001_0000000000000001; 	// li
memoria_instrucoes[13] = 32'b010100_11001_00001_0000000000000000; 	// mov
memoria_instrucoes[14] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[15] = 32'b011111_00000000000000000000010011; 	// j
memoria_instrucoes[16] = 32'b010110_00000_11010_0000000000000010; 	// li
memoria_instrucoes[17] = 32'b010100_11010_00001_0000000000000000; 	// mov
memoria_instrucoes[18] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[19] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[20] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[21] = 32'b100010_00000_10101_0000000000000000; 	// in
memoria_instrucoes[22] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[23] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[24] = 32'b010100_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[25] = 32'b100000_00000000000000000000000001; 	// jal
memoria_instrucoes[26] = 32'b010100_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[27] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[28] = 32'b010100_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[29] = 32'b010110_00000_01000_0000000000000010; 	// li
memoria_instrucoes[30] = 32'b100011_00000_00111_0000000000000010; 	// out
memoria_instrucoes[31] = 32'b111111_00000000000000000000000000; 	// halt
