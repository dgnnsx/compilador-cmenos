# Compilação C- para código intermediário
# Arquivo: testes/fibonacci_recursivo.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fib, _, _)
2: (get_param, x, _, _)
3: (less_than, x, 2, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 1, _, _)
6: (goto, L2, _, _)
7: (label, L1, _, _)
8: (param_list, 1, _, _)
9: (subtraction, x, 1, t2)
10: (set_param, t2, _, _)
11: (call, fib, 1, t3)
12: (assign, a, t3, _)
13: (param_list, 1, _, _)
14: (subtraction, x, 2, t4)
15: (set_param, t4, _, _)
16: (call, fib, 1, t5)
17: (addition, a, t5, t6)
18: (return, t6, _, _)
19: (label, L2, _, _)
20: (return, _, _, _)
21: (function, main, _, _)
22: (param_list, 0, _, _)
23: (call, input, 0, t7)
24: (assign, n, t7, _)
25: (param_list, 2, _, _)
26: (param_list, 1, _, _)
27: (set_param, n, _, _)
28: (call, fib, 1, t8)
29: (set_param, t8, _, _)
30: (set_param, 2, _, _)
31: (call, output, 2, t9)
32: (halt, _, _, _)

********** Código objeto **********

fib:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, -1($sp)
    2:	lw	$s0, -1($sp)
    3:	li	$t1, 2
    4:	lt	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 1
    7:	mov	$v0, $t2
    8:	jr	$ra
    9:	j	L2
.L1	
    10:	subi	$t3, $s0, 1
    11:	mov	$a0, $t3
    12:	sw	$ra, 1($sp)
    13:	jal	fib
    14:	subi	$sp, $sp, 3
    15:	lw	$ra, 1($sp)
    16:	mov	$t4, $v0
    17:	sw	$t4, 0($sp)
    18:	lw	$s0, -1($sp)
    19:	subi	$t5, $s0, 2
    20:	mov	$a0, $t5
    21:	sw	$ra, 1($sp)
    22:	jal	fib
    23:	subi	$sp, $sp, 3
    24:	lw	$ra, 1($sp)
    25:	mov	$t6, $v0
    26:	lw	$s0, 0($sp)
    27:	add	$t7, $s0, $t6
    28:	mov	$v0, $t7
    29:	jr	$ra
.L2	
    30:	jr	$ra

main:
    31:	addi	$sp, $sp, 1
    32:	in	$t0
    33:	sw	$t0, 0($sp)
    34:	lw	$s0, 0($sp)
    35:	mov	$a0, $s0
    36:	jal	fib
    37:	mov	$t1, $v0
    38:	subi	$sp, $sp, 3
    39:	mov	$a0, $t1
    40:	li	$a1, 2
    41:	out	$a0, 2
    42:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000100000;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000011; 	// addi
assign rom[2] = 32'b010010_11110_00110_1111111111111111; 	// sw
assign rom[3] = 32'b001111_11110_01010_1111111111111111; 	// lw
assign rom[4] = 32'b010000_00000_10101_0000000000000010; 	// li
assign rom[5] = 32'b000000_01010_10101_10100_00000_001110; 	// lt
assign rom[6] = 32'b010101_10100_00000_0000000000001011; 	// jf
assign rom[7] = 32'b010000_00000_10110_0000000000000001; 	// li
assign rom[8] = 32'b001110_10110_00001_0000000000000000; 	// mov
assign rom[9] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[10] = 32'b010110_00000000000000000000011111; 	// j
assign rom[11] = 32'b000010_01010_10111_0000000000000001; 	// subi
assign rom[12] = 32'b001110_10111_00110_0000000000000000; 	// mov
assign rom[13] = 32'b010010_11110_11111_0000000000000001; 	// sw
assign rom[14] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[15] = 32'b000010_11110_11110_0000000000000011; 	// subi
assign rom[16] = 32'b001111_11110_11111_0000000000000001; 	// lw
assign rom[17] = 32'b001110_00001_11000_0000000000000000; 	// mov
assign rom[18] = 32'b010010_11110_11000_0000000000000000; 	// sw
assign rom[19] = 32'b001111_11110_01010_1111111111111111; 	// lw
assign rom[20] = 32'b000010_01010_11001_0000000000000010; 	// subi
assign rom[21] = 32'b001110_11001_00110_0000000000000000; 	// mov
assign rom[22] = 32'b010010_11110_11111_0000000000000001; 	// sw
assign rom[23] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[24] = 32'b000010_11110_11110_0000000000000011; 	// subi
assign rom[25] = 32'b001111_11110_11111_0000000000000001; 	// lw
assign rom[26] = 32'b001110_00001_11010_0000000000000000; 	// mov
assign rom[27] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[28] = 32'b000000_01010_11010_11011_00000_000000; 	// add
assign rom[29] = 32'b001110_11011_00001_0000000000000000; 	// mov
assign rom[30] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[31] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[32] = 32'b000001_11110_11110_0000000000000001; 	// addi
assign rom[33] = 32'b010011_00000_10100_0000000000000000; 	// in
assign rom[34] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[35] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[36] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign rom[37] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[38] = 32'b001110_00001_10101_0000000000000000; 	// mov
assign rom[39] = 32'b000010_11110_11110_0000000000000011; 	// subi
assign rom[40] = 32'b001110_10101_00110_0000000000000000; 	// mov
assign rom[41] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[42] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[43] = 32'b011000_00000000000000000000000000; 	// halt
