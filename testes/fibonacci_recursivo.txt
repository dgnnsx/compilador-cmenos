# Compilação C- para código intermediário
# Arquivo: testes/fibonacci_recursivo.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # fib
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 0
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 1
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> return
                # -> return: expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> function call
                        # fib
                        # -> function call: arguments
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # x
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> function call
                        # fib
                        # -> function call: arguments
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # x
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 2
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # n
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # n
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # fib
                    # -> function call: arguments
                        # -> identifier
                        # n
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, fib, _, _)
2: (get_param, x, _, _)
3: (equal, x, 0, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 0, _, _)
6: (label, L1, _, _)
7: (equal, x, 1, t2)
8: (jump_if_false, t2, L2, _)
9: (return, 1, _, _)
10: (label, L2, _, _)
11: (param_list, 1, _, _)
12: (subtraction, x, 1, t3)
13: (set_param, t3, _, _)
14: (call, fib, 1, t4)
15: (param_list, 1, _, _)
16: (subtraction, x, 2, t5)
17: (set_param, t5, _, _)
18: (call, fib, 1, t6)
19: (addition, t4, t6, t7)
20: (return, t7, _, _)
21: (function, main, _, _)
22: (param_list, 0, _, _)
23: (call, input, 0, t8)
24: (assign, n, t8, _)
25: (param_list, 2, _, _)
26: (param_list, 1, _, _)
27: (set_param, n, _, _)
28: (call, fib, 1, t9)
29: (set_param, t9, _, _)
30: (set_param, 2, _, _)
31: (call, output, 2, t10)
32: (halt, _, _, _)

********** Código objeto **********

fib:
    0:	addi	$sp, $sp, 2
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t0, 0
    4:	beq	$s0, $t0, L1
    5:	li	$t1, 0
    6:	mov	$v0, $t1
    7:	jr	$ra
.L1	
    8:	li	$t2, 1
    9:	beq	$s0, $t2, L2
    10:	li	$t3, 1
    11:	mov	$v0, $t3
    12:	jr	$ra
.L2	
    13:	subi	$t4, $s0, 1
    14:	mov	$a0, $t4
    15:	sw	$ra, 1($sp)
    16:	jal	fib
    17:	subi	$sp, $sp, 2
    18:	lw	$ra, 1($sp)
    19:	mov	$t5, $v0
    20:	lw	$s0, 0($sp)
    21:	subi	$t6, $s0, 2
    22:	mov	$a0, $t6
    23:	sw	$ra, 1($sp)
    24:	jal	fib
    25:	subi	$sp, $sp, 2
    26:	lw	$ra, 1($sp)
    27:	mov	$t7, $v0
    28:	lw	$t8, $t8
    29:	add	$t9, $t8, $t7
    30:	mov	$v0, $t9
    31:	jr	$ra

main:
    32:	addi	$sp, $sp, 0
    33:	in	$t0
    34:	sw	$t0, 0($sp)
    35:	lw	$s0, 0($sp)
    36:	mov	$a0, $s0
    37:	jal	fib
    38:	mov	$t1, $v0
    39:	subi	$sp, $sp, 2
    40:	mov	$a0, $t1
    41:	li	$a1, 2
    42:	out	$a0, 2
    43:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011111_00000000000000000000100001; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000010; 	// addi
memoria_instrucoes[2] = 32'b011000_00011_00111_0000000000000000; 	// sw
memoria_instrucoes[3] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[4] = 32'b010110_00000_10101_0000000000000000; 	// li
memoria_instrucoes[5] = 32'b011001_01011_10101_0000000000001001; 	// beq
memoria_instrucoes[6] = 32'b010110_00000_10110_0000000000000000; 	// li
memoria_instrucoes[7] = 32'b010100_10110_00001_0000000000000000; 	// mov
memoria_instrucoes[8] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[9] = 32'b010110_00000_10111_0000000000000001; 	// li
memoria_instrucoes[10] = 32'b011001_01011_10111_0000000000001110; 	// beq
memoria_instrucoes[11] = 32'b010110_00000_11000_0000000000000001; 	// li
memoria_instrucoes[12] = 32'b010100_11000_00001_0000000000000000; 	// mov
memoria_instrucoes[13] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[14] = 32'b000100_01011_11001_0000000000000001; 	// subi
memoria_instrucoes[15] = 32'b010100_11001_00111_0000000000000000; 	// mov
memoria_instrucoes[16] = 32'b011000_00011_11111_0000000000000001; 	// sw
memoria_instrucoes[17] = 32'b100000_00000000000000000000000001; 	// jal
memoria_instrucoes[18] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[19] = 32'b010101_00011_11111_0000000000000001; 	// lw
memoria_instrucoes[20] = 32'b010100_00001_11010_0000000000000000; 	// mov
memoria_instrucoes[21] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[22] = 32'b000100_01011_11011_0000000000000010; 	// subi
memoria_instrucoes[23] = 32'b010100_11011_00111_0000000000000000; 	// mov
memoria_instrucoes[24] = 32'b011000_00011_11111_0000000000000001; 	// sw
memoria_instrucoes[25] = 32'b100000_00000000000000000000000001; 	// jal
memoria_instrucoes[26] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[27] = 32'b010101_00011_11111_0000000000000001; 	// lw
memoria_instrucoes[28] = 32'b010100_00001_11100_0000000000000000; 	// mov
memoria_instrucoes[29] = 32'b010101_11101_11101_0000000000000000; 	// lw
memoria_instrucoes[30] = 32'b000001_11101_11100_11110_00000000000; 	// add
memoria_instrucoes[31] = 32'b010100_11110_00001_0000000000000000; 	// mov
memoria_instrucoes[32] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[33] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[34] = 32'b100010_00000_10101_0000000000000000; 	// in
memoria_instrucoes[35] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[36] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[37] = 32'b010100_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[38] = 32'b100000_00000000000000000000000001; 	// jal
memoria_instrucoes[39] = 32'b010100_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[40] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[41] = 32'b010100_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[42] = 32'b010110_00000_01000_0000000000000010; 	// li
memoria_instrucoes[43] = 32'b100011_00000_00111_0000000000000010; 	// out
memoria_instrucoes[44] = 32'b111111_00000000000000000000000000; 	// halt
