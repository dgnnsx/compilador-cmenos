# Compilação C- para código intermediário
# Arquivo: testes/fibonacci_recursivo.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fib, _, _)
2: (get_param, x, _, _)
3: (equal, x, 0, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 0, _, _)
6: (label, L1, _, _)
7: (equal, x, 1, t2)
8: (jump_if_false, t2, L2, _)
9: (return, 1, _, _)
10: (label, L2, _, _)
11: (param_list, 1, _, _)
12: (subtraction, x, 1, t3)
13: (set_param, t3, _, _)
14: (call, fib, 1, t4)
15: (assign, a, t4, _)
16: (param_list, 1, _, _)
17: (subtraction, x, 2, t5)
18: (set_param, t5, _, _)
19: (call, fib, 1, t6)
20: (assign, b, t6, _)
21: (addition, a, b, t7)
22: (return, t7, _, _)
23: (function, main, _, _)
24: (param_list, 0, _, _)
25: (call, input, 0, t8)
26: (assign, n, t8, _)
27: (param_list, 2, _, _)
28: (param_list, 1, _, _)
29: (set_param, n, _, _)
30: (call, fib, 1, t9)
31: (set_param, t9, _, _)
32: (set_param, 2, _, _)
33: (call, output, 2, t10)
34: (halt, _, _, _)

********** Código objeto **********

fib:
    0:	addi	$sp, $sp, 4
    1:	sw	$a0, -2($sp)
    2:	lw	$s0, -2($sp)
    3:	li	$t1, 0
    4:	lt	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 0
    7:	mov	$v0, $t2
    8:	jr	$ra
.L1	
    9:	li	$t4, 1
    10:	lt	$t3, $s0, $t4
    11:	jf	$t3, L2
    12:	li	$t5, 1
    13:	mov	$v0, $t5
    14:	jr	$ra
.L2	
    15:	subi	$t6, $s0, 1
    16:	mov	$a0, $t6
    17:	sw	$ra, 1($sp)
    18:	jal	fib
    19:	subi	$sp, $sp, 4
    20:	lw	$ra, 1($sp)
    21:	mov	$t7, $v0
    22:	sw	$t7, -1($sp)
    23:	lw	$s0, -2($sp)
    24:	subi	$t8, $s0, 2
    25:	mov	$a0, $t8
    26:	sw	$ra, 1($sp)
    27:	jal	fib
    28:	subi	$sp, $sp, 4
    29:	lw	$ra, 1($sp)
    30:	mov	$t9, $v0
    31:	sw	$t9, 0($sp)
    32:	lw	$s0, -1($sp)
    33:	lw	$s1, 0($sp)
    34:	add	$t0, $s0, $s1
    35:	mov	$v0, $t0
    36:	jr	$ra

main:
    37:	addi	$sp, $sp, 1
    38:	in	$t0
    39:	sw	$t0, 0($sp)
    40:	lw	$s0, 0($sp)
    41:	mov	$a0, $s0
    42:	jal	fib
    43:	mov	$t1, $v0
    44:	subi	$sp, $sp, 4
    45:	mov	$a0, $t1
    46:	li	$a1, 2
    47:	out	$a0, 2
    48:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000100110;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000100; 	// addi
assign rom[2] = 32'b010010_11110_00110_1111111111111110; 	// sw
assign rom[3] = 32'b001111_11110_01010_1111111111111110; 	// lw
assign rom[4] = 32'b010000_00000_10101_0000000000000000; 	// li
assign rom[5] = 32'b000000_01010_10101_10100_00000_001100; 	// lt
assign rom[6] = 32'b010101_10100_00000_0000000000001010; 	// jf
assign rom[7] = 32'b010000_00000_10110_0000000000000000; 	// li
assign rom[8] = 32'b001110_10110_00001_0000000000000000; 	// mov
assign rom[9] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[10] = 32'b010000_00000_11000_0000000000000001; 	// li
assign rom[11] = 32'b000000_01010_11000_10111_00000_001100; 	// lt
assign rom[12] = 32'b010101_10111_00000_0000000000010000; 	// jf
assign rom[13] = 32'b010000_00000_11001_0000000000000001; 	// li
assign rom[14] = 32'b001110_11001_00001_0000000000000000; 	// mov
assign rom[15] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[16] = 32'b000010_01010_11010_0000000000000001; 	// subi
assign rom[17] = 32'b001110_11010_00110_0000000000000000; 	// mov
assign rom[18] = 32'b010010_11110_11111_0000000000000001; 	// sw
assign rom[19] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[20] = 32'b000010_11110_11110_0000000000000100; 	// subi
assign rom[21] = 32'b001111_11110_11111_0000000000000001; 	// lw
assign rom[22] = 32'b001110_00001_11011_0000000000000000; 	// mov
assign rom[23] = 32'b010010_11110_11011_1111111111111111; 	// sw
assign rom[24] = 32'b001111_11110_01010_1111111111111110; 	// lw
assign rom[25] = 32'b000010_01010_11100_0000000000000010; 	// subi
assign rom[26] = 32'b001110_11100_00110_0000000000000000; 	// mov
assign rom[27] = 32'b010010_11110_11111_0000000000000001; 	// sw
assign rom[28] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[29] = 32'b000010_11110_11110_0000000000000100; 	// subi
assign rom[30] = 32'b001111_11110_11111_0000000000000001; 	// lw
assign rom[31] = 32'b001110_00001_11101_0000000000000000; 	// mov
assign rom[32] = 32'b010010_11110_11101_0000000000000000; 	// sw
assign rom[33] = 32'b001111_11110_01010_1111111111111111; 	// lw
assign rom[34] = 32'b001111_11110_01011_0000000000000000; 	// lw
assign rom[35] = 32'b000000_01010_01011_10100_00000_000000; 	// add
assign rom[36] = 32'b001110_10100_00001_0000000000000000; 	// mov
assign rom[37] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[38] = 32'b000001_11110_11110_0000000000000001; 	// addi
assign rom[39] = 32'b010011_00000_10100_0000000000000000; 	// in
assign rom[40] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[41] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[42] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign rom[43] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[44] = 32'b001110_00001_10101_0000000000000000; 	// mov
assign rom[45] = 32'b000010_11110_11110_0000000000000100; 	// subi
assign rom[46] = 32'b001110_10101_00110_0000000000000000; 	// mov
assign rom[47] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[48] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[49] = 32'b011000_00000000000000000000000000; 	// halt
