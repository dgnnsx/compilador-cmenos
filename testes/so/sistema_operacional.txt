# Compilação C- para código intermediário
# Arquivo: testes/so/sistema_operacional.t
# Fim da execução.

********** Código intermediário **********

1: (function, main, _, _)
2: (param_list, 2, _, _)
3: (set_param, 31, _, _)
4: (set_param, 0, _, _)
5: (call, addProgramStart, 2, t1)
6: (param_list, 2, _, _)
7: (set_param, 85, _, _)
8: (set_param, 1, _, _)
9: (call, addProgramStart, 2, t2)
10: (param_list, 2, _, _)
11: (set_param, 139, _, _)
12: (set_param, 2, _, _)
13: (call, addProgramStart, 2, t3)
14: (param_list, 2, _, _)
15: (set_param, 210, _, _)
16: (set_param, 3, _, _)
17: (call, addProgramStart, 2, t4)
18: (param_list, 2, _, _)
19: (set_param, 254, _, _)
20: (set_param, 4, _, _)
21: (call, addProgramStart, 2, t5)
22: (param_list, 1, _, _)
23: (param_list, 0, _, _)
24: (call, input, 0, t6)
25: (set_param, t6, _, _)
26: (call, readProgramStart, 1, t7)
27: (assign, programa, t7, _)
28: (param_list, 2, _, _)
29: (set_param, programa, _, _)
30: (set_param, 0, _, _)
31: (call, output, 2, t8)
32: (param_list, 1, _, _)
33: (set_param, programa, _, _)
34: (call, exec, 1, t9)
35: (halt, _, _, _)

********** Código objeto **********

main:
    0:	addi	$sp, $sp, 1
    1:	li	$a0, 31
    2:	li	$a1, 0
    3:	sw	$a0, 0($rz)
    4:	li	$a0, 85
    5:	li	$a1, 1
    6:	sw	$a0, 1($rz)
    7:	li	$a0, 139
    8:	li	$a1, 2
    9:	sw	$a0, 2($rz)
    10:	li	$a0, 210
    11:	li	$a1, 3
    12:	sw	$a0, 3($rz)
    13:	li	$a0, 254
    14:	li	$a1, 4
    15:	sw	$a0, 4($rz)
    16:	in	$t0
    17:	mov	$a0, $t0
    18:	la	$t1, 0($rz)
    19:	add	$t2, $a0, $t1
    20:	lw	$t2, 0($t2)
    21:	mov	$t3, $t2
    22:	sw	$t3, 0($sp)
    23:	lw	$s0, 0($sp)
    24:	mov	$a0, $s0
    25:	li	$a1, 0
    26:	out	$a0, 0
    27:	mov	$a0, $s0
    28:	jr	$a0
    29:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000000001;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000001010; 	// addi
disk[2] <= 32'b010000_00000_00110_0000000000011111; 	// li
disk[3] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[4] <= 32'b010010_00000_00110_0000000000000000; 	// sw
disk[5] <= 32'b010000_00000_00110_0000000001010101; 	// li
disk[6] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[7] <= 32'b010010_00000_00110_0000000000000001; 	// sw
disk[8] <= 32'b010000_00000_00110_0000000010001011; 	// li
disk[9] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[10] <= 32'b010010_00000_00110_0000000000000010; 	// sw
disk[11] <= 32'b010000_00000_00110_0000000011010010; 	// li
disk[12] <= 32'b010000_00000_00111_0000000000000011; 	// li
disk[13] <= 32'b010010_00000_00110_0000000000000011; 	// sw
disk[14] <= 32'b010000_00000_00110_0000000011111110; 	// li
disk[15] <= 32'b010000_00000_00111_0000000000000100; 	// li
disk[16] <= 32'b010010_00000_00110_0000000000000100; 	// sw
disk[17] <= 32'b010011_00000_10100_0000000000000000; 	// in
disk[18] <= 32'b001110_10100_00110_0000000000000000; 	// mov
disk[19] <= 32'b010001_00000_10101_0000000000000000; 	// la
disk[20] <= 32'b000000_00110_10101_10110_00000_000000; 	// add
disk[21] <= 32'b001111_10110_10110_0000000000000000; 	// lw
disk[22] <= 32'b001110_10110_10111_0000000000000000; 	// mov
disk[23] <= 32'b010010_11110_10111_0000000000000000; 	// sw
disk[24] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[25] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[26] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[27] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[28] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[29] <= 32'b000000_00110_00000_00000_00000_010010; 	// jr
disk[30] <= 32'b011000_00000000000000000000000000; 	// halt
