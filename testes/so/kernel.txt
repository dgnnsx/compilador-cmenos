# Compilação C- para código intermediário
# Arquivo: testes/so/kernel.txt
# Fim da execução.

********** Código intermediário **********

1: (function, carregarPrograma, _, _)
2: (get_param, beginOnDisk, _, _)
3: (assign, HALT, 24, _)
4: (assign, index, beginOnDisk, _)
5: (param_list, 1, _, _)
6: (set_param, index, _, _)
7: (call, ldk, 1, t1)
8: (assign, instrucao, t1, _)
9: (label, L1, _, _)
10: (shift_right, instrucao, 26, t2)
11: (not_equal, t2, HALT, t3)
12: (jump_if_false, t3, L2, _)
13: (param_list, 2, _, _)
14: (set_param, instrucao, _, _)
15: (set_param, index, _, _)
16: (call, sim, 2, t4)
17: (addition, index, 1, t5)
18: (assign, index, t5, _)
19: (param_list, 1, _, _)
20: (set_param, index, _, _)
21: (call, ldk, 1, t6)
22: (assign, instrucao, t6, _)
23: (goto, L1, _, _)
24: (label, L2, _, _)
25: (param_list, 2, _, _)
26: (set_param, instrucao, _, _)
27: (set_param, index, _, _)
28: (call, sim, 2, t7)
29: (return, index, _, _)
30: (function, main, _, _)
31: (assign, MAIOR_ELEMENTO_INICIO, 64, _)
32: (param_list, 1, _, _)
33: (set_param, MAIOR_ELEMENTO_INICIO, _, _)
34: (call, carregarPrograma, 1, t8)
35: (assign, index, t8, _)
36: (param_list, 1, _, _)
37: (set_param, 120, _, _)
38: (call, carregarPrograma, 1, t9)
39: (assign, index, t9, _)
40: (param_list, 0, _, _)
41: (call, input, 0, t10)
42: (assign, i, t10, _)
43: (param_list, 2, _, _)
44: (set_param, i, _, _)
45: (set_param, 0, _, _)
46: (call, output, 2, t11)
47: (param_list, 2, _, _)
48: (set_param, i, _, _)
49: (set_param, 1, _, _)
50: (call, mmuLower, 2, t12)
51: (halt, _, _, _)

********** Código objeto **********

carregarPrograma:
    0:	addi	$sp, $sp, 6
    1:	sw	$a0, -3($sp)
    2:	li	$t0, 24
    3:	sw	$t0, 0($sp)
    4:	lw	$s0, -3($sp)
    5:	sw	$s0, -1($sp)
    6:	lw	$s1, -1($sp)
    7:	mov	$a0, $s1
    8:	ldk	$t1, $a0
    9:	sw	$t1, -2($sp)
.L1	
    10:	lw	$s2, -2($sp)
    11:	srli	$t2, $s2, 26
    12:	lw	$s3, 0($sp)
    13:	ne	$t3, $t2, $s3
    14:	jf	$t3, L2
    15:	mov	$a0, $s2
    16:	mov	$a1, $s1
    17:	sim	$a0, $a1
    18:	addi	$t4, $s1, 1
    19:	sw	$t4, -1($sp)
    20:	lw	$s1, -1($sp)
    21:	mov	$a0, $s1
    22:	ldk	$t5, $a0
    23:	sw	$t5, -2($sp)
    24:	lw	$s2, -2($sp)
    25:	j	L1
.L2	
    26:	mov	$a0, $s2
    27:	mov	$a1, $s1
    28:	sim	$a0, $a1
    29:	mov	$v0, $s1
    30:	jr	$ra

main:
    31:	addi	$sp, $sp, 3
    32:	li	$t0, 64
    33:	sw	$t0, -1($sp)
    34:	lw	$s0, -1($sp)
    35:	mov	$a0, $s0
    36:	sw	$s0, -1($sp)
    37:	jal	carregarPrograma
    38:	mov	$s1, $v0
    39:	subi	$sp, $sp, 6
    40:	lw	$s0, -1($sp)
    41:	sw	$s1, -2($sp)
    42:	li	$a0, 120
    43:	sw	$s0, -1($sp)
    44:	sw	$s1, -4($sp)
    45:	jal	carregarPrograma
    46:	mov	$s2, $v0
    47:	subi	$sp, $sp, 6
    48:	lw	$s0, -1($sp)
    49:	lw	$s1, -4($sp)
    50:	sw	$s2, -2($sp)
    51:	in	$t1
    52:	sw	$t1, 0($sp)
    53:	lw	$s3, 0($sp)
    54:	mov	$a0, $s3
    55:	li	$a1, 0
    56:	out	$a0, 0
    57:	mov	$a0, $s3
    58:	li	$a1, 1
    59:	mmuLower	$a0, $a1
    60:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000100000;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000110; 	// addi
disk[2] <= 32'b010010_11110_00110_1111111111111101; 	// sw
disk[3] <= 32'b010000_00000_10100_0000000000011000; 	// li
disk[4] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[5] <= 32'b001111_11110_01010_1111111111111101; 	// lw
disk[6] <= 32'b010010_11110_01010_1111111111111111; 	// sw
disk[7] <= 32'b001111_11110_01011_1111111111111111; 	// lw
disk[8] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[9] <= 32'b011001_00110_10101_0000000000000000; 	// ldk
disk[10] <= 32'b010010_11110_10101_1111111111111110; 	// sw
disk[11] <= 32'b001111_11110_01100_1111111111111110; 	// lw
disk[12] <= 32'b001101_01100_10110_0000000000011010; 	// srli
disk[13] <= 32'b001111_11110_01101_0000000000000000; 	// lw
disk[14] <= 32'b000000_10110_01101_10111_00000_001101; 	// ne
disk[15] <= 32'b010101_10111_00000_0000000000011011; 	// jf
disk[16] <= 32'b001110_01100_00110_0000000000000000; 	// mov
disk[17] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[18] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[19] <= 32'b000001_01011_11000_0000000000000001; 	// addi
disk[20] <= 32'b010010_11110_11000_1111111111111111; 	// sw
disk[21] <= 32'b001111_11110_01011_1111111111111111; 	// lw
disk[22] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[23] <= 32'b011001_00110_11001_0000000000000000; 	// ldk
disk[24] <= 32'b010010_11110_11001_1111111111111110; 	// sw
disk[25] <= 32'b001111_11110_01100_1111111111111110; 	// lw
disk[26] <= 32'b010110_00000000000000000000001011; 	// j
disk[27] <= 32'b001110_01100_00110_0000000000000000; 	// mov
disk[28] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[29] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[30] <= 32'b001110_01011_00001_0000000000000000; 	// mov
disk[31] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[32] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[33] <= 32'b010000_00000_10100_0000000001000000; 	// li
disk[34] <= 32'b010010_11110_10100_1111111111111111; 	// sw
disk[35] <= 32'b001111_11110_01010_1111111111111111; 	// lw
disk[36] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[37] <= 32'b010010_11110_01010_1111111111111111; 	// sw
disk[38] <= 32'b010111_00000000000000000000000001; 	// jal
disk[39] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[40] <= 32'b000010_11110_11110_0000000000000110; 	// subi
disk[41] <= 32'b001111_11110_01010_1111111111111111; 	// lw
disk[42] <= 32'b010010_11110_01011_1111111111111110; 	// sw
disk[43] <= 32'b010000_00000_00110_0000000001111000; 	// li
disk[44] <= 32'b010010_11110_01010_1111111111111111; 	// sw
disk[45] <= 32'b010010_11110_01011_1111111111111100; 	// sw
disk[46] <= 32'b010111_00000000000000000000000001; 	// jal
disk[47] <= 32'b001110_00001_01100_0000000000000000; 	// mov
disk[48] <= 32'b000010_11110_11110_0000000000000110; 	// subi
disk[49] <= 32'b001111_11110_01010_1111111111111111; 	// lw
disk[50] <= 32'b001111_11110_01011_1111111111111100; 	// lw
disk[51] <= 32'b010010_11110_01100_1111111111111110; 	// sw
disk[52] <= 32'b010011_00000_10101_0000000000000000; 	// in
disk[53] <= 32'b010010_11110_10101_0000000000000000; 	// sw
disk[54] <= 32'b001111_11110_01101_0000000000000000; 	// lw
disk[55] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[56] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[57] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[58] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[59] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[60] <= 32'b100000_00111_00110_0000000000000000; 	// mmuLower
disk[61] <= 32'b011000_00000000000000000000000000; 	// halt
