# Compilação C- para código intermediário
# Arquivo: testes/so/kernel.txt
# Fim da execução.

********** Código intermediário **********

1: (function, inicializarParticoes, _, _)
2: (assign, TAMANHO_PARTICAO, 32, _)
3: (assign, ERRO_DE_PARTICAO, 100, _)
4: (assign, i, 0, _)
5: (label, L1, _, _)
6: (less_than, i, 32, t2)
7: (jump_if_false, t2, L2, _)
8: (vector_address, PARTICOES, i, t3)
9: (assign, t3, 0, _)
10: (addition, i, 1, t4)
11: (assign, i, t4, _)
12: (goto, L1, _, _)
13: (label, L2, _, _)
14: (assign, i, 0, _)
15: (label, L3, _, _)
16: (less_than, i, 7, t5)
17: (jump_if_false, t5, L4, _)
18: (vector_address, PARTICOES, i, t6)
19: (assign, t6, 1, _)
20: (addition, i, 1, t7)
21: (assign, i, t7, _)
22: (goto, L3, _, _)
23: (label, L4, _, _)
24: (return, _, _, _)
25: (function, limparDisplays, _, _)
26: (param_list, 2, _, _)
27: (set_param, 0, _, _)
28: (set_param, 0, _, _)
29: (call, output, 2, t8)
30: (param_list, 2, _, _)
31: (set_param, 0, _, _)
32: (set_param, 1, _, _)
33: (call, output, 2, t9)
34: (param_list, 2, _, _)
35: (set_param, 0, _, _)
36: (set_param, 2, _, _)
37: (call, output, 2, t10)
38: (return, _, _, _)
39: (function, obterParticaoLivre, _, _)
40: (assign, i, 0, _)
41: (label, L5, _, _)
42: (less_than, i, 32, t11)
43: (jump_if_false, t11, L7, _)
44: (vector_value, PARTICOES, i, t12)
45: (equal, t12, 0, t13)
46: (jump_if_false, t13, L6, _)
47: (vector_address, PARTICOES, i, t14)
48: (assign, t14, 1, _)
49: (addition, i, 1, t15)
50: (vector_address, PARTICOES, t15, t16)
51: (assign, t16, 1, _)
52: (addition, i, 2, t17)
53: (vector_address, PARTICOES, t17, t18)
54: (assign, t18, 1, _)
55: (return, i, _, _)
56: (label, L6, _, _)
57: (addition, i, 1, t19)
58: (assign, i, t19, _)
59: (goto, L5, _, _)
60: (label, L7, _, _)
61: (return, ERRO_DE_PARTICAO, _, _)
62: (function, carregarPrograma, _, _)
63: (get_param, beginOnDisk, _, _)
64: (get_param, nPrograma, _, _)
65: (assign, SYSCALL, 37, _)
66: (assign, indexDisk, beginOnDisk, _)
67: (param_list, 0, _, _)
68: (call, obterParticaoLivre, 0, t20)
69: (assign, particao, t20, _)
70: (multiplication, TAMANHO_PARTICAO, particao, t21)
71: (assign, indexMemory, t21, _)
72: (param_list, 1, _, _)
73: (set_param, indexDisk, _, _)
74: (call, ldk, 1, t22)
75: (assign, instrucao, t22, _)
76: (label, L8, _, _)
77: (shift_right, instrucao, 26, t23)
78: (not_equal, t23, SYSCALL, t24)
79: (jump_if_false, t24, L9, _)
80: (param_list, 2, _, _)
81: (set_param, instrucao, _, _)
82: (set_param, indexMemory, _, _)
83: (call, sim, 2, t25)
84: (addition, indexDisk, 1, t26)
85: (assign, indexDisk, t26, _)
86: (param_list, 1, _, _)
87: (set_param, indexDisk, _, _)
88: (call, ldk, 1, t27)
89: (assign, instrucao, t27, _)
90: (addition, indexMemory, 1, t28)
91: (assign, indexMemory, t28, _)
92: (goto, L8, _, _)
93: (label, L9, _, _)
94: (param_list, 2, _, _)
95: (set_param, instrucao, _, _)
96: (set_param, indexMemory, _, _)
97: (call, sim, 2, t29)
98: (param_list, 1, _, _)
99: (set_param, nPrograma, _, _)
100: (call, mmuSelect, 1, t30)
101: (param_list, 1, _, _)
102: (multiplication, TAMANHO_PARTICAO, particao, t31)
103: (set_param, t31, _, _)
104: (call, mmuLowerIM, 1, t32)
105: (return, indexMemory, _, _)
106: (function, main, _, _)
107: (param_list, 0, _, _)
108: (call, inicializarParticoes, 0, t33)
109: (assign, PROGRAMA_1, 250, _)
110: (assign, PROGRAMA_2, 300, _)
111: (assign, PROGRAMA_3, 354, _)
112: (param_list, 2, _, _)
113: (set_param, PROGRAMA_1, _, _)
114: (set_param, 1, _, _)
115: (call, carregarPrograma, 2, t34)
116: (param_list, 2, _, _)
117: (set_param, PROGRAMA_2, _, _)
118: (set_param, 2, _, _)
119: (call, carregarPrograma, 2, t35)
120: (param_list, 2, _, _)
121: (set_param, PROGRAMA_3, _, _)
122: (set_param, 3, _, _)
123: (call, carregarPrograma, 2, t36)
124: (param_list, 1, _, _)
125: (set_param, 1, _, _)
126: (call, exec, 1, t37)
127: (param_list, 1, _, _)
128: (set_param, 2, _, _)
129: (call, exec, 1, t38)
130: (param_list, 1, _, _)
131: (set_param, 3, _, _)
132: (call, exec, 1, t39)
133: (halt, _, _, _)

********** Código objeto **********

inicializarParticoes:
    0:	addi	$sp, $sp, 3
    1:	li	$t0, 32
    2:	sw	$t0, 32($gp)
    3:	li	$t1, 100
    4:	sw	$t1, 33($gp)
    5:	li	$t2, 0
    6:	sw	$t2, 0($sp)
.L1	
    7:	lw	$s0, 0($sp)
    8:	li	$t4, 32
    9:	lt	$t3, $s0, $t4
    10:	jf	$t3, L2
    11:	la	$s1, 0($gp)
    12:	add	$t5, $s1, $s0
    13:	li	$t6, 0
    14:	sw	$t6, 0($t5)
    15:	addi	$t7, $s0, 1
    16:	sw	$t7, 0($sp)
    17:	lw	$s0, 0($sp)
    18:	j	L1
.L2	
    19:	li	$t8, 0
    20:	sw	$t8, 0($sp)
    21:	lw	$s0, 0($sp)
.L3	
    22:	li	$t0, 7
    23:	lt	$t9, $s0, $t0
    24:	jf	$t9, L4
    25:	add	$t1, $s1, $s0
    26:	li	$t2, 1
    27:	sw	$t2, 0($t1)
    28:	addi	$t3, $s0, 1
    29:	sw	$t3, 0($sp)
    30:	lw	$s0, 0($sp)
    31:	j	L3
.L4	
    32:	jr	$ra

limparDisplays:
    33:	addi	$sp, $sp, 2
    34:	li	$a0, 0
    35:	li	$a1, 0
    36:	out	$a0, 0
    37:	li	$a0, 0
    38:	li	$a1, 1
    39:	out	$a0, 1
    40:	li	$a0, 0
    41:	li	$a1, 2
    42:	out	$a0, 2
    43:	jr	$ra

obterParticaoLivre:
    44:	addi	$sp, $sp, 3
    45:	li	$t0, 0
    46:	sw	$t0, 0($sp)
.L5	
    47:	lw	$s0, 0($sp)
    48:	li	$t2, 32
    49:	lt	$t1, $s0, $t2
    50:	jf	$t1, L7
    51:	la	$s1, 0($gp)
    52:	add	$t3, $s1, $s0
    53:	lw	$t3, 0($t3)
    54:	li	$t5, 0
    55:	eq	$t4, $t3, $t5
    56:	jf	$t4, L6
    57:	add	$t6, $s1, $s0
    58:	li	$t7, 1
    59:	sw	$t7, 0($t6)
    60:	addi	$t8, $s0, 1
    61:	add	$t9, $s1, $t8
    62:	li	$t0, 1
    63:	sw	$t0, 0($t9)
    64:	addi	$t1, $s0, 2
    65:	add	$t2, $s1, $t1
    66:	li	$t3, 1
    67:	sw	$t3, 0($t2)
    68:	mov	$v0, $s0
    69:	jr	$ra
.L6	
    70:	addi	$t4, $s0, 1
    71:	sw	$t4, 0($sp)
    72:	lw	$s0, 0($sp)
    73:	j	L5
.L7	
    74:	lw	$s2, 33($gp)
    75:	mov	$v0, $s2
    76:	jr	$ra

carregarPrograma:
    77:	addi	$sp, $sp, 9
    78:	sw	$a0, -6($sp)
    79:	sw	$a1, -5($sp)
    80:	li	$t0, 37
    81:	sw	$t0, 0($sp)
    82:	lw	$s0, -6($sp)
    83:	sw	$s0, -4($sp)
    84:	sw	$s0, -6($sp)
    85:	sw	$ra, -7($sp)
    86:	jal	obterParticaoLivre
    87:	subi	$sp, $sp, 3
    88:	lw	$s0, -6($sp)
    89:	lw	$ra, -7($sp)
    90:	mov	$s1, $v0
    91:	sw	$s1, -1($sp)
    92:	lw	$s2, 32($gp)
    93:	lw	$s3, -1($sp)
    94:	mul	$t1, $s2, $s3
    95:	sw	$t1, -3($sp)
    96:	lw	$s4, -4($sp)
    97:	mov	$a0, $s4
    98:	ldk	$t2, $a0
    99:	sw	$t2, -2($sp)
.L8	
    100:	lw	$s5, -2($sp)
    101:	srli	$t3, $s5, 26
    102:	lw	$s6, 0($sp)
    103:	ne	$t4, $t3, $s6
    104:	jf	$t4, L9
    105:	mov	$a0, $s5
    106:	lw	$s7, -3($sp)
    107:	mov	$a1, $s7
    108:	sim	$a0, $a1
    109:	addi	$t5, $s4, 1
    110:	sw	$t5, -4($sp)
    111:	lw	$s4, -4($sp)
    112:	mov	$a0, $s4
    113:	ldk	$t6, $a0
    114:	sw	$t6, -2($sp)
    115:	lw	$s5, -2($sp)
    116:	addi	$t7, $s7, 1
    117:	sw	$t7, -3($sp)
    118:	lw	$s7, -3($sp)
    119:	j	L8
.L9	
    120:	mov	$a0, $s5
    121:	mov	$a1, $s7
    122:	sim	$a0, $a1
    123:	lw	$s8, -5($sp)
    124:	mov	$a0, $s8
    125:	mmuSelect	, $a0
    126:	mul	$t8, $s2, $s3
    127:	mov	$a0, $t8
    128:	mmuLowerIM	$a0
    129:	mov	$v0, $s7
    130:	jr	$ra

main:
    131:	mov	$gp, $rz
    132:	addi	$sp, $sp, 38
    133:	sw	$ra, -3($sp)
    134:	jal	inicializarParticoes
    135:	subi	$sp, $sp, 3
    136:	lw	$ra, -3($sp)
    137:	mov	$s0, $v0
    138:	li	$t0, 250
    139:	sw	$t0, -2($sp)
    140:	li	$t1, 300
    141:	sw	$t1, -1($sp)
    142:	li	$t2, 354
    143:	sw	$t2, 0($sp)
    144:	lw	$s1, -2($sp)
    145:	mov	$a0, $s1
    146:	li	$a1, 1
    147:	sw	$s0, -7($sp)
    148:	sw	$ra, -3($sp)
    149:	jal	carregarPrograma
    150:	subi	$sp, $sp, 9
    151:	lw	$s0, -7($sp)
    152:	lw	$ra, -3($sp)
    153:	mov	$s2, $v0
    154:	lw	$s3, -1($sp)
    155:	mov	$a0, $s3
    156:	li	$a1, 2
    157:	sw	$s0, -7($sp)
    158:	sw	$s2, -7($sp)
    159:	sw	$s3, -1($sp)
    160:	sw	$ra, -3($sp)
    161:	jal	carregarPrograma
    162:	subi	$sp, $sp, 9
    163:	lw	$s0, -7($sp)
    164:	lw	$s2, -7($sp)
    165:	lw	$s3, -1($sp)
    166:	lw	$ra, -3($sp)
    167:	mov	$s4, $v0
    168:	lw	$s5, 0($sp)
    169:	mov	$a0, $s5
    170:	li	$a1, 3
    171:	sw	$s0, -7($sp)
    172:	sw	$s2, -7($sp)
    173:	sw	$s3, -1($sp)
    174:	sw	$s4, -7($sp)
    175:	sw	$s5, 0($sp)
    176:	sw	$ra, -3($sp)
    177:	jal	carregarPrograma
    178:	subi	$sp, $sp, 9
    179:	lw	$s0, -7($sp)
    180:	lw	$s2, -7($sp)
    181:	lw	$s3, -1($sp)
    182:	lw	$s4, -7($sp)
    183:	lw	$s5, 0($sp)
    184:	lw	$ra, -3($sp)
    185:	mov	$s6, $v0
    186:	li	$a0, 1
    187:	mmuSelect	, $a0
    188:	exec	
    189:	li	$a0, 2
    190:	mmuSelect	, $a0
    191:	exec	
    192:	li	$a0, 3
    193:	mmuSelect	, $a0
    194:	exec	
    195:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000010000100;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[2] <= 32'b010000_00000_10100_0000000000100000; 	// li
disk[3] <= 32'b010010_00101_10100_0000000000100000; 	// sw
disk[4] <= 32'b010000_00000_10101_0000000001100100; 	// li
disk[5] <= 32'b010010_00101_10101_0000000000100001; 	// sw
disk[6] <= 32'b010000_00000_10110_0000000000000000; 	// li
disk[7] <= 32'b010010_11110_10110_0000000000000000; 	// sw
disk[8] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[9] <= 32'b010000_00000_11000_0000000000100000; 	// li
disk[10] <= 32'b000000_01010_11000_10111_00000_001110; 	// lt
disk[11] <= 32'b010101_10111_00000_0000000000010100; 	// jf
disk[12] <= 32'b010001_00101_01011_0000000000000000; 	// la
disk[13] <= 32'b000000_01011_01010_11001_00000_000000; 	// add
disk[14] <= 32'b010000_00000_11010_0000000000000000; 	// li
disk[15] <= 32'b010010_11001_11010_0000000000000000; 	// sw
disk[16] <= 32'b000001_01010_11011_0000000000000001; 	// addi
disk[17] <= 32'b010010_11110_11011_0000000000000000; 	// sw
disk[18] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[19] <= 32'b010110_00000000000000000000001000; 	// j
disk[20] <= 32'b010000_00000_11100_0000000000000000; 	// li
disk[21] <= 32'b010010_11110_11100_0000000000000000; 	// sw
disk[22] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[23] <= 32'b010000_00000_10100_0000000000000111; 	// li
disk[24] <= 32'b000000_01010_10100_11101_00000_001110; 	// lt
disk[25] <= 32'b010101_11101_00000_0000000000100001; 	// jf
disk[26] <= 32'b000000_01011_01010_10101_00000_000000; 	// add
disk[27] <= 32'b010000_00000_10110_0000000000000001; 	// li
disk[28] <= 32'b010010_10101_10110_0000000000000000; 	// sw
disk[29] <= 32'b000001_01010_10111_0000000000000001; 	// addi
disk[30] <= 32'b010010_11110_10111_0000000000000000; 	// sw
disk[31] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[32] <= 32'b010110_00000000000000000000010111; 	// j
disk[33] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[34] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[35] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[36] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[37] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[38] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[39] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[40] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[41] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[42] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[43] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[44] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[45] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[46] <= 32'b010000_00000_10100_0000000000000000; 	// li
disk[47] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[48] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[49] <= 32'b010000_00000_10110_0000000000100000; 	// li
disk[50] <= 32'b000000_01010_10110_10101_00000_001110; 	// lt
disk[51] <= 32'b010101_10101_00000_0000000001001011; 	// jf
disk[52] <= 32'b010001_00101_01011_0000000000000000; 	// la
disk[53] <= 32'b000000_01011_01010_10111_00000_000000; 	// add
disk[54] <= 32'b001111_10111_10111_0000000000000000; 	// lw
disk[55] <= 32'b010000_00000_11001_0000000000000000; 	// li
disk[56] <= 32'b000000_10111_11001_11000_00000_001100; 	// eq
disk[57] <= 32'b010101_11000_00000_0000000001000111; 	// jf
disk[58] <= 32'b000000_01011_01010_11010_00000_000000; 	// add
disk[59] <= 32'b010000_00000_11011_0000000000000001; 	// li
disk[60] <= 32'b010010_11010_11011_0000000000000000; 	// sw
disk[61] <= 32'b000001_01010_11100_0000000000000001; 	// addi
disk[62] <= 32'b000000_01011_11100_11101_00000_000000; 	// add
disk[63] <= 32'b010000_00000_10100_0000000000000001; 	// li
disk[64] <= 32'b010010_11101_10100_0000000000000000; 	// sw
disk[65] <= 32'b000001_01010_10101_0000000000000010; 	// addi
disk[66] <= 32'b000000_01011_10101_10110_00000_000000; 	// add
disk[67] <= 32'b010000_00000_10111_0000000000000001; 	// li
disk[68] <= 32'b010010_10110_10111_0000000000000000; 	// sw
disk[69] <= 32'b001110_01010_00001_0000000000000000; 	// mov
disk[70] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[71] <= 32'b000001_01010_11000_0000000000000001; 	// addi
disk[72] <= 32'b010010_11110_11000_0000000000000000; 	// sw
disk[73] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[74] <= 32'b010110_00000000000000000000110000; 	// j
disk[75] <= 32'b001111_00101_01100_0000000000100001; 	// lw
disk[76] <= 32'b001110_01100_00001_0000000000000000; 	// mov
disk[77] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[78] <= 32'b000001_11110_11110_0000000000001001; 	// addi
disk[79] <= 32'b010010_11110_00110_1111111111111010; 	// sw
disk[80] <= 32'b010010_11110_00111_1111111111111011; 	// sw
disk[81] <= 32'b010000_00000_10100_0000000000100101; 	// li
disk[82] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[83] <= 32'b001111_11110_01010_1111111111111010; 	// lw
disk[84] <= 32'b010010_11110_01010_1111111111111100; 	// sw
disk[85] <= 32'b010010_11110_01010_1111111111111010; 	// sw
disk[86] <= 32'b010010_11110_11111_1111111111111001; 	// sw
disk[87] <= 32'b010111_00000000000000000000101101; 	// jal
disk[88] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[89] <= 32'b001111_11110_01010_1111111111111010; 	// lw
disk[90] <= 32'b001111_11110_11111_1111111111111001; 	// lw
disk[91] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[92] <= 32'b010010_11110_01011_1111111111111111; 	// sw
disk[93] <= 32'b001111_00101_01100_0000000000100000; 	// lw
disk[94] <= 32'b001111_11110_01101_1111111111111111; 	// lw
disk[95] <= 32'b000000_01100_01101_10101_00000_000010; 	// mul
disk[96] <= 32'b010010_11110_10101_1111111111111101; 	// sw
disk[97] <= 32'b001111_11110_01110_1111111111111100; 	// lw
disk[98] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[99] <= 32'b011001_00110_10110_0000000000000000; 	// ldk
disk[100] <= 32'b010010_11110_10110_1111111111111110; 	// sw
disk[101] <= 32'b001111_11110_01111_1111111111111110; 	// lw
disk[102] <= 32'b001101_01111_10111_0000000000011010; 	// srli
disk[103] <= 32'b001111_11110_10000_0000000000000000; 	// lw
disk[104] <= 32'b000000_10111_10000_11000_00000_001101; 	// ne
disk[105] <= 32'b010101_11000_00000_0000000001111001; 	// jf
disk[106] <= 32'b001110_01111_00110_0000000000000000; 	// mov
disk[107] <= 32'b001111_11110_10001_1111111111111101; 	// lw
disk[108] <= 32'b001110_10001_00111_0000000000000000; 	// mov
disk[109] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[110] <= 32'b000001_01110_11001_0000000000000001; 	// addi
disk[111] <= 32'b010010_11110_11001_1111111111111100; 	// sw
disk[112] <= 32'b001111_11110_01110_1111111111111100; 	// lw
disk[113] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[114] <= 32'b011001_00110_11010_0000000000000000; 	// ldk
disk[115] <= 32'b010010_11110_11010_1111111111111110; 	// sw
disk[116] <= 32'b001111_11110_01111_1111111111111110; 	// lw
disk[117] <= 32'b000001_10001_11011_0000000000000001; 	// addi
disk[118] <= 32'b010010_11110_11011_1111111111111101; 	// sw
disk[119] <= 32'b001111_11110_10001_1111111111111101; 	// lw
disk[120] <= 32'b010110_00000000000000000001100101; 	// j
disk[121] <= 32'b001110_01111_00110_0000000000000000; 	// mov
disk[122] <= 32'b001110_10001_00111_0000000000000000; 	// mov
disk[123] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[124] <= 32'b001111_11110_10010_1111111111111011; 	// lw
disk[125] <= 32'b001110_10010_00110_0000000000000000; 	// mov
disk[126] <= 32'b100100_00110_00000_0000000000000000; 	// mmuSelect
disk[127] <= 32'b000000_01100_01101_11100_00000_000010; 	// mul
disk[128] <= 32'b001110_11100_00110_0000000000000000; 	// mov
disk[129] <= 32'b100000_00000_00110_0000000000000000; 	// mmuLowerIM
disk[130] <= 32'b001110_10001_00001_0000000000000000; 	// mov
disk[131] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[132] <= 32'b001110_00000_00101_0000000000000000; 	// mov
disk[133] <= 32'b000001_11110_11110_0000000000100110; 	// addi
disk[134] <= 32'b010010_11110_11111_1111111111111101; 	// sw
disk[135] <= 32'b010111_00000000000000000000000001; 	// jal
disk[136] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[137] <= 32'b001111_11110_11111_1111111111111101; 	// lw
disk[138] <= 32'b001110_00001_01010_0000000000000000; 	// mov
disk[139] <= 32'b010000_00000_10100_0000000011111010; 	// li
disk[140] <= 32'b010010_11110_10100_1111111111111110; 	// sw
disk[141] <= 32'b010000_00000_10101_0000000100101100; 	// li
disk[142] <= 32'b010010_11110_10101_1111111111111111; 	// sw
disk[143] <= 32'b010000_00000_10110_0000000101100010; 	// li
disk[144] <= 32'b010010_11110_10110_0000000000000000; 	// sw
disk[145] <= 32'b001111_11110_01011_1111111111111110; 	// lw
disk[146] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[147] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[148] <= 32'b010010_11110_01010_1111111111111001; 	// sw
disk[149] <= 32'b010010_11110_11111_1111111111111101; 	// sw
disk[150] <= 32'b010111_00000000000000000001001110; 	// jal
disk[151] <= 32'b000010_11110_11110_0000000000001001; 	// subi
disk[152] <= 32'b001111_11110_01010_1111111111111001; 	// lw
disk[153] <= 32'b001111_11110_11111_1111111111111101; 	// lw
disk[154] <= 32'b001110_00001_01100_0000000000000000; 	// mov
disk[155] <= 32'b001111_11110_01101_1111111111111111; 	// lw
disk[156] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[157] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[158] <= 32'b010010_11110_01010_1111111111111001; 	// sw
disk[159] <= 32'b010010_11110_01100_1111111111111001; 	// sw
disk[160] <= 32'b010010_11110_01101_1111111111111111; 	// sw
disk[161] <= 32'b010010_11110_11111_1111111111111101; 	// sw
disk[162] <= 32'b010111_00000000000000000001001110; 	// jal
disk[163] <= 32'b000010_11110_11110_0000000000001001; 	// subi
disk[164] <= 32'b001111_11110_01010_1111111111111001; 	// lw
disk[165] <= 32'b001111_11110_01100_1111111111111001; 	// lw
disk[166] <= 32'b001111_11110_01101_1111111111111111; 	// lw
disk[167] <= 32'b001111_11110_11111_1111111111111101; 	// lw
disk[168] <= 32'b001110_00001_01110_0000000000000000; 	// mov
disk[169] <= 32'b001111_11110_01111_0000000000000000; 	// lw
disk[170] <= 32'b001110_01111_00110_0000000000000000; 	// mov
disk[171] <= 32'b010000_00000_00111_0000000000000011; 	// li
disk[172] <= 32'b010010_11110_01010_1111111111111001; 	// sw
disk[173] <= 32'b010010_11110_01100_1111111111111001; 	// sw
disk[174] <= 32'b010010_11110_01101_1111111111111111; 	// sw
disk[175] <= 32'b010010_11110_01110_1111111111111001; 	// sw
disk[176] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[177] <= 32'b010010_11110_11111_1111111111111101; 	// sw
disk[178] <= 32'b010111_00000000000000000001001110; 	// jal
disk[179] <= 32'b000010_11110_11110_0000000000001001; 	// subi
disk[180] <= 32'b001111_11110_01010_1111111111111001; 	// lw
disk[181] <= 32'b001111_11110_01100_1111111111111001; 	// lw
disk[182] <= 32'b001111_11110_01101_1111111111111111; 	// lw
disk[183] <= 32'b001111_11110_01110_1111111111111001; 	// lw
disk[184] <= 32'b001111_11110_01111_0000000000000000; 	// lw
disk[185] <= 32'b001111_11110_11111_1111111111111101; 	// lw
disk[186] <= 32'b001110_00001_10000_0000000000000000; 	// mov
disk[187] <= 32'b010000_00000_00110_0000000000000001; 	// li
disk[188] <= 32'b100100_00110_00000_0000000000000000; 	// mmuSelect
disk[189] <= 32'b100110_00000000000000000000000000; 	// exec
disk[190] <= 32'b010000_00000_00110_0000000000000010; 	// li
disk[191] <= 32'b100100_00110_00000_0000000000000000; 	// mmuSelect
disk[192] <= 32'b100110_00000000000000000000000000; 	// exec
disk[193] <= 32'b010000_00000_00110_0000000000000011; 	// li
disk[194] <= 32'b100100_00110_00000_0000000000000000; 	// mmuSelect
disk[195] <= 32'b100110_00000000000000000000000000; 	// exec
disk[196] <= 32'b011000_00000000000000000000000000; 	// halt
