# Compilação C- para código intermediário
# Arquivo: testes/so/kernel.txt
# Fim da execução.

********** Código intermediário **********

1: (function, carregarPrograma, _, _)
2: (get_param, inicioDisco, _, _)
3: (get_param, fimDisco, _, _)
4: (assign, QTD_PARTICOES, 32, _)
5: (assign, TAM_PARTICAO, 32, _)
6: (assign, index, inicioDisco, _)
7: (assign, i, index, _)
8: (param_list, 2, _, _)
9: (set_param, i, _, _)
10: (set_param, 0, _, _)
11: (call, addProgramStart, 2, t1)
12: (label, L1, _, _)
13: (less_than_equal_to, index, fimDisco, t2)
14: (jump_if_false, t2, L2, _)
15: (param_list, 1, _, _)
16: (set_param, index, _, _)
17: (call, ldk, 1, t3)
18: (assign, instrucao, t3, _)
19: (param_list, 2, _, _)
20: (set_param, instrucao, _, _)
21: (set_param, i, _, _)
22: (call, sim, 2, t4)
23: (addition, index, 1, t5)
24: (assign, index, t5, _)
25: (addition, i, 1, t6)
26: (assign, i, t6, _)
27: (goto, L1, _, _)
28: (label, L2, _, _)
29: (return, _, _, _)
30: (function, main, _, _)
31: (assign, MAIOR_ELEMENTO_INICIO, 400, _)
32: (assign, MAIOR_ELEMENTO_FIM, 475, _)
33: (param_list, 2, _, _)
34: (set_param, MAIOR_ELEMENTO_INICIO, _, _)
35: (set_param, MAIOR_ELEMENTO_FIM, _, _)
36: (call, carregarPrograma, 2, t8)
37: (param_list, 1, _, _)
38: (set_param, 0, _, _)
39: (call, readProgramStart, 1, t9)
40: (assign, programa, t9, _)
41: (param_list, 1, _, _)
42: (set_param, programa, _, _)
43: (call, exec, 1, t10)
44: (halt, _, _, _)

********** Código objeto **********

    0:	j	main

carregarPrograma:
    1:	addi	$sp, $sp, 12
    2:	sw	$a0, -9($sp)
    3:	sw	$a1, -8($sp)
    4:	li	$t0, 32
    5:	sw	$t0, -7($sp)
    6:	li	$t1, 32
    7:	sw	$t1, -6($sp)
    8:	lw	$s0, -9($sp)
    9:	sw	$s0, -5($sp)
    10:	lw	$s1, -5($sp)
    11:	sw	$s1, -3($sp)
    12:	lw	$s2, -3($sp)
    13:	mov	$a0, $s2
    14:	li	$a1, 0
    15:	sw	$a0, 0($rz)
.L1	
    16:	lw	$s3, -8($sp)
    17:	let	$t2, $s1, $s3
    18:	li	$t3, L2
    19:	add	$t3, $t3, $ms
    20:	jf	$t3, $t2
    21:	mov	$a0, $s1
    22:	ldk	$t4, $a0
    23:	sw	$t4, -1($sp)
    24:	lw	$s4, -1($sp)
    25:	mov	$a0, $s4
    26:	mov	$a1, $s2
    27:	sim	$a0, $a1
    28:	addi	$t5, $s1, 1
    29:	sw	$t5, -5($sp)
    30:	lw	$s1, -5($sp)
    31:	addi	$t6, $s2, 1
    32:	sw	$t6, -3($sp)
    33:	lw	$s2, -3($sp)
    34:	li	$t7, L1
    35:	add	$t7, $t7, $ms
    36:	jr	$t7
.L2	
    37:	jr	$ra

main:
    38:	addi	$sp, $sp, 35
    39:	li	$t0, 400
    40:	sw	$t0, -1($sp)
    41:	li	$t1, 475
    42:	sw	$t1, 0($sp)
    43:	lw	$s0, -1($sp)
    44:	mov	$a0, $s0
    45:	lw	$s1, 0($sp)
    46:	mov	$a1, $s1
    47:	sw	$s0, -1($sp)
    48:	sw	$s1, 0($sp)
    49:	li	$t2, carregarPrograma
    50:	add	$t2, $t2, $ms
    51:	jal	, $t2
    52:	mov	$s2, $v0
    53:	subi	$sp, $sp, 12
    54:	lw	$s0, -1($sp)
    55:	lw	$s1, 0($sp)
    56:	li	$a0, 0
    57:	la	$t3, 0($rz)
    58:	add	$t4, $a0, $t3
    59:	lw	$t4, 0($t4)
    60:	mov	$t5, $t4
    61:	sw	$t5, -2($sp)
    62:	lw	$s3, -2($sp)
    63:	mov	$a0, $s3
    64:	mov	$ms, $a0
    65:	jr	$a0
    66:	mov	$ms, $rz
    67:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000100110; 	// j
disk[1] <= 32'b000001_11110_11110_0000000000001100; 	// addi
disk[2] <= 32'b010010_11110_00110_1111111111110111; 	// sw
disk[3] <= 32'b010010_11110_00111_1111111111111000; 	// sw
disk[4] <= 32'b010000_00000_10100_0000000000100000; 	// li
disk[5] <= 32'b010010_11110_10100_1111111111111001; 	// sw
disk[6] <= 32'b010000_00000_10101_0000000000100000; 	// li
disk[7] <= 32'b010010_11110_10101_1111111111111010; 	// sw
disk[8] <= 32'b001111_11110_01010_1111111111110111; 	// lw
disk[9] <= 32'b010010_11110_01010_1111111111111011; 	// sw
disk[10] <= 32'b001111_11110_01011_1111111111111011; 	// lw
disk[11] <= 32'b010010_11110_01011_1111111111111101; 	// sw
disk[12] <= 32'b001111_11110_01100_1111111111111101; 	// lw
disk[13] <= 32'b001110_01100_00110_0000000000000000; 	// mov
disk[14] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[15] <= 32'b010010_00000_00110_0000000000000000; 	// sw
disk[16] <= 32'b001111_11110_01101_1111111111111000; 	// lw
disk[17] <= 32'b000000_01011_01101_10110_00000_001111; 	// let
disk[18] <= 32'b010000_00000_10111_0000000000100101; 	// li
disk[19] <= 32'b000000_10111_00010_10111_00000_000000; 	// add
disk[20] <= 32'b010101_10110_10111_0000000000000000; 	// jf
disk[21] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[22] <= 32'b011001_00110_11000_0000000000000000; 	// ldk
disk[23] <= 32'b010010_11110_11000_1111111111111111; 	// sw
disk[24] <= 32'b001111_11110_01110_1111111111111111; 	// lw
disk[25] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[26] <= 32'b001110_01100_00111_0000000000000000; 	// mov
disk[27] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[28] <= 32'b000001_01011_11001_0000000000000001; 	// addi
disk[29] <= 32'b010010_11110_11001_1111111111111011; 	// sw
disk[30] <= 32'b001111_11110_01011_1111111111111011; 	// lw
disk[31] <= 32'b000001_01100_11010_0000000000000001; 	// addi
disk[32] <= 32'b010010_11110_11010_1111111111111101; 	// sw
disk[33] <= 32'b001111_11110_01100_1111111111111101; 	// lw
disk[34] <= 32'b010000_00000_11011_0000000000010000; 	// li
disk[35] <= 32'b000000_11011_00010_11011_00000_000000; 	// add
disk[36] <= 32'b000000_11011_00000_00000_00000_010010; 	// jr
disk[37] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[38] <= 32'b000001_11110_11110_0000000000101100; 	// addi
disk[39] <= 32'b010000_00000_10100_0000000110010000; 	// li
disk[40] <= 32'b010010_11110_10100_1111111111111111; 	// sw
disk[41] <= 32'b010000_00000_10101_0000000111011011; 	// li
disk[42] <= 32'b010010_11110_10101_0000000000000000; 	// sw
disk[43] <= 32'b001111_11110_01010_1111111111111111; 	// lw
disk[44] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[45] <= 32'b001111_11110_01011_0000000000000000; 	// lw
disk[46] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[47] <= 32'b010010_11110_01010_1111111111111111; 	// sw
disk[48] <= 32'b010010_11110_01011_0000000000000000; 	// sw
disk[49] <= 32'b010000_00000_10110_0000000000000001; 	// li
disk[50] <= 32'b000000_10110_00010_10110_00000_000000; 	// add
disk[51] <= 32'b010111_10110_00000_0000000000000000; 	// jal
disk[52] <= 32'b001110_00001_01100_0000000000000000; 	// mov
disk[53] <= 32'b000010_11110_11110_0000000000001100; 	// subi
disk[54] <= 32'b001111_11110_01010_1111111111111111; 	// lw
disk[55] <= 32'b001111_11110_01011_0000000000000000; 	// lw
disk[56] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[57] <= 32'b010001_00000_10111_0000000000000000; 	// la
disk[58] <= 32'b000000_00110_10111_11000_00000_000000; 	// add
disk[59] <= 32'b001111_11000_11000_0000000000000000; 	// lw
disk[60] <= 32'b001110_11000_11001_0000000000000000; 	// mov
disk[61] <= 32'b010010_11110_11001_1111111111111110; 	// sw
disk[62] <= 32'b001111_11110_01101_1111111111111110; 	// lw
disk[63] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[64] <= 32'b001110_00110_00010_0000000000000000; 	// mov
disk[65] <= 32'b000000_00110_00000_00000_00000_010010; 	// jr
disk[66] <= 32'b001110_00000_00010_0000000000000000; 	// mov
disk[67] <= 32'b011000_00000000000000000000000000; 	// halt
