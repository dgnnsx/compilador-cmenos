# Compilação C- para código intermediário
# Arquivo: testes/so/kernel.txt
# Fim da execução.

********** Código intermediário **********

1: (function, limparDisplays, _, _)
2: (param_list, 2, _, _)
3: (set_param, 0, _, _)
4: (set_param, 0, _, _)
5: (call, output, 2, t1)
6: (param_list, 2, _, _)
7: (set_param, 0, _, _)
8: (set_param, 1, _, _)
9: (call, output, 2, t2)
10: (param_list, 2, _, _)
11: (set_param, 0, _, _)
12: (set_param, 2, _, _)
13: (call, output, 2, t3)
14: (return, _, _, _)
15: (function, carregarPrograma, _, _)
16: (get_param, beginOnDisk, _, _)
17: (get_param, particao, _, _)
18: (assign, SYSCALL, 36, _)
19: (assign, indexDisk, beginOnDisk, _)
20: (multiplication, TAMANHO_PARTICAO, particao, t4)
21: (assign, indexMemory, t4, _)
22: (param_list, 1, _, _)
23: (set_param, indexDisk, _, _)
24: (call, ldk, 1, t5)
25: (assign, instrucao, t5, _)
26: (label, L1, _, _)
27: (shift_right, instrucao, 26, t6)
28: (not_equal, t6, SYSCALL, t7)
29: (jump_if_false, t7, L2, _)
30: (param_list, 2, _, _)
31: (set_param, instrucao, _, _)
32: (set_param, indexMemory, _, _)
33: (call, sim, 2, t8)
34: (addition, indexDisk, 1, t9)
35: (assign, indexDisk, t9, _)
36: (param_list, 1, _, _)
37: (set_param, indexDisk, _, _)
38: (call, ldk, 1, t10)
39: (assign, instrucao, t10, _)
40: (addition, indexMemory, 1, t11)
41: (assign, indexMemory, t11, _)
42: (goto, L1, _, _)
43: (label, L2, _, _)
44: (param_list, 2, _, _)
45: (set_param, instrucao, _, _)
46: (set_param, indexMemory, _, _)
47: (call, sim, 2, t12)
48: (return, indexMemory, _, _)
49: (function, main, _, _)
50: (assign, TAMANHO_PARTICAO, 32, _)
51: (assign, MAIOR_ELEMENTO_INICIO, 128, _)
52: (assign, SORT_INICIO, 200, _)
53: (param_list, 0, _, _)
54: (call, input, 0, t13)
55: (assign, particao, t13, _)
56: (param_list, 2, _, _)
57: (set_param, MAIOR_ELEMENTO_INICIO, _, _)
58: (set_param, particao, _, _)
59: (call, carregarPrograma, 2, t14)
60: (assign, index, t14, _)
61: (param_list, 2, _, _)
62: (set_param, index, _, _)
63: (set_param, 0, _, _)
64: (call, output, 2, t15)
65: (param_list, 0, _, _)
66: (call, input, 0, t16)
67: (assign, particao, t16, _)
68: (param_list, 2, _, _)
69: (set_param, SORT_INICIO, _, _)
70: (set_param, particao, _, _)
71: (call, carregarPrograma, 2, t17)
72: (assign, index, t17, _)
73: (param_list, 2, _, _)
74: (set_param, index, _, _)
75: (set_param, 0, _, _)
76: (call, output, 2, t18)
77: (param_list, 0, _, _)
78: (call, input, 0, t19)
79: (assign, i, t19, _)
80: (param_list, 2, _, _)
81: (multiplication, TAMANHO_PARTICAO, i, t20)
82: (set_param, t20, _, _)
83: (set_param, 1, _, _)
84: (call, mmuLowerIM, 2, t21)
85: (equal, teste, 9999, t22)
86: (jump_if_false, t22, L3, _)
87: (param_list, 2, _, _)
88: (set_param, 42, _, _)
89: (set_param, 1, _, _)
90: (call, output, 2, t23)
91: (goto, L4, _, _)
92: (label, L3, _, _)
93: (param_list, 2, _, _)
94: (set_param, 77, _, _)
95: (set_param, 1, _, _)
96: (call, output, 2, t24)
97: (assign, teste, 9999, _)
98: (label, L4, _, _)
99: (param_list, 1, _, _)
100: (set_param, 0, _, _)
101: (call, exec, 1, t25)
102: (halt, _, _, _)

********** Código objeto **********

limparDisplays:
    0:	addi	$sp, $sp, 2
    1:	li	$a0, 0
    2:	li	$a1, 0
    3:	out	$a0, 0
    4:	li	$a0, 0
    5:	li	$a1, 1
    6:	out	$a0, 1
    7:	li	$a0, 0
    8:	li	$a1, 2
    9:	out	$a0, 2
    10:	jr	$ra

carregarPrograma:
    11:	addi	$sp, $sp, 8
    12:	sw	$a0, -5($sp)
    13:	sw	$a1, -4($sp)
    14:	li	$t0, 36
    15:	sw	$t0, 0($sp)
    16:	lw	$s0, -5($sp)
    17:	sw	$s0, -2($sp)
    18:	lw	$s1, 0($gp)
    19:	lw	$s2, -4($sp)
    20:	mul	$t1, $s1, $s2
    21:	sw	$t1, -1($sp)
    22:	lw	$s3, -2($sp)
    23:	mov	$a0, $s3
    24:	ldk	$t2, $a0
    25:	sw	$t2, -3($sp)
.L1	
    26:	lw	$s4, -3($sp)
    27:	srli	$t3, $s4, 26
    28:	lw	$s5, 0($sp)
    29:	ne	$t4, $t3, $s5
    30:	jf	$t4, L2
    31:	mov	$a0, $s4
    32:	lw	$s6, -1($sp)
    33:	mov	$a1, $s6
    34:	sim	$a0, $a1
    35:	addi	$t5, $s3, 1
    36:	sw	$t5, -2($sp)
    37:	lw	$s3, -2($sp)
    38:	mov	$a0, $s3
    39:	ldk	$t6, $a0
    40:	sw	$t6, -3($sp)
    41:	lw	$s4, -3($sp)
    42:	addi	$t7, $s6, 1
    43:	sw	$t7, -1($sp)
    44:	lw	$s6, -1($sp)
    45:	j	L1
.L2	
    46:	mov	$a0, $s4
    47:	mov	$a1, $s6
    48:	sim	$a0, $a1
    49:	mov	$v0, $s6
    50:	jr	$ra

main:
    51:	addi	$sp, $gp, 1
    52:	addi	$sp, $sp, 7
    53:	li	$t0, 32
    54:	sw	$t0, 0($gp)
    55:	li	$t1, 128
    56:	sw	$t1, -4($sp)
    57:	li	$t2, 200
    58:	sw	$t2, -3($sp)
    59:	in	$t3
    60:	sw	$t3, 0($sp)
    61:	lw	$s0, -4($sp)
    62:	mov	$a0, $s0
    63:	lw	$s1, 0($sp)
    64:	mov	$a1, $s1
    65:	sw	$s0, -4($sp)
    66:	sw	$s1, 0($sp)
    67:	jal	carregarPrograma
    68:	mov	$s2, $v0
    69:	subi	$sp, $sp, 8
    70:	lw	$s0, -4($sp)
    71:	lw	$s1, 0($sp)
    72:	sw	$s2, -5($sp)
    73:	lw	$s3, -5($sp)
    74:	mov	$a0, $s3
    75:	li	$a1, 0
    76:	out	$a0, 0
    77:	in	$t4
    78:	sw	$t4, 0($sp)
    79:	lw	$s1, 0($sp)
    80:	lw	$s4, -3($sp)
    81:	mov	$a0, $s4
    82:	mov	$a1, $s1
    83:	sw	$s0, -4($sp)
    84:	sw	$s1, 0($sp)
    85:	sw	$s2, -6($sp)
    86:	sw	$s3, -5($sp)
    87:	sw	$s4, -3($sp)
    88:	jal	carregarPrograma
    89:	mov	$s5, $v0
    90:	subi	$sp, $sp, 8
    91:	lw	$s0, -4($sp)
    92:	lw	$s1, 0($sp)
    93:	lw	$s2, -6($sp)
    94:	lw	$s3, -5($sp)
    95:	lw	$s4, -3($sp)
    96:	sw	$s5, -5($sp)
    97:	lw	$s3, -5($sp)
    98:	mov	$a0, $s3
    99:	li	$a1, 0
    100:	out	$a0, 0
    101:	in	$t5
    102:	sw	$t5, -1($sp)
    103:	lw	$s6, 0($gp)
    104:	lw	$s7, -1($sp)
    105:	mul	$t6, $s6, $s7
    106:	mov	$a0, $t6
    107:	li	$a1, 1
    108:	mmuLowerIM	$a0, $a1
    109:	lw	$s8, -2($sp)
    110:	li	$t8, 9999
    111:	eq	$t7, $s8, $t8
    112:	jf	$t7, L3
    113:	li	$a0, 42
    114:	li	$a1, 1
    115:	out	$a0, 1
    116:	j	L4
.L3	
    117:	li	$a0, 77
    118:	li	$a1, 1
    119:	out	$a0, 1
    120:	li	$t9, 9999
    121:	sw	$t9, -2($sp)
    122:	lw	$s8, -2($sp)
.L4	
    123:	li	$a0, 0
    124:	exec	$a0
    125:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000110100;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[2] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[3] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[4] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[5] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[6] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[7] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[8] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[9] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[10] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[11] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[12] <= 32'b000001_11110_11110_0000000000001000; 	// addi
disk[13] <= 32'b010010_11110_00110_1111111111111011; 	// sw
disk[14] <= 32'b010010_11110_00111_1111111111111100; 	// sw
disk[15] <= 32'b010000_00000_10100_0000000000100100; 	// li
disk[16] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[17] <= 32'b001111_11110_01010_1111111111111011; 	// lw
disk[18] <= 32'b010010_11110_01010_1111111111111110; 	// sw
disk[19] <= 32'b001111_00101_01011_0000000000000000; 	// lw
disk[20] <= 32'b001111_11110_01100_1111111111111100; 	// lw
disk[21] <= 32'b000000_01011_01100_10101_00000_000010; 	// mul
disk[22] <= 32'b010010_11110_10101_1111111111111111; 	// sw
disk[23] <= 32'b001111_11110_01101_1111111111111110; 	// lw
disk[24] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[25] <= 32'b011001_00110_10110_0000000000000000; 	// ldk
disk[26] <= 32'b010010_11110_10110_1111111111111101; 	// sw
disk[27] <= 32'b001111_11110_01110_1111111111111101; 	// lw
disk[28] <= 32'b001101_01110_10111_0000000000011010; 	// srli
disk[29] <= 32'b001111_11110_01111_0000000000000000; 	// lw
disk[30] <= 32'b000000_10111_01111_11000_00000_001101; 	// ne
disk[31] <= 32'b010101_11000_00000_0000000000101111; 	// jf
disk[32] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[33] <= 32'b001111_11110_10000_1111111111111111; 	// lw
disk[34] <= 32'b001110_10000_00111_0000000000000000; 	// mov
disk[35] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[36] <= 32'b000001_01101_11001_0000000000000001; 	// addi
disk[37] <= 32'b010010_11110_11001_1111111111111110; 	// sw
disk[38] <= 32'b001111_11110_01101_1111111111111110; 	// lw
disk[39] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[40] <= 32'b011001_00110_11010_0000000000000000; 	// ldk
disk[41] <= 32'b010010_11110_11010_1111111111111101; 	// sw
disk[42] <= 32'b001111_11110_01110_1111111111111101; 	// lw
disk[43] <= 32'b000001_10000_11011_0000000000000001; 	// addi
disk[44] <= 32'b010010_11110_11011_1111111111111111; 	// sw
disk[45] <= 32'b001111_11110_10000_1111111111111111; 	// lw
disk[46] <= 32'b010110_00000000000000000000011011; 	// j
disk[47] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[48] <= 32'b001110_10000_00111_0000000000000000; 	// mov
disk[49] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[50] <= 32'b001110_10000_00001_0000000000000000; 	// mov
disk[51] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[52] <= 32'b000001_00101_11110_0000000000000001; 	// addi
disk[53] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[54] <= 32'b010000_00000_10100_0000000000100000; 	// li
disk[55] <= 32'b010010_00101_10100_0000000000000000; 	// sw
disk[56] <= 32'b010000_00000_10101_0000000010000000; 	// li
disk[57] <= 32'b010010_11110_10101_1111111111111100; 	// sw
disk[58] <= 32'b010000_00000_10110_0000000011001000; 	// li
disk[59] <= 32'b010010_11110_10110_1111111111111101; 	// sw
disk[60] <= 32'b010011_00000_10111_0000000000000000; 	// in
disk[61] <= 32'b010010_11110_10111_0000000000000000; 	// sw
disk[62] <= 32'b001111_11110_01010_1111111111111100; 	// lw
disk[63] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[64] <= 32'b001111_11110_01011_0000000000000000; 	// lw
disk[65] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[66] <= 32'b010010_11110_01010_1111111111111100; 	// sw
disk[67] <= 32'b010010_11110_01011_0000000000000000; 	// sw
disk[68] <= 32'b010111_00000000000000000000001100; 	// jal
disk[69] <= 32'b001110_00001_01100_0000000000000000; 	// mov
disk[70] <= 32'b000010_11110_11110_0000000000001000; 	// subi
disk[71] <= 32'b001111_11110_01010_1111111111111100; 	// lw
disk[72] <= 32'b001111_11110_01011_0000000000000000; 	// lw
disk[73] <= 32'b010010_11110_01100_1111111111111011; 	// sw
disk[74] <= 32'b001111_11110_01101_1111111111111011; 	// lw
disk[75] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[76] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[77] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[78] <= 32'b010011_00000_11000_0000000000000000; 	// in
disk[79] <= 32'b010010_11110_11000_0000000000000000; 	// sw
disk[80] <= 32'b001111_11110_01011_0000000000000000; 	// lw
disk[81] <= 32'b001111_11110_01110_1111111111111101; 	// lw
disk[82] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[83] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[84] <= 32'b010010_11110_01010_1111111111111100; 	// sw
disk[85] <= 32'b010010_11110_01011_0000000000000000; 	// sw
disk[86] <= 32'b010010_11110_01100_1111111111111010; 	// sw
disk[87] <= 32'b010010_11110_01101_1111111111111011; 	// sw
disk[88] <= 32'b010010_11110_01110_1111111111111101; 	// sw
disk[89] <= 32'b010111_00000000000000000000001100; 	// jal
disk[90] <= 32'b001110_00001_01111_0000000000000000; 	// mov
disk[91] <= 32'b000010_11110_11110_0000000000001000; 	// subi
disk[92] <= 32'b001111_11110_01010_1111111111111100; 	// lw
disk[93] <= 32'b001111_11110_01011_0000000000000000; 	// lw
disk[94] <= 32'b001111_11110_01100_1111111111111010; 	// lw
disk[95] <= 32'b001111_11110_01101_1111111111111011; 	// lw
disk[96] <= 32'b001111_11110_01110_1111111111111101; 	// lw
disk[97] <= 32'b010010_11110_01111_1111111111111011; 	// sw
disk[98] <= 32'b001111_11110_01101_1111111111111011; 	// lw
disk[99] <= 32'b001110_01101_00110_0000000000000000; 	// mov
disk[100] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[101] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[102] <= 32'b010011_00000_11001_0000000000000000; 	// in
disk[103] <= 32'b010010_11110_11001_1111111111111111; 	// sw
disk[104] <= 32'b001111_00101_10000_0000000000000000; 	// lw
disk[105] <= 32'b001111_11110_10001_1111111111111111; 	// lw
disk[106] <= 32'b000000_10000_10001_11010_00000_000010; 	// mul
disk[107] <= 32'b001110_11010_00110_0000000000000000; 	// mov
disk[108] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[109] <= 32'b100000_00111_00110_0000000000000000; 	// mmuLowerIM
disk[110] <= 32'b001111_11110_10010_1111111111111110; 	// lw
disk[111] <= 32'b010000_00000_11100_0010011100001111; 	// li
disk[112] <= 32'b000000_10010_11100_11011_00000_001100; 	// eq
disk[113] <= 32'b010101_11011_00000_0000000001110110; 	// jf
disk[114] <= 32'b010000_00000_00110_0000000000101010; 	// li
disk[115] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[116] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[117] <= 32'b010110_00000000000000000001111100; 	// j
disk[118] <= 32'b010000_00000_00110_0000000001001101; 	// li
disk[119] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[120] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[121] <= 32'b010000_00000_11101_0010011100001111; 	// li
disk[122] <= 32'b010010_11110_11101_1111111111111110; 	// sw
disk[123] <= 32'b001111_11110_10010_1111111111111110; 	// lw
disk[124] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[125] <= 32'b000000_00110_00000_00000_00000_010011; 	// exec
disk[126] <= 32'b011000_00000000000000000000000000; 	// halt
