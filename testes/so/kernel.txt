# Compilação C- para código intermediário
# Arquivo: testes/so/kernel.txt
# Fim da execução.

********** Código intermediário **********

1: (function, limparDisplays, _, _)
2: (param_list, 2, _, _)
3: (set_param, 0, _, _)
4: (set_param, 0, _, _)
5: (call, output, 2, t1)
6: (param_list, 2, _, _)
7: (set_param, 0, _, _)
8: (set_param, 1, _, _)
9: (call, output, 2, t2)
10: (param_list, 2, _, _)
11: (set_param, 0, _, _)
12: (set_param, 2, _, _)
13: (call, output, 2, t3)
14: (return, _, _, _)
15: (function, carregarPrograma, _, _)
16: (get_param, beginOnDisk, _, _)
17: (assign, SYSCALL, 36, _)
18: (assign, index, beginOnDisk, _)
19: (param_list, 1, _, _)
20: (set_param, index, _, _)
21: (call, ldk, 1, t4)
22: (assign, instrucao, t4, _)
23: (label, L1, _, _)
24: (shift_right, instrucao, 26, t5)
25: (not_equal, t5, SYSCALL, t6)
26: (jump_if_false, t6, L2, _)
27: (param_list, 2, _, _)
28: (set_param, instrucao, _, _)
29: (set_param, index, _, _)
30: (call, sim, 2, t7)
31: (addition, index, 1, t8)
32: (assign, index, t8, _)
33: (param_list, 1, _, _)
34: (set_param, index, _, _)
35: (call, ldk, 1, t9)
36: (assign, instrucao, t9, _)
37: (goto, L1, _, _)
38: (label, L2, _, _)
39: (param_list, 2, _, _)
40: (set_param, instrucao, _, _)
41: (set_param, index, _, _)
42: (call, sim, 2, t10)
43: (return, index, _, _)
44: (function, main, _, _)
45: (assign, MAIOR_ELEMENTO_INICIO, 99, _)
46: (assign, SORT_INICIO, 188, _)
47: (param_list, 1, _, _)
48: (set_param, MAIOR_ELEMENTO_INICIO, _, _)
49: (call, carregarPrograma, 1, t11)
50: (assign, index, t11, _)
51: (param_list, 1, _, _)
52: (set_param, SORT_INICIO, _, _)
53: (call, carregarPrograma, 1, t12)
54: (assign, index, t12, _)
55: (param_list, 0, _, _)
56: (call, input, 0, t13)
57: (assign, i, t13, _)
58: (param_list, 2, _, _)
59: (set_param, i, _, _)
60: (set_param, 1, _, _)
61: (call, mmuLowerIM, 2, t14)
62: (equal, teste, 9999, t15)
63: (jump_if_false, t15, L3, _)
64: (param_list, 2, _, _)
65: (set_param, 42, _, _)
66: (set_param, 0, _, _)
67: (call, output, 2, t16)
68: (goto, L4, _, _)
69: (label, L3, _, _)
70: (param_list, 2, _, _)
71: (set_param, 77, _, _)
72: (set_param, 0, _, _)
73: (call, output, 2, t17)
74: (assign, teste, 9999, _)
75: (label, L4, _, _)
76: (param_list, 1, _, _)
77: (set_param, 0, _, _)
78: (call, exec, 1, t18)
79: (halt, _, _, _)

********** Código objeto **********

limparDisplays:
    0:	addi	$sp, $sp, 2
    1:	li	$a0, 0
    2:	li	$a1, 0
    3:	out	$a0, 0
    4:	li	$a0, 0
    5:	li	$a1, 1
    6:	out	$a0, 1
    7:	li	$a0, 0
    8:	li	$a1, 2
    9:	out	$a0, 2
    10:	jr	$ra

carregarPrograma:
    11:	addi	$sp, $sp, 6
    12:	sw	$a0, -3($sp)
    13:	li	$t0, 36
    14:	sw	$t0, 0($sp)
    15:	lw	$s0, -3($sp)
    16:	sw	$s0, -1($sp)
    17:	lw	$s1, -1($sp)
    18:	mov	$a0, $s1
    19:	ldk	$t1, $a0
    20:	sw	$t1, -2($sp)
.L1	
    21:	lw	$s2, -2($sp)
    22:	srli	$t2, $s2, 26
    23:	lw	$s3, 0($sp)
    24:	ne	$t3, $t2, $s3
    25:	jf	$t3, L2
    26:	mov	$a0, $s2
    27:	mov	$a1, $s1
    28:	sim	$a0, $a1
    29:	addi	$t4, $s1, 1
    30:	sw	$t4, -1($sp)
    31:	lw	$s1, -1($sp)
    32:	mov	$a0, $s1
    33:	ldk	$t5, $a0
    34:	sw	$t5, -2($sp)
    35:	lw	$s2, -2($sp)
    36:	j	L1
.L2	
    37:	mov	$a0, $s2
    38:	mov	$a1, $s1
    39:	sim	$a0, $a1
    40:	mov	$v0, $s1
    41:	jr	$ra

main:
    42:	addi	$sp, $sp, 5
    43:	li	$t0, 99
    44:	sw	$t0, -3($sp)
    45:	li	$t1, 188
    46:	sw	$t1, -2($sp)
    47:	lw	$s0, -3($sp)
    48:	mov	$a0, $s0
    49:	sw	$s0, -3($sp)
    50:	jal	carregarPrograma
    51:	mov	$s1, $v0
    52:	subi	$sp, $sp, 6
    53:	lw	$s0, -3($sp)
    54:	sw	$s1, -4($sp)
    55:	lw	$s2, -2($sp)
    56:	mov	$a0, $s2
    57:	sw	$s0, -3($sp)
    58:	sw	$s1, -4($sp)
    59:	sw	$s2, -2($sp)
    60:	jal	carregarPrograma
    61:	mov	$s3, $v0
    62:	subi	$sp, $sp, 6
    63:	lw	$s0, -3($sp)
    64:	lw	$s1, -4($sp)
    65:	lw	$s2, -2($sp)
    66:	sw	$s3, -4($sp)
    67:	in	$t2
    68:	sw	$t2, 0($sp)
    69:	lw	$s4, 0($sp)
    70:	mov	$a0, $s4
    71:	li	$a1, 1
    72:	mmuLowerIM	$a0, $a1
    73:	lw	$s5, -1($sp)
    74:	li	$t4, 9999
    75:	eq	$t3, $s5, $t4
    76:	jf	$t3, L3
    77:	li	$a0, 42
    78:	li	$a1, 0
    79:	out	$a0, 0
    80:	j	L4
.L3	
    81:	li	$a0, 77
    82:	li	$a1, 0
    83:	out	$a0, 0
    84:	li	$t5, 9999
    85:	sw	$t5, -1($sp)
    86:	lw	$s5, -1($sp)
.L4	
    87:	li	$a0, 0
    88:	exec	$a0
    89:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000101011;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[2] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[3] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[4] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[5] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[6] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[7] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[8] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[9] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[10] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[11] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[12] <= 32'b000001_11110_11110_0000000000000110; 	// addi
disk[13] <= 32'b010010_11110_00110_1111111111111101; 	// sw
disk[14] <= 32'b010000_00000_10100_0000000000100100; 	// li
disk[15] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[16] <= 32'b001111_11110_01010_1111111111111101; 	// lw
disk[17] <= 32'b010010_11110_01010_1111111111111111; 	// sw
disk[18] <= 32'b001111_11110_01011_1111111111111111; 	// lw
disk[19] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[20] <= 32'b011001_00110_10101_0000000000000000; 	// ldk
disk[21] <= 32'b010010_11110_10101_1111111111111110; 	// sw
disk[22] <= 32'b001111_11110_01100_1111111111111110; 	// lw
disk[23] <= 32'b001101_01100_10110_0000000000011010; 	// srli
disk[24] <= 32'b001111_11110_01101_0000000000000000; 	// lw
disk[25] <= 32'b000000_10110_01101_10111_00000_001101; 	// ne
disk[26] <= 32'b010101_10111_00000_0000000000100110; 	// jf
disk[27] <= 32'b001110_01100_00110_0000000000000000; 	// mov
disk[28] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[29] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[30] <= 32'b000001_01011_11000_0000000000000001; 	// addi
disk[31] <= 32'b010010_11110_11000_1111111111111111; 	// sw
disk[32] <= 32'b001111_11110_01011_1111111111111111; 	// lw
disk[33] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[34] <= 32'b011001_00110_11001_0000000000000000; 	// ldk
disk[35] <= 32'b010010_11110_11001_1111111111111110; 	// sw
disk[36] <= 32'b001111_11110_01100_1111111111111110; 	// lw
disk[37] <= 32'b010110_00000000000000000000010110; 	// j
disk[38] <= 32'b001110_01100_00110_0000000000000000; 	// mov
disk[39] <= 32'b001110_01011_00111_0000000000000000; 	// mov
disk[40] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[41] <= 32'b001110_01011_00001_0000000000000000; 	// mov
disk[42] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[43] <= 32'b000001_11110_11110_0000000000000101; 	// addi
disk[44] <= 32'b010000_00000_10100_0000000001100011; 	// li
disk[45] <= 32'b010010_11110_10100_1111111111111101; 	// sw
disk[46] <= 32'b010000_00000_10101_0000000010111100; 	// li
disk[47] <= 32'b010010_11110_10101_1111111111111110; 	// sw
disk[48] <= 32'b001111_11110_01010_1111111111111101; 	// lw
disk[49] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[50] <= 32'b010010_11110_01010_1111111111111101; 	// sw
disk[51] <= 32'b010111_00000000000000000000001100; 	// jal
disk[52] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[53] <= 32'b000010_11110_11110_0000000000000110; 	// subi
disk[54] <= 32'b001111_11110_01010_1111111111111101; 	// lw
disk[55] <= 32'b010010_11110_01011_1111111111111100; 	// sw
disk[56] <= 32'b001111_11110_01100_1111111111111110; 	// lw
disk[57] <= 32'b001110_01100_00110_0000000000000000; 	// mov
disk[58] <= 32'b010010_11110_01010_1111111111111101; 	// sw
disk[59] <= 32'b010010_11110_01011_1111111111111100; 	// sw
disk[60] <= 32'b010010_11110_01100_1111111111111110; 	// sw
disk[61] <= 32'b010111_00000000000000000000001100; 	// jal
disk[62] <= 32'b001110_00001_01101_0000000000000000; 	// mov
disk[63] <= 32'b000010_11110_11110_0000000000000110; 	// subi
disk[64] <= 32'b001111_11110_01010_1111111111111101; 	// lw
disk[65] <= 32'b001111_11110_01011_1111111111111100; 	// lw
disk[66] <= 32'b001111_11110_01100_1111111111111110; 	// lw
disk[67] <= 32'b010010_11110_01101_1111111111111100; 	// sw
disk[68] <= 32'b010011_00000_10110_0000000000000000; 	// in
disk[69] <= 32'b010010_11110_10110_0000000000000000; 	// sw
disk[70] <= 32'b001111_11110_01110_0000000000000000; 	// lw
disk[71] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[72] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[73] <= 32'b100000_00111_00110_0000000000000000; 	// mmuLowerIM
disk[74] <= 32'b001111_11110_01111_1111111111111111; 	// lw
disk[75] <= 32'b010000_00000_11000_0010011100001111; 	// li
disk[76] <= 32'b000000_01111_11000_10111_00000_001100; 	// eq
disk[77] <= 32'b010101_10111_00000_0000000001010010; 	// jf
disk[78] <= 32'b010000_00000_00110_0000000000101010; 	// li
disk[79] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[80] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[81] <= 32'b010110_00000000000000000001011000; 	// j
disk[82] <= 32'b010000_00000_00110_0000000001001101; 	// li
disk[83] <= 32'b010000_00000_00111_0000000000000000; 	// li
disk[84] <= 32'b010100_00000_00110_0000000000000000; 	// out
disk[85] <= 32'b010000_00000_11001_0010011100001111; 	// li
disk[86] <= 32'b010010_11110_11001_1111111111111111; 	// sw
disk[87] <= 32'b001111_11110_01111_1111111111111111; 	// lw
disk[88] <= 32'b010000_00000_00110_0000000000000000; 	// li
disk[89] <= 32'b000000_00110_00000_00000_00000_010011; 	// exec
disk[90] <= 32'b011000_00000000000000000000000000; 	// halt
