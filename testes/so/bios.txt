# Compilação C- para código intermediário
# Arquivo: testes/so/bios.txt
# Fim da execução.

********** Código intermediário **********

1: (function, checarComponentes, _, _)
2: (param_list, 0, _, _)
3: (call, checkHD, 0, t1)
4: (param_list, 0, _, _)
5: (call, checkIM, 0, t2)
6: (param_list, 0, _, _)
7: (call, checkDM, 0, t3)
8: (return, _, _, _)
9: (function, carregarSistemaOperacional, _, _)
10: (assign, HALT, 24, _)
11: (assign, index, 0, _)
12: (param_list, 1, _, _)
13: (set_param, index, _, _)
14: (call, ldk, 1, t4)
15: (assign, instrucao, t4, _)
16: (label, L1, _, _)
17: (shift_right, instrucao, 26, t5)
18: (not_equal, t5, HALT, t6)
19: (jump_if_false, t6, L2, _)
20: (param_list, 2, _, _)
21: (set_param, instrucao, _, _)
22: (set_param, index, _, _)
23: (call, sim, 2, t7)
24: (addition, index, 1, t8)
25: (assign, index, t8, _)
26: (param_list, 1, _, _)
27: (set_param, index, _, _)
28: (call, ldk, 1, t9)
29: (assign, instrucao, t9, _)
30: (goto, L1, _, _)
31: (label, L2, _, _)
32: (param_list, 2, _, _)
33: (set_param, instrucao, _, _)
34: (set_param, index, _, _)
35: (call, sim, 2, t10)
36: (return, index, _, _)
37: (function, main, _, _)
38: (param_list, 0, _, _)
39: (call, carregarSistemaOperacional, 0, t11)
40: (assign, index, t11, _)
41: (assign, lower, 0, _)
42: (assign, upper, index, _)
43: (param_list, 3, _, _)
44: (set_param, lower, _, _)
45: (set_param, upper, _, _)
46: (set_param, 0, _, _)
47: (call, mmu, 3, t12)
48: (halt, _, _, _)

********** Código objeto **********

checarComponentes:
    0:	addi	$sp, $sp, 2
    1:	ckhd	
    2:	ckim	
    3:	ckdm	
    4:	jr	$ra

carregarSistemaOperacional:
    5:	addi	$sp, $sp, 5
    6:	li	$t0, 24
    7:	sw	$t0, 0($sp)
    8:	li	$t1, 0
    9:	sw	$t1, -1($sp)
    10:	lw	$s0, -1($sp)
    11:	mov	$a0, $s0
    12:	ldk	$t2, $a0
    13:	sw	$t2, -2($sp)
.L1	
    14:	lw	$s1, -2($sp)
    15:	srli	$t3, $s1, 26
    16:	lw	$s2, 0($sp)
    17:	ne	$t4, $t3, $s2
    18:	jf	$t4, L2
    19:	mov	$a0, $s1
    20:	mov	$a1, $s0
    21:	sim	$a0, $a1
    22:	addi	$t5, $s0, 1
    23:	sw	$t5, -1($sp)
    24:	lw	$s0, -1($sp)
    25:	mov	$a0, $s0
    26:	ldk	$t6, $a0
    27:	sw	$t6, -2($sp)
    28:	lw	$s1, -2($sp)
    29:	j	L1
.L2	
    30:	mov	$a0, $s1
    31:	mov	$a1, $s0
    32:	sim	$a0, $a1
    33:	mov	$v0, $s0
    34:	jr	$ra

main:
    35:	addi	$sp, $sp, 3
    36:	jal	carregarSistemaOperacional
    37:	mov	$s0, $v0
    38:	subi	$sp, $sp, 5
    39:	sw	$s0, 0($sp)
    40:	li	$t0, 0
    41:	sw	$t0, -2($sp)
    42:	lw	$s1, 0($sp)
    43:	sw	$s1, -1($sp)
    44:	lw	$s2, -2($sp)
    45:	mov	$a0, $s2
    46:	lw	$s3, -1($sp)
    47:	mov	$a1, $s3
    48:	li	$a2, 0
    49:	mmu	$a1, $a0, 0
    50:	halt	

********** Código binário **********

assign bios[0] = 32'b010110_00000000000000000000100100;		// Jump to Main
assign bios[1] = 32'b000001_11110_11110_0000000000000010; 	// addi
assign bios[2] = 32'b011101_00000000000000000000000000; 	// ckhd
assign bios[3] = 32'b011110_00000000000000000000000000; 	// ckim
assign bios[4] = 32'b011111_00000000000000000000000000; 	// ckdm
assign bios[5] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign bios[6] = 32'b000001_11110_11110_0000000000000101; 	// addi
assign bios[7] = 32'b010000_00000_10100_0000000000011000; 	// li
assign bios[8] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign bios[9] = 32'b010000_00000_10101_0000000000000000; 	// li
assign bios[10] = 32'b010010_11110_10101_1111111111111111; 	// sw
assign bios[11] = 32'b001111_11110_01010_1111111111111111; 	// lw
assign bios[12] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign bios[13] = 32'b011001_00110_10110_0000000000000000; 	// ldk
assign bios[14] = 32'b010010_11110_10110_1111111111111110; 	// sw
assign bios[15] = 32'b001111_11110_01011_1111111111111110; 	// lw
assign bios[16] = 32'b001101_01011_10111_0000000000011010; 	// srli
assign bios[17] = 32'b001111_11110_01100_0000000000000000; 	// lw
assign bios[18] = 32'b000000_10111_01100_11000_00000_001101; 	// ne
assign bios[19] = 32'b010101_11000_00000_0000000000011111; 	// jf
assign bios[20] = 32'b001110_01011_00110_0000000000000000; 	// mov
assign bios[21] = 32'b001110_01010_00111_0000000000000000; 	// mov
assign bios[22] = 32'b011100_00111_00110_0000000000000000; 	// sim
assign bios[23] = 32'b000001_01010_11001_0000000000000001; 	// addi
assign bios[24] = 32'b010010_11110_11001_1111111111111111; 	// sw
assign bios[25] = 32'b001111_11110_01010_1111111111111111; 	// lw
assign bios[26] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign bios[27] = 32'b011001_00110_11010_0000000000000000; 	// ldk
assign bios[28] = 32'b010010_11110_11010_1111111111111110; 	// sw
assign bios[29] = 32'b001111_11110_01011_1111111111111110; 	// lw
assign bios[30] = 32'b010110_00000000000000000000001111; 	// j
assign bios[31] = 32'b001110_01011_00110_0000000000000000; 	// mov
assign bios[32] = 32'b001110_01010_00111_0000000000000000; 	// mov
assign bios[33] = 32'b011100_00111_00110_0000000000000000; 	// sim
assign bios[34] = 32'b001110_01010_00001_0000000000000000; 	// mov
assign bios[35] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign bios[36] = 32'b000001_11110_11110_0000000000000011; 	// addi
assign bios[37] = 32'b010111_00000000000000000000000110; 	// jal
assign bios[38] = 32'b001110_00001_01010_0000000000000000; 	// mov
assign bios[39] = 32'b000010_11110_11110_0000000000000101; 	// subi
assign bios[40] = 32'b010010_11110_01010_0000000000000000; 	// sw
assign bios[41] = 32'b010000_00000_10100_0000000000000000; 	// li
assign bios[42] = 32'b010010_11110_10100_1111111111111110; 	// sw
assign bios[43] = 32'b001111_11110_01011_0000000000000000; 	// lw
assign bios[44] = 32'b010010_11110_01011_1111111111111111; 	// sw
assign bios[45] = 32'b001111_11110_01100_1111111111111110; 	// lw
assign bios[46] = 32'b001110_01100_00110_0000000000000000; 	// mov
assign bios[47] = 32'b001111_11110_01101_1111111111111111; 	// lw
assign bios[48] = 32'b001110_01101_00111_0000000000000000; 	// mov
assign bios[49] = 32'b010000_00000_01000_0000000000000000; 	// li
assign bios[50] = 32'b100000_00110_00111_0000000000000000; 	// mmu
assign bios[51] = 32'b011000_00000000000000000000000000; 	// halt
