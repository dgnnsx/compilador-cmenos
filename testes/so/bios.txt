# Compilação C- para código intermediário
# Arquivo: testes/so/bios.txt
# Fim da execução.

********** Código intermediário **********

1: (function, main, _, _)
2: (param_list, 0, _, _)
3: (call, checkHD, 0, t1)
4: (param_list, 0, _, _)
5: (call, checkIM, 0, t2)
6: (param_list, 0, _, _)
7: (call, checkDM, 0, t3)
8: (assign, i, 0, _)
9: (label, L1, _, _)
10: (less_than, i, 500, t4)
11: (jump_if_false, t4, L2, _)
12: (param_list, 2, _, _)
13: (param_list, 1, _, _)
14: (set_param, i, _, _)
15: (call, ldk, 1, t5)
16: (set_param, t5, _, _)
17: (set_param, i, _, _)
18: (call, sim, 2, t6)
19: (addition, i, 1, t7)
20: (assign, i, t7, _)
21: (goto, L1, _, _)
22: (label, L2, _, _)
23: (assign, i, 0, _)
24: (halt, _, _, _)

********** Código objeto **********

main:
    0:	addi	$sp, $sp, 1
    1:	ckhd	
    2:	ckim	
    3:	ckdm	
    4:	li	$t0, 0
    5:	sw	$t0, 0($sp)
.L1	
    6:	lw	$s0, 0($sp)
    7:	li	$t2, 500
    8:	lt	$t1, $s0, $t2
    9:	jf	$t1, L2
    10:	mov	$a0, $s0
    11:	ldk	$t3, $a0
    12:	mov	$a0, $t3
    13:	mov	$a1, $s0
    14:	sim	$a0, $a1
    15:	addi	$t4, $s0, 1
    16:	sw	$t4, 0($sp)
    17:	j	L1
.L2	
    18:	li	$t5, 0
    19:	sw	$t5, 0($sp)
    20:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000000001;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[2] <= 32'b011101_00000000000000000000000000; 	// ckhd
disk[3] <= 32'b011110_00000000000000000000000000; 	// ckim
disk[4] <= 32'b011111_00000000000000000000000000; 	// ckdm
disk[5] <= 32'b010000_00000_10100_0000000000000000; 	// li
disk[6] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[7] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[8] <= 32'b010000_00000_10110_0000000111110100; 	// li
disk[9] <= 32'b000000_01010_10110_10101_00000_001110; 	// lt
disk[10] <= 32'b010101_10101_00000_0000000000010011; 	// jf
disk[11] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[12] <= 32'b011001_00110_10111_0000000000000000; 	// ldk
disk[13] <= 32'b001110_10111_00110_0000000000000000; 	// mov
disk[14] <= 32'b001110_01010_00111_0000000000000000; 	// mov
disk[15] <= 32'b011100_00111_00110_0000000000000000; 	// sim
disk[16] <= 32'b000001_01010_11000_0000000000000001; 	// addi
disk[17] <= 32'b010010_11110_11000_0000000000000000; 	// sw
disk[18] <= 32'b010110_00000000000000000000000111; 	// j
disk[19] <= 32'b010000_00000_11001_0000000000000000; 	// li
disk[20] <= 32'b010010_11110_11001_0000000000000000; 	// sw
disk[21] <= 32'b011000_00000000000000000000000000; 	// halt
