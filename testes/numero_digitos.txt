# Compilação C- para código intermediário
# Arquivo: testes/numero_digitos.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # n
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # count
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # count
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # n
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # n
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: !=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # n
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 10
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: /
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # n
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # count
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # count
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> function call
                # output
                # -> function call: arguments
                    # -> identifier
                    # count
                    # <- identifier
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, main, _, _)
2: (assign, count, 0, _)
3: (param_list, 0, _, _)
4: (call, input, 0, t1)
5: (assign, n, t1, _)
6: (label, L1, _, _)
7: (not_equal, n, 0, t2)
8: (jump_if_false, t2, L2, _)
9: (division, n, 10, t3)
10: (assign, n, t3, _)
11: (addition, count, 1, t4)
12: (assign, count, t4, _)
13: (goto, L1, _, _)
14: (label, L2, _, _)
15: (param_list, 2, _, _)
16: (set_param, count, _, _)
17: (set_param, 2, _, _)
18: (call, output, 2, t5)
19: (halt, _, _, _)

********** Código objeto **********

main:
    0:	addi	$sp, $sp, 1
    1:	li	$t0, 0
    2:	sw	$t0, 0($sp)
    3:	in	$t1
    4:	sw	$t1, -1($sp)
.L1	
    5:	lw	$s0, -1($sp)
    6:	li	$t2, 0
    7:	bne	$s0, $t2, L2
    8:	divi	$t3, $s0, 10
    9:	sw	$t3, -1($sp)
    10:	lw	$s1, 0($sp)
    11:	addi	$t4, $s1, 1
    12:	sw	$t4, 0($sp)
    13:	j	L1
.L2	
    14:	lw	$s2, 0($sp)
    15:	mov	$a0, $s2
    16:	li	$a1, 2
    17:	out	$a0, 2
    18:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011111_00000000000000000000000001; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000001; 	// addi
memoria_instrucoes[2] = 32'b010110_00000_10101_0000000000000000; 	// li
memoria_instrucoes[3] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[4] = 32'b100010_00000_10110_0000000000000000; 	// in
memoria_instrucoes[5] = 32'b011000_00011_10110_1111111111111111; 	// sw
memoria_instrucoes[6] = 32'b010101_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[7] = 32'b010110_00000_10111_0000000000000000; 	// li
memoria_instrucoes[8] = 32'b011010_01011_10111_0000000000001111; 	// bne
memoria_instrucoes[9] = 32'b001000_01011_11000_0000000000001010; 	// divi
memoria_instrucoes[10] = 32'b011000_00011_11000_1111111111111111; 	// sw
memoria_instrucoes[11] = 32'b010101_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[12] = 32'b000010_01100_11001_0000000000000001; 	// addi
memoria_instrucoes[13] = 32'b011000_00011_11001_0000000000000000; 	// sw
memoria_instrucoes[14] = 32'b011111_00000000000000000000000110; 	// j
memoria_instrucoes[15] = 32'b010101_00011_01101_0000000000000000; 	// lw
memoria_instrucoes[16] = 32'b010100_01101_00111_0000000000000000; 	// mov
memoria_instrucoes[17] = 32'b010110_00000_01000_0000000000000010; 	// li
memoria_instrucoes[18] = 32'b100011_00000_00111_0000000000000010; 	// out
memoria_instrucoes[19] = 32'b111111_00000000000000000000000000; 	// halt
