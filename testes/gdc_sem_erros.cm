# Compilação C- para código intermediário
# Arquivo: testes/gdc_sem_erros.cm
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> identifier
        # globalVar
        # <- identifier
    # <- type int

    # -> type int
        # -> function declaration
        # gdc
                # -> type int
                    # -> vector
                    # w
                    # -> vector: position
                        # -> constant
                        # 60
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> vector
                    # z
                    # -> vector: position
                        # -> constant
                        # 60
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> vector
                        # vetor
                        # -> vector: position
                            # -> constant
                            # 1
                            # <- constant
                        # <- vector: position
                        # <- vector
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # u
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> function call
                        # gdc
                        # -> function call: arguments
                            # -> identifier
                            # v
                            # <- identifier
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # u
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> identifier
                                        # v
                                        # <- identifier
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: /
                                    # <- Operator
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # v
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # arithmetic operator: *
                                # <- Operator
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # y
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # u
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 10
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> identifier
                    # teste
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 5
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 3
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # teste
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 49
                        # <- constant
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # teste
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # y
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # gdc
                    # -> function call: arguments
                        # -> identifier
                        # v
                        # <- identifier
                        # -> identifier
                        # y
                        # <- identifier
                        # -> constant
                        # 10
                        # <- constant
                    # <- function call: arguments
                    # <- function call
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # u
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 1
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 10
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: right argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> vector
                            # v
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, gdc, _, _)
2: (get_param, u, _, _)
3: (get_param, v, _, _)
4: (get_param, vetor, _, _)
5: (vector_value, vetor, 1, t3)
6: (equal, t3, 0, t4)
7: (jump_if_false, t4, L1, _)
8: (return, u, _, _)
9: (label, L1, _, _)
10: (param_list, 2, _, _)
11: (set_param, v, _, _)
12: (division, u, v, t5)
13: (multiplication, t5, v, t6)
14: (subtraction, u, t6, t7)
15: (set_param, t7, _, _)
16: (call, gdc, 2, t8)
17: (return, t8, _, _)
18: (function, main, _, _)
19: (vector_address, v, 3, t10)
20: (assign, v, 5, 3)
21: (addition, teste, 49, t11)
22: (assign, teste, t11, _)
23: (param_list, 0, _, _)
24: (call, input, 0, t12)
25: (assign, x, t12, _)
26: (param_list, 0, _, _)
27: (call, input, 0, t13)
28: (assign, y, t13, _)
29: (param_list, 1, _, _)
30: (param_list, 3, _, _)
31: (set_param, v, _, _)
32: (set_param, y, _, _)
33: (set_param, 10, _, _)
34: (call, gdc, 3, t14)
35: (set_param, t14, _, _)
36: (call, output, 1, t15)
37: (assign, u, 0, _)
38: (assign, x, 1, _)
39: (label, L2, _, _)
40: (less_than_equal_to, x, 10, t16)
41: (jump_if_false, t16, L3, _)
42: (vector_address, v, i, t17)
43: (assign, t17, u, _)
44: (goto, L2, _, _)
45: (label, L3, _, _)
46: (return, _, _, _)
47: (halt, _, _, _)

********** Código objeto **********

gdc:
    0:	lw	$t0, 1($a2)
    1:	li	$t1, 0
    2:	beq	$t0, $t1, L1
    3:	mov	$v0, $a0
    4:	jr	$ra
.L1	
    5:	mov	$a0, $a1
    6:	lw	$s0, -122($sp)
    7:	div	$t2, $s0, $a0
    8:	mul	$t3, $t2, $a0
    9:	sub	$t4, $s0, $t3
    10:	mov	$a1, $t4
    11:	sw	$ra, 1($sp)
    12:	addi	$sp, $sp, 124
    13:	jal	gdc
    14:	subi	$sp, $sp, 124
    15:	lw	$ra, 1($sp)
    16:	mov	$t5, $v0
    17:	mov	$v0, $t5
    18:	jr	$ra

main:
    19:	la	$s0, -10($sp)
    20:	li	$t0, 5
    21:	sw	$t0, 3($s0)
    22:	lw	$s1, 0($sp)
    23:	addi	$t1, $s1, 49
    24:	sw	$t1, 0($sp)
    25:	in	$t2
    26:	sw	$t2, -14($sp)
    27:	in	$t3
    28:	sw	$t3, -13($sp)
    29:	la	$a2, -10($sp)
    30:	lw	$s2, -13($sp)
    31:	mov	$a1, $s2
    32:	li	$a2, 10
    33:	addi	$sp, $sp, 123
    34:	jal	gdc
    35:	mov	$t4, $v0
    36:	subi	$sp, $sp, 123
    37:	mov	$a0, $t4
    38:	out	$out
    39:	li	$t5, 0
    40:	sw	$t5, -12($sp)
    41:	li	$t6, 1
    42:	sw	$t6, -14($sp)
.L2	
    43:	lw	$s3, -14($sp)
    44:	li	$t7, 10
    45:	blet	$s3, $t7, L3
    46:	lw	$s4, -11($sp)
    47:	add	$t8, $s0, $s4
    48:	lw	$s5, -12($sp)
    49:	sw	$s5, 0($t8)
    50:	j	L2
.L3	
    51:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b010011_01001_10101_0000000000000001;	// lw
memoria_instrucoes[1] = 32'b010100_00000_10110_0000000000000000;	// li
memoria_instrucoes[2] = 32'b010111_10110_10101_0000000000110100;	// beq
memoria_instrucoes[3] = 32'b010010_00111_00001_0000000000000000;	// mov
memoria_instrucoes[4] = 32'b011111_00000000000000000000011111;	// jr
memoria_instrucoes[5] = 32'b010010_01000_00111_0000000000000000;	// mov
memoria_instrucoes[6] = 32'b010011_00011_01011_1111111110000110;	// lw
memoria_instrucoes[7] = 32'b000111_01011_00111_10111_00000000000;	// div
memoria_instrucoes[8] = 32'b000101_10111_00111_11000_00000000000;	// mul
memoria_instrucoes[9] = 32'b000011_01011_11000_11001_00000000000;	// sub
memoria_instrucoes[10] = 32'b010010_11001_01000_0000000000000000;	// mov
memoria_instrucoes[11] = 32'b010110_00011_11111_0000000000000001;	// sw
memoria_instrucoes[12] = 32'b000010_00011_00011_0000000001111100;	// addi
memoria_instrucoes[13] = 32'b011110_00000000000000000000110100;	// jal
memoria_instrucoes[14] = 32'b000100_00011_00011_0000000001111100;	// subi
memoria_instrucoes[15] = 32'b010011_00011_11111_0000000000000001;	// lw
memoria_instrucoes[16] = 32'b010010_00001_11010_0000000000000000;	// mov
memoria_instrucoes[17] = 32'b010010_11010_00001_0000000000000000;	// mov
memoria_instrucoes[18] = 32'b011111_00000000000000000000011111;	// jr
memoria_instrucoes[19] = 32'b010101_00011_01011_1111111111110110;	// la
memoria_instrucoes[20] = 32'b010100_00000_10101_0000000000000101;	// li
memoria_instrucoes[21] = 32'b010110_01011_10101_0000000000000011;	// sw
memoria_instrucoes[22] = 32'b010011_00011_01100_0000000000000000;	// lw
memoria_instrucoes[23] = 32'b000010_01100_10110_0000000000110001;	// addi
memoria_instrucoes[24] = 32'b010110_00011_10110_0000000000000000;	// sw
memoria_instrucoes[25] = 32'b100000_00000_10111_0000000000000000;	// in
memoria_instrucoes[26] = 32'b010110_00011_10111_1111111111110010;	// sw
memoria_instrucoes[27] = 32'b100000_00000_11000_0000000000000000;	// in
memoria_instrucoes[28] = 32'b010110_00011_11000_1111111111110011;	// sw
memoria_instrucoes[29] = 32'b010101_00011_01001_1111111111110110;	// la
memoria_instrucoes[30] = 32'b010011_00011_01101_1111111111110011;	// lw
memoria_instrucoes[31] = 32'b010010_01101_01000_0000000000000000;	// mov
memoria_instrucoes[32] = 32'b010100_00000_01001_0000000000001010;	// li
memoria_instrucoes[33] = 32'b000010_00011_00011_0000000001111011;	// addi
memoria_instrucoes[34] = 32'b011110_00000000000000000000110100;	// jal
memoria_instrucoes[35] = 32'b010010_00001_11001_0000000000000000;	// mov
memoria_instrucoes[36] = 32'b000100_00011_00011_0000000001111011;	// subi
memoria_instrucoes[37] = 32'b010010_11001_00111_0000000000000000;	// mov
memoria_instrucoes[38] = 32'b100001_00000_00010_0000000000000000;	// out
memoria_instrucoes[39] = 32'b010100_00000_11010_0000000000000000;	// li
memoria_instrucoes[40] = 32'b010110_00011_11010_1111111111110100;	// sw
memoria_instrucoes[41] = 32'b010100_00000_11011_0000000000000001;	// li
memoria_instrucoes[42] = 32'b010110_00011_11011_1111111111110010;	// sw
memoria_instrucoes[43] = 32'b010011_00011_01110_1111111111110010;	// lw
memoria_instrucoes[44] = 32'b010100_00000_11100_0000000000001010;	// li
memoria_instrucoes[45] = 32'b011010_11100_01110_0000000000110100;	// blet
memoria_instrucoes[46] = 32'b010011_00011_01111_1111111111110101;	// lw
memoria_instrucoes[47] = 32'b000001_01011_01111_11101_00000000000;	// add
memoria_instrucoes[48] = 32'b010011_00011_10000_1111111111110100;	// lw
memoria_instrucoes[49] = 32'b010110_11101_10000_0000000000000000;	// sw
memoria_instrucoes[50] = 32'b011101_00000000000000000000110100;	// j
memoria_instrucoes[51] = 32'b111111_00000000000000000000000000;	// halt
