# Compilação C- para código intermediário
# Arquivo: testes/gdc_sem_erros.cm
    # -> type int
        # -> identifier
        # globalVar
        # <- identifier
    # <- type int

    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
                # -> type int
                    # -> identifier
                    # a
                    # <- identifier
                # <- type int

        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # gdc
                # -> type int
                    # -> identifier
                    # w
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # z
                    # <- identifier
                # <- type int

                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # v
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # u
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> function call
                        # gdc
                        # -> function call: arguments
                            # -> identifier
                            # v
                            # <- identifier
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # u
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> identifier
                                        # v
                                        # <- identifier
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: /
                                    # <- Operator
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # v
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # arithmetic operator: *
                                # <- Operator
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # y
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # u
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 10
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> identifier
                    # teste
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # teste
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 2
                        # <- constant
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # y
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # gdc
                    # -> function call: arguments
                        # -> identifier
                        # x
                        # <- identifier
                        # -> constant
                        # 99
                        # <- constant
                    # <- function call: arguments
                    # <- function call
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # u
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> constant
                    # 1
                    # <- constant
                # <- assign: right argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 10
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # <- assign
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # x
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # x
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, input, _, _)
2: (function, output, _, _)
3: (get_param, x, _, _)
4: (function, gdc, _, _)
5: (get_param, u, _, _)
6: (get_param, v, _, _)
7: (equal, v, 0, t1)
8: (jump_if_false, t1, L1, _)
9: (return, u, _, _)
10: (label, L1, _, _)
11: (param_list, 2, _, _)
12: (set_param, v, _, _)
13: (division, u, v, t2)
14: (multiplication, t2, v, t3)
15: (subtraction, u, t3, t4)
16: (set_param, t4, _, _)
17: (call, gdc, 2, t5)
18: (return, t5, _, _)
19: (function, main, _, _)
20: (vector, v, 10, t6)
21: (addition, 1, 2, t7)
22: (assign, teste, t7, _)
23: (param_list, 0, _, _)
24: (call, input, 0, t8)
25: (assign, x, t8, _)
26: (param_list, 0, _, _)
27: (call, input, 0, t9)
28: (assign, y, t9, _)
29: (param_list, 1, _, _)
30: (param_list, 2, _, _)
31: (set_param, x, _, _)
32: (set_param, 99, _, _)
33: (call, gdc, 2, t10)
34: (set_param, t10, _, _)
35: (call, output, 1, t11)
36: (assign, u, 0, _)
37: (assign, x, 1, _)
38: (label, L2, _, _)
39: (less_than_equal_to, x, 10, t12)
40: (jump_if_false, t12, L3, _)
41: (addition, u, 1, t13)
42: (assign, u, t13, _)
43: (addition, x, 1, t14)
44: (assign, x, t14, _)
45: (goto, L2, _, _)
46: (label, L3, _, _)
47: (return, _, _, _)
48: (halt, _, _, _)

********** Código objeto **********

input:

output:

gdc:
    0:	beq	$a1, 0, L1
    1:	mov	$v0, $a0
    2:	jr	$ra
.L1
    3:	mov	$a0, $a1
    4:	lw	$s0, -3($sp)
    5:	div	$t0, $s0, $a0
    6:	mul	$t1, $t0, $a0
    7:	sub	$t2, $s0, $t1
    8:	mov	$a1, $t2
    9:	addi	$sp, $sp, 5
    10:	sw	$ra, -4($sp)
    11:	jal	gdc
    12:	lw	$ra, -4($sp)
    13:	subi	$sp, $sp, 5
    14:	mov	$t3, $v0
    15:	mov	$v0, $t3
    16:	jr	$ra

main:
    17:	lw	$s0, -10($sp)
    18:	li	$t0, 1
    19:	addi	$t1, $t0, 2
    20:	sw	$t1, 0($sp)
    21:	in	$t2
    22:	sw	$t2, -14($sp)
    23:	in	$t3
    24:	sw	$t3, -13($sp)
    25:	lw	$s0, -14($sp)
    26:	mov	$a0, $s0
    27:	li	$a1, 99
    28:	addi	$sp, $sp, 4
    29:	jal	gdc
    30:	mov	$t4, $v0
    31:	subi	$sp, $sp, 4
    32:	mov	$a0, $t4
    33:	out	$out
    34:	li	$t5, 0
    35:	sw	$t5, -12($sp)
    36:	li	$t6, 1
    37:	sw	$t6, -14($sp)
.L2
    38:	blet	$s0, 10, L3
    39:	lw	$s0, -12($sp)
    40:	addi	$t7, $s0, 1
    41:	sw	$t7, -12($sp)
    42:	addi	$t8, $s0, 1
    43:	sw	$t8, -14($sp)
    44:	j	L2
.L3
    45:	halt	
