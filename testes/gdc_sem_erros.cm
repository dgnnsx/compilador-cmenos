# Compilação C- para código intermediário
# Arquivo: testes/gdc_sem_erros.cm
    # -> type int
        # -> identifier
        # globalVar
        # <- identifier
    # <- type int

    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # gdc
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # v
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # u
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> function call
                        # gdc
                        # -> function call: arguments
                            # -> identifier
                            # v
                            # <- identifier
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # u
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> identifier
                                        # v
                                        # <- identifier
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: /
                                    # <- Operator
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # v
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # arithmetic operator: *
                                # <- Operator
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # y
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # u
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 10
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> identifier
                    # teste
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # teste
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 2
                        # <- constant
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # y
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # gdc
                    # -> function call: arguments
                        # -> identifier
                        # x
                        # <- identifier
                        # -> identifier
                        # y
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # u
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> constant
                    # 1
                    # <- constant
                # <- assign: right argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 10
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # <- assign
                        # -> assign
                        # -> assign: left argument
                            # -> vector
                            # v
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: right argument
                        # <- assign
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # x
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # x
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, input, _, _)
2: (function, output, _, _)
3: (function, gdc, _, _)
4: (equal, v, 0, t1)
5: (jump_if_false, t1, L1, _)
6: (return, u, _, _)
7: (label, L1, _, _)
8: (begin_args, _, _, _)
9: (arg, v, _, _)
10: (division, u, v, t2)
11: (multiplication, t2, v, t3)
12: (subtraction, u, t3, t4)
13: (arg, t4, _, _)
14: (call, gdc, 2, t5)
15: (return, t5, _, _)
16: (function, main, _, _)
17: (vector, v, 10, t6)
18: (addition, 1, 2, t7)
19: (assign, teste, t7, _)
20: (begin_args, _, _, _)
21: (call, input, 0, t8)
22: (assign, x, t8, _)
23: (begin_args, _, _, _)
24: (call, input, 0, t9)
25: (assign, y, t9, _)
26: (begin_args, _, _, _)
27: (begin_args, _, _, _)
28: (arg, x, _, _)
29: (arg, y, _, _)
30: (call, gdc, 2, t10)
31: (arg, t10, _, _)
32: (call, output, 1, t11)
33: (assign, u, 0, _)
34: (assign, x, 1, _)
35: (label, L2, _, _)
36: (less_than_equal_to, x, 10, t12)
37: (jump_if_false, t12, L3, _)
38: (addition, u, 1, t13)
39: (assign, u, t13, _)
40: (vector, v, i, t14)
41: (assign, t14, u, _)
42: (addition, x, 1, t15)
43: (assign, x, t15, _)
44: (goto, L2, _, _)
45: (label, L3, _, _)
46: (return, _, _, _)
47: (halt, _, _, _)

********** Código objeto **********


input:

output:

gdc:
    0:	LOAD R1 v 
    1:	LOADI R2 0 
    2:	BEQ 4 R1 R2
.L1
    3:	PUSH v  
    4:	LOAD R1 u 
    5:	LOAD R2 v 
    6:	DIV R3 R1 R2
    7:	PUSH R3  
    8:	POP R1 t2 
    9:	LOAD R2 v 
    10:	MULT R3 R1 R2
    11:	PUSH R3  
    12:	LOAD R1 u 
    13:	POP R2 t3 
    14:	SUB R3 R1 R2
    15:	PUSH R3  
    16:	PUSH t4  
    17:	CALL gdc  

main:
    18:	LOADI R1 1 
    19:	LOADI R2 2 
    20:	ADD R3 R1 R2
    21:	PUSH R3  
    22:	STORE teste  
    23:	CALL input  
    24:	STORE x  
    25:	CALL input  
    26:	STORE y  
    27:	PUSH x  
    28:	PUSH y  
    29:	CALL gdc  
    30:	PUSH t10  
    31:	CALL output  
    32:	STORE u  
    33:	STORE x  
.L2
    34:	LOAD R1 x 
    35:	LOADI R2 10 
    36:	BLET 36 R1 R2
    37:	LOAD R1 u 
    38:	LOADI R2 1 
    39:	ADD R3 R1 R2
    40:	PUSH R3  
    41:	STORE u  
    42:	STORE t14  
    43:	LOAD R1 x 
    44:	LOADI R2 1 
    45:	ADD R3 R1 R2
    46:	PUSH R3  
    47:	STORE x  
    48:	JUMP L2  
.L3
    49:	HALT   
