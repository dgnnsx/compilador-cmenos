# Compilação C- para código intermediário
# Arquivo: testes/gdc_sem_erros.cm
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> identifier
        # globalVar
        # <- identifier
    # <- type int

    # -> type int
        # -> function declaration
        # gdc
                # -> type int
                    # -> identifier
                    # w
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # z
                    # <- identifier
                # <- type int

                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # v
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # u
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> function call
                        # gdc
                        # -> function call: arguments
                            # -> identifier
                            # v
                            # <- identifier
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # u
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> identifier
                                        # v
                                        # <- identifier
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: /
                                    # <- Operator
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # v
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # arithmetic operator: *
                                # <- Operator
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # y
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # u
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 10
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> identifier
                    # teste
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: left argument
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 0
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- assign: left argument
                # -> assign: right argument
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> vector
                        # v
                        # -> vector: position
                            # -> constant
                            # 1
                            # <- constant
                        # <- vector: position
                        # <- vector
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> vector
                        # v
                        # -> vector: position
                            # -> constant
                            # 2
                            # <- constant
                        # <- vector: position
                        # <- vector
                    # <- arithmetic operator: right argument
                    # arithmetic operator: +
                    # <- Operator
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # y
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # gdc
                    # -> function call: arguments
                        # -> identifier
                        # x
                        # <- identifier
                        # -> identifier
                        # y
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # u
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # <- assign
                # -> assign
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # -> assign: right argument
                    # -> constant
                    # 1
                    # <- constant
                # <- assign: right argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 10
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # <- assign
                        # -> assign
                        # -> assign: left argument
                            # -> vector
                            # v
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: right argument
                        # <- assign
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # teste
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> vector
                            # v
                            # -> vector: position
                                # -> constant
                                # 3
                                # <- constant
                            # <- vector: position
                            # <- vector
                        # <- assign: right argument
                        # <- assign
                        # -> assign
                        # -> assign: left argument
                            # -> identifier
                            # x
                            # <- identifier
                        # <- assign: left argument
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # x
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, gdc, _, _)
2: (get_param, u, _, _)
3: (get_param, v, _, _)
4: (equal, v, 0, t1)
5: (jump_if_false, t1, L1, _)
6: (return, u, _, _)
7: (label, L1, _, _)
8: (param_list, 2, _, _)
9: (set_param, v, _, _)
10: (division, u, v, t2)
11: (multiplication, t2, v, t3)
12: (subtraction, u, t3, t4)
13: (set_param, t4, _, _)
14: (call, gdc, 2, t5)
15: (return, t5, _, _)
16: (function, main, _, _)
17: (vector, v, 0, t7)
18: (vector, v, 1, t8)
19: (vector, v, 2, t9)
20: (addition, t8, t9, t10)
21: (assign, t7, t10, _)
22: (param_list, 0, _, _)
23: (call, input, 0, t11)
24: (assign, x, t11, _)
25: (param_list, 0, _, _)
26: (call, input, 0, t12)
27: (assign, y, t12, _)
28: (param_list, 1, _, _)
29: (param_list, 2, _, _)
30: (set_param, x, _, _)
31: (set_param, y, _, _)
32: (call, gdc, 2, t13)
33: (set_param, t13, _, _)
34: (call, output, 1, t14)
35: (assign, u, 0, _)
36: (assign, x, 1, _)
37: (label, L2, _, _)
38: (less_than_equal_to, x, 10, t15)
39: (jump_if_false, t15, L3, _)
40: (addition, u, 1, t16)
41: (assign, u, t16, _)
42: (vector, v, i, t17)
43: (assign, t17, u, _)
44: (vector, v, 3, t18)
45: (assign, teste, t18, _)
46: (addition, x, u, t19)
47: (assign, x, t19, _)
48: (goto, L2, _, _)
49: (label, L3, _, _)
50: (return, _, _, _)
51: (halt, _, _, _)

********** Código objeto **********

gdc:
    0:	beq	$a1, 0, L1
    1:	mov	$v0, $a0
    2:	jr	$ra
.L1
    3:	mov	$a0, $a1
    4:	lw	$s0, -3($sp)
    5:	div	$t0, $s0, $a0
    6:	mul	$t1, $t0, $a0
    7:	sub	$t2, $s0, $t1
    8:	mov	$a1, $t2
    9:	addi	$sp, $sp, 5
    10:	sw	$ra, -4($sp)
    11:	jal	gdc
    12:	lw	$ra, -4($sp)
    13:	subi	$sp, $sp, 5
    14:	mov	$t3, $v0
    15:	mov	$v0, $t3
    16:	jr	$ra

main:
    17:	la	$vec, -10($sp)
    18:	addi	$vec, $vec, 0
    19:	lw	$t0, 0($vec)
    20:	la	$vec, -10($sp)
    21:	addi	$vec, $vec, 1
    22:	lw	$t1, 0($vec)
    23:	la	$vec, -10($sp)
    24:	addi	$vec, $vec, 2
    25:	lw	$t2, 0($vec)
    26:	add	$t3, $t1, $t2
    27:	sw	$t3, 0($vec)
    28:	in	$t4
    29:	sw	$t4, -14($sp)
    30:	in	$t5
    31:	sw	$t5, -13($sp)
    32:	lw	$s0, -14($sp)
    33:	mov	$a0, $s0
    34:	lw	$s1, -13($sp)
    35:	mov	$a1, $s1
    36:	addi	$sp, $sp, 4
    37:	jal	gdc
    38:	mov	$t6, $v0
    39:	subi	$sp, $sp, 4
    40:	mov	$a0, $t6
    41:	out	$out
    42:	li	$t7, 0
    43:	sw	$t7, -12($sp)
    44:	li	$t8, 1
    45:	sw	$t8, -14($sp)
.L2
    46:	lw	$s2, -14($sp)
    47:	blet	$s2, 10, L3
    48:	lw	$s3, -12($sp)
    49:	addi	$t9, $s3, 1
    50:	sw	$t9, -12($sp)
    51:	la	$vec, -10($sp)
    52:	lw	$s4, -11($sp)
    53:	add	$vec, $vec, $s4
    54:	lw	$t0, 0($vec)
    55:	sw	$s3, 0($vec)
    56:	la	$vec, -10($sp)
    57:	addi	$vec, $vec, 3
    58:	lw	$t0, 0($vec)
    59:	sw	$t0, 0($sp)
    60:	add	$t1, $s2, $s3
    61:	sw	$t1, -14($sp)
    62:	j	L2
.L3
    63:	halt	
