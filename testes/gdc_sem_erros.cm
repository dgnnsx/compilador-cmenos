# Compilação C- para código intermediário
# Arquivo: testes/gdc_sem_erros.cm
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> identifier
        # globalVar
        # <- identifier
    # <- type int

    # -> type int
        # -> function declaration
        # gdc
                # -> type int
                    # -> vector
                    # w
                    # -> vector: position
                        # -> constant
                        # 60
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> vector
                    # z
                    # -> vector: position
                        # -> constant
                        # 60
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> vector
                        # vetor
                        # -> vector: position
                            # -> constant
                            # 1
                            # <- constant
                        # <- vector: position
                        # <- vector
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> identifier
                        # u
                        # <- identifier
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> return
                    # -> return: expression
                        # -> function call
                        # gdc
                        # -> function call: arguments
                            # -> identifier
                            # v
                            # <- identifier
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # u
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # u
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> identifier
                                        # v
                                        # <- identifier
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: /
                                    # <- Operator
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # v
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # arithmetic operator: *
                                # <- Operator
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- function call: arguments
                        # <- function call
                    # <- return: expression
                    # <- return
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # x
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # y
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # u
                    # <- identifier
                # <- type int

                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> type int
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 10
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- type int

                # -> type int
                    # -> identifier
                    # teste
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 5
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> vector
                    # v
                    # -> vector: position
                        # -> constant
                        # 3
                        # <- constant
                    # <- vector: position
                    # <- vector
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # y
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # gdc
                    # -> function call: arguments
                        # -> identifier
                        # v
                        # <- identifier
                        # -> identifier
                        # y
                        # <- identifier
                        # -> constant
                        # 10
                        # <- constant
                    # <- function call: arguments
                    # <- function call
                # <- function call: arguments
                # <- function call
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 0
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # u
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 1
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # x
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # x
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 10
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: right argument
                            # -> identifier
                            # u
                            # <- identifier
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> vector
                            # v
                            # -> vector: position
                                # -> identifier
                                # i
                                # <- identifier
                            # <- vector: position
                            # <- vector
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, gdc, _, _)
2: (get_param, u, _, _)
3: (get_param, v, _, _)
4: (get_param, vetor, _, _)
5: (vector_value, vetor, 1, t3)
6: (equal, t3, 0, t4)
7: (jump_if_false, t4, L1, _)
8: (return, u, _, _)
9: (label, L1, _, _)
10: (param_list, 2, _, _)
11: (set_param, v, _, _)
12: (division, u, v, t5)
13: (multiplication, t5, v, t6)
14: (subtraction, u, t6, t7)
15: (set_param, t7, _, _)
16: (call, gdc, 2, t8)
17: (return, t8, _, _)
18: (function, main, _, _)
19: (vector_address, v, 3, t10)
20: (assign, v, 5, 3)
21: (param_list, 0, _, _)
22: (call, input, 0, t11)
23: (assign, x, t11, _)
24: (param_list, 0, _, _)
25: (call, input, 0, t12)
26: (assign, y, t12, _)
27: (param_list, 1, _, _)
28: (param_list, 3, _, _)
29: (set_param, v, _, _)
30: (set_param, y, _, _)
31: (set_param, 10, _, _)
32: (call, gdc, 3, t13)
33: (set_param, t13, _, _)
34: (call, output, 1, t14)
35: (assign, u, 0, _)
36: (assign, x, 1, _)
37: (label, L2, _, _)
38: (less_than_equal_to, x, 10, t15)
39: (jump_if_false, t15, L3, _)
40: (vector_address, v, i, t16)
41: (assign, t16, u, _)
42: (goto, L2, _, _)
43: (label, L3, _, _)
44: (return, _, _, _)
45: (halt, _, _, _)

********** Código objeto **********

gdc:
    0:	lw	$t0, 1($a2)
    1:	beq	$t0, 0, L1
    2:	mov	$v0, $a0
    3:	jr	$ra
.L1
    4:	mov	$a0, $a1
    5:	lw	$s0, -122($sp)
    6:	div	$t1, $s0, $a0
    7:	mul	$t2, $t1, $a0
    8:	sub	$t3, $s0, $t2
    9:	mov	$a1, $t3
    10:	addi	$sp, $sp, 124
    11:	sw	$ra, -123($sp)
    12:	jal	gdc
    13:	lw	$ra, -123($sp)
    14:	subi	$sp, $sp, 124
    15:	mov	$t4, $v0
    16:	mov	$v0, $t4
    17:	jr	$ra

main:
    18:	la	$s0, -10($sp)
    19:	li	$t0, 5
    20:	sw	$t0, 3($s0)
    21:	in	$t1
    22:	sw	$t1, -14($sp)
    23:	in	$t2
    24:	sw	$t2, -13($sp)
    25:	la	$a1, -10($sp)
    26:	lw	$s1, -13($sp)
    27:	mov	$a1, $s1
    28:	li	$a2, 10
    29:	addi	$sp, $sp, 123
    30:	jal	gdc
    31:	mov	$t3, $v0
    32:	subi	$sp, $sp, 123
    33:	mov	$a0, $t3
    34:	out	$out
    35:	li	$t4, 0
    36:	sw	$t4, -12($sp)
    37:	li	$t5, 1
    38:	sw	$t5, -14($sp)
.L2
    39:	lw	$s2, -14($sp)
    40:	blet	$s2, 10, L3
    41:	lw	$s3, -11($sp)
    42:	add	$t6, $s0, $s3
    43:	lw	$s4, -12($sp)
    44:	sw	$s4, 0($t6)
    45:	j	L2
.L3
    46:	halt	
