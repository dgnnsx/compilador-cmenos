# Compilação C- para código intermediário
# Arquivo: testes/fatorial_recursivo.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # fat
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # n
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 1
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                    # -> if
                    # -> if: test expression
                        # -> arithmetic operator
                        # -> arithmetic operator: left argument
                            # -> identifier
                            # n
                            # <- identifier
                        # <- arithmetic operator: left argument
                        # -> arithmetic operator: right argument
                            # -> constant
                            # 1
                            # <- constant
                        # <- arithmetic operator: right argument
                        # relational operator: ==
                        # <- Operator
                    # <- if: test expression
                    # -> if: if block
                        # -> return
                        # -> return: expression
                            # -> constant
                            # 1
                            # <- constant
                        # <- return: expression
                        # <- return
                    # <- if: if block
                    # -> if: else/end block
                        # -> return
                        # -> return: expression
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> function call
                                # fat
                                # -> function call: arguments
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # n
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> constant
                                        # 1
                                        # <- constant
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: -
                                    # <- Operator
                                # <- function call: arguments
                                # <- function call
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> identifier
                                # n
                                # <- identifier
                            # <- arithmetic operator: right argument
                            # arithmetic operator: *
                            # <- Operator
                        # <- return: expression
                        # <- return
                    # <- if: else/end block
                    # <- if
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # n
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # n
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # fat
                    # -> function call: arguments
                        # -> identifier
                        # n
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, fat, _, _)
2: (get_param, n, _, _)
3: (equal, n, 0, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 1, _, _)
6: (goto, L4, _, _)
7: (label, L1, _, _)
8: (equal, n, 1, t2)
9: (jump_if_false, t2, L2, _)
10: (return, 1, _, _)
11: (goto, L3, _, _)
12: (label, L2, _, _)
13: (param_list, 1, _, _)
14: (subtraction, n, 1, t3)
15: (set_param, t3, _, _)
16: (call, fat, 1, t4)
17: (multiplication, t4, n, t5)
18: (return, t5, _, _)
19: (label, L3, _, _)
20: (label, L4, _, _)
21: (return, _, _, _)
22: (function, main, _, _)
23: (param_list, 0, _, _)
24: (call, input, 0, t6)
25: (assign, n, t6, _)
26: (param_list, 2, _, _)
27: (param_list, 1, _, _)
28: (set_param, n, _, _)
29: (call, fat, 1, t7)
30: (set_param, t7, _, _)
31: (set_param, 2, _, _)
32: (call, output, 2, t8)
33: (halt, _, _, _)

********** Código objeto **********

fat:
    0:	addi	$sp, $sp, 2
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t0, 0
    4:	beq	$s0, $t0, L1
    5:	li	$t1, 1
    6:	mov	$v0, $t1
    7:	jr	$ra
    8:	j	L4
.L1	
    9:	li	$t2, 1
    10:	beq	$s0, $t2, L2
    11:	li	$t3, 1
    12:	mov	$v0, $t3
    13:	jr	$ra
    14:	j	L3
.L2	
    15:	subi	$t4, $s0, 1
    16:	mov	$a0, $t4
    17:	sw	$ra, 1($sp)
    18:	jal	fat
    19:	subi	$sp, $sp, 2
    20:	lw	$ra, 1($sp)
    21:	mov	$t5, $v0
    22:	lw	$s0, 0($sp)
    23:	mul	$t6, $t5, $s0
    24:	mov	$v0, $t6
    25:	jr	$ra
.L3	
.L4	
    26:	jr	$ra

main:
    27:	addi	$sp, $sp, 0
    28:	in	$t0
    29:	sw	$t0, 0($sp)
    30:	lw	$s0, 0($sp)
    31:	mov	$a0, $s0
    32:	jal	fat
    33:	mov	$t1, $v0
    34:	subi	$sp, $sp, 2
    35:	mov	$a0, $t1
    36:	li	$a1, 2
    37:	out	$a0, 2
    38:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011101_00000000000000000000011100; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000010; 	// addi
memoria_instrucoes[2] = 32'b010110_00011_00111_0000000000000000; 	// sw
memoria_instrucoes[3] = 32'b010011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[4] = 32'b010100_00000_10101_0000000000000000; 	// li
memoria_instrucoes[5] = 32'b010111_01011_10101_0000000000001010; 	// beq
memoria_instrucoes[6] = 32'b010100_00000_10110_0000000000000001; 	// li
memoria_instrucoes[7] = 32'b010010_10110_00001_0000000000000000; 	// mov
memoria_instrucoes[8] = 32'b011111_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[9] = 32'b011101_00000000000000000000011011; 	// j
memoria_instrucoes[10] = 32'b010100_00000_10111_0000000000000001; 	// li
memoria_instrucoes[11] = 32'b010111_01011_10111_0000000000010000; 	// beq
memoria_instrucoes[12] = 32'b010100_00000_11000_0000000000000001; 	// li
memoria_instrucoes[13] = 32'b010010_11000_00001_0000000000000000; 	// mov
memoria_instrucoes[14] = 32'b011111_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[15] = 32'b011101_00000000000000000000011011; 	// j
memoria_instrucoes[16] = 32'b000100_01011_11001_0000000000000001; 	// subi
memoria_instrucoes[17] = 32'b010010_11001_00111_0000000000000000; 	// mov
memoria_instrucoes[18] = 32'b010110_00011_11111_0000000000000001; 	// sw
memoria_instrucoes[19] = 32'b011110_00000000000000000000000001; 	// jal
memoria_instrucoes[20] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[21] = 32'b010011_00011_11111_0000000000000001; 	// lw
memoria_instrucoes[22] = 32'b010010_00001_11010_0000000000000000; 	// mov
memoria_instrucoes[23] = 32'b010011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[24] = 32'b000101_11010_01011_11011_00000000000; 	// mul
memoria_instrucoes[25] = 32'b010010_11011_00001_0000000000000000; 	// mov
memoria_instrucoes[26] = 32'b011111_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[27] = 32'b011111_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[28] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[29] = 32'b100000_00000_10101_0000000000000000; 	// in
memoria_instrucoes[30] = 32'b010110_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[31] = 32'b010011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[32] = 32'b010010_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[33] = 32'b011110_00000000000000000000000001; 	// jal
memoria_instrucoes[34] = 32'b010010_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[35] = 32'b000100_00011_00011_0000000000000010; 	// subi
memoria_instrucoes[36] = 32'b010010_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[37] = 32'b010100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[38] = 32'b100001_00000_00111_0000000000000010; 	// out
memoria_instrucoes[39] = 32'b111111_00000000000000000000000000; 	// halt
