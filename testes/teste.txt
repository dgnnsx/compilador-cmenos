# Compilação C- para código intermediário
# Arquivo: testes/teste.tx
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # a
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 11
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # a
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 12
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> constant
                            # 77
                            # <- constant
                            # -> constant
                            # 0
                            # <- constant
                        # <- function call: arguments
                        # <- function call
                # <- if: if block
                # -> if: else/end block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> constant
                            # 77
                            # <- constant
                            # -> constant
                            # 1
                            # <- constant
                        # <- function call: arguments
                        # <- function call
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 10
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> constant
                            # 88
                            # <- constant
                            # -> constant
                            # 0
                            # <- constant
                        # <- function call: arguments
                        # <- function call
                # <- if: if block
                # -> if: else/end block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> constant
                            # 88
                            # <- constant
                            # -> constant
                            # 1
                            # <- constant
                        # <- function call: arguments
                        # <- function call
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # a
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 11
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> constant
                            # 99
                            # <- constant
                            # -> constant
                            # 0
                            # <- constant
                        # <- function call: arguments
                        # <- function call
                # <- if: if block
                # -> if: else/end block
                        # -> function call
                        # output
                        # -> function call: arguments
                            # -> constant
                            # 99
                            # <- constant
                            # -> constant
                            # 1
                            # <- constant
                        # <- function call: arguments
                        # <- function call
                # <- if: else/end block
                # <- if
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, main, _, _)
2: (assign, a, 11, _)
3: (less_than_equal_to, a, 12, t1)
4: (jump_if_false, t1, L1, _)
5: (param_list, 2, _, _)
6: (set_param, 77, _, _)
7: (set_param, 0, _, _)
8: (call, output, 2, t2)
9: (goto, L2, _, _)
10: (label, L1, _, _)
11: (param_list, 2, _, _)
12: (set_param, 77, _, _)
13: (set_param, 1, _, _)
14: (call, output, 2, t3)
15: (label, L2, _, _)
16: (less_than_equal_to, a, 10, t4)
17: (jump_if_false, t4, L3, _)
18: (param_list, 2, _, _)
19: (set_param, 88, _, _)
20: (set_param, 0, _, _)
21: (call, output, 2, t5)
22: (goto, L4, _, _)
23: (label, L3, _, _)
24: (param_list, 2, _, _)
25: (set_param, 88, _, _)
26: (set_param, 1, _, _)
27: (call, output, 2, t6)
28: (label, L4, _, _)
29: (less_than_equal_to, a, 11, t7)
30: (jump_if_false, t7, L5, _)
31: (param_list, 2, _, _)
32: (set_param, 99, _, _)
33: (set_param, 0, _, _)
34: (call, output, 2, t8)
35: (goto, L6, _, _)
36: (label, L5, _, _)
37: (param_list, 2, _, _)
38: (set_param, 99, _, _)
39: (set_param, 1, _, _)
40: (call, output, 2, t9)
41: (label, L6, _, _)
42: (halt, _, _, _)

********** Código objeto **********

main:
    0:	addi	$sp, $sp, 0
    1:	li	$t0, 11
    2:	sw	$t0, 0($sp)
    3:	lw	$s0, 0($sp)
    4:	li	$t1, 12
    5:	blet	$s0, $t1, L1
    6:	li	$a0, 77
    7:	li	$a1, 0
    8:	out	$a0, 0
    9:	j	L2
.L1	
    10:	li	$a0, 77
    11:	li	$a1, 1
    12:	out	$a0, 1
.L2	
    13:	li	$t2, 10
    14:	blet	$s0, $t2, L3
    15:	li	$a0, 88
    16:	li	$a1, 0
    17:	out	$a0, 0
    18:	j	L4
.L3	
    19:	li	$a0, 88
    20:	li	$a1, 1
    21:	out	$a0, 1
.L4	
    22:	li	$t3, 11
    23:	blet	$s0, $t3, L5
    24:	li	$a0, 99
    25:	li	$a1, 0
    26:	out	$a0, 0
    27:	j	L6
.L5	
    28:	li	$a0, 99
    29:	li	$a1, 1
    30:	out	$a0, 1
.L6	
    31:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011101_00000000000000000000000001; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[2] = 32'b010100_00000_10101_0000000000001011; 	// li
memoria_instrucoes[3] = 32'b010110_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[4] = 32'b010011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[5] = 32'b010100_00000_10110_0000000000001100; 	// li
memoria_instrucoes[6] = 32'b011010_01011_10110_0000000000001011; 	// blet
memoria_instrucoes[7] = 32'b010100_00000_00111_0000000001001101; 	// li
memoria_instrucoes[8] = 32'b010100_00000_01000_0000000000000000; 	// li
memoria_instrucoes[9] = 32'b100001_00000_00111_0000000000000000; 	// out
memoria_instrucoes[10] = 32'b011101_00000000000000000000001110; 	// j
memoria_instrucoes[11] = 32'b010100_00000_00111_0000000001001101; 	// li
memoria_instrucoes[12] = 32'b010100_00000_01000_0000000000000001; 	// li
memoria_instrucoes[13] = 32'b100001_00000_00111_0000000000000001; 	// out
memoria_instrucoes[14] = 32'b010100_00000_10111_0000000000001010; 	// li
memoria_instrucoes[15] = 32'b011010_01011_10111_0000000000010100; 	// blet
memoria_instrucoes[16] = 32'b010100_00000_00111_0000000001011000; 	// li
memoria_instrucoes[17] = 32'b010100_00000_01000_0000000000000000; 	// li
memoria_instrucoes[18] = 32'b100001_00000_00111_0000000000000000; 	// out
memoria_instrucoes[19] = 32'b011101_00000000000000000000010111; 	// j
memoria_instrucoes[20] = 32'b010100_00000_00111_0000000001011000; 	// li
memoria_instrucoes[21] = 32'b010100_00000_01000_0000000000000001; 	// li
memoria_instrucoes[22] = 32'b100001_00000_00111_0000000000000001; 	// out
memoria_instrucoes[23] = 32'b010100_00000_11000_0000000000001011; 	// li
memoria_instrucoes[24] = 32'b011010_01011_11000_0000000000011101; 	// blet
memoria_instrucoes[25] = 32'b010100_00000_00111_0000000001100011; 	// li
memoria_instrucoes[26] = 32'b010100_00000_01000_0000000000000000; 	// li
memoria_instrucoes[27] = 32'b100001_00000_00111_0000000000000000; 	// out
memoria_instrucoes[28] = 32'b011101_00000000000000000000100000; 	// j
memoria_instrucoes[29] = 32'b010100_00000_00111_0000000001100011; 	// li
memoria_instrucoes[30] = 32'b010100_00000_01000_0000000000000001; 	// li
memoria_instrucoes[31] = 32'b100001_00000_00111_0000000000000001; 	// out
memoria_instrucoes[32] = 32'b111111_00000000000000000000000000; 	// halt
