# Compilação C- para código intermediário
# Arquivo: testes/eh_numero_primo.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # isPrime
                # -> type int
                    # -> identifier
                    # i
                    # <- identifier
                # <- type int

                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # n
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 1
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 2
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # n
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 3
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 1
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> arithmetic operator
                        # -> arithmetic operator: left argument
                            # -> identifier
                            # n
                            # <- identifier
                        # <- arithmetic operator: left argument
                        # -> arithmetic operator: right argument
                            # -> constant
                            # 2
                            # <- constant
                        # <- arithmetic operator: right argument
                        # modulo operator: %
                        # <- Operator
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 2
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> if
                # -> if: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> arithmetic operator
                        # -> arithmetic operator: left argument
                            # -> identifier
                            # n
                            # <- identifier
                        # <- arithmetic operator: left argument
                        # -> arithmetic operator: right argument
                            # -> constant
                            # 3
                            # <- constant
                        # <- arithmetic operator: right argument
                        # modulo operator: %
                        # <- Operator
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: ==
                    # <- Operator
                # <- if: test expression
                # -> if: if block
                    # -> return
                    # -> return: expression
                        # -> constant
                        # 2
                        # <- constant
                    # <- return: expression
                    # <- return
                # <- if: if block
                # -> if: else/end block
                # <- if: else/end block
                # <- if
                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 5
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # i
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> arithmetic operator
                        # -> arithmetic operator: left argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- arithmetic operator: left argument
                        # -> arithmetic operator: right argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- arithmetic operator: right argument
                        # arithmetic operator: *
                        # <- Operator
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> identifier
                        # n
                        # <- identifier
                    # <- arithmetic operator: right argument
                    # relational operator: <=
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> if
                        # -> if: test expression
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> identifier
                                    # n
                                    # <- identifier
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> identifier
                                    # i
                                    # <- identifier
                                # <- arithmetic operator: right argument
                                # modulo operator: %
                                # <- Operator
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 0
                                # <- constant
                            # <- arithmetic operator: right argument
                            # relational operator: ==
                            # <- Operator
                        # <- if: test expression
                        # -> if: if block
                            # -> return
                            # -> return: expression
                                # -> constant
                                # 2
                                # <- constant
                            # <- return: expression
                            # <- return
                        # <- if: if block
                        # -> if: else/end block
                        # <- if: else/end block
                        # <- if
                        # -> if
                        # -> if: test expression
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> arithmetic operator
                                # -> arithmetic operator: left argument
                                    # -> identifier
                                    # n
                                    # <- identifier
                                # <- arithmetic operator: left argument
                                # -> arithmetic operator: right argument
                                    # -> arithmetic operator
                                    # -> arithmetic operator: left argument
                                        # -> identifier
                                        # i
                                        # <- identifier
                                    # <- arithmetic operator: left argument
                                    # -> arithmetic operator: right argument
                                        # -> constant
                                        # 2
                                        # <- constant
                                    # <- arithmetic operator: right argument
                                    # arithmetic operator: +
                                    # <- Operator
                                # <- arithmetic operator: right argument
                                # modulo operator: %
                                # <- Operator
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 0
                                # <- constant
                            # <- arithmetic operator: right argument
                            # relational operator: ==
                            # <- Operator
                        # <- if: test expression
                        # -> if: if block
                            # -> return
                            # -> return: expression
                                # -> constant
                                # 2
                                # <- constant
                            # <- return: expression
                            # <- return
                        # <- if: if block
                        # -> if: else/end block
                        # <- if: else/end block
                        # <- if
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # i
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 6
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: +
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # i
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                    # -> constant
                    # 1
                    # <- constant
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # number
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # number
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # isPrime
                    # -> function call: arguments
                        # -> identifier
                        # number
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, isPrime, _, _)
2: (get_param, n, _, _)
3: (less_than_equal_to, n, 1, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 2, _, _)
6: (label, L1, _, _)
7: (less_than_equal_to, n, 3, t2)
8: (jump_if_false, t2, L2, _)
9: (return, 1, _, _)
10: (label, L2, _, _)
11: (modulo, n, 2, t3)
12: (equal, t3, 0, t4)
13: (jump_if_false, t4, L3, _)
14: (return, 2, _, _)
15: (label, L3, _, _)
16: (modulo, n, 3, t5)
17: (equal, t5, 0, t6)
18: (jump_if_false, t6, L4, _)
19: (return, 2, _, _)
20: (label, L4, _, _)
21: (assign, i, 5, _)
22: (label, L5, _, _)
23: (multiplication, i, i, t7)
24: (less_than_equal_to, t7, n, t8)
25: (jump_if_false, t8, L8, _)
26: (modulo, n, i, t9)
27: (equal, t9, 0, t10)
28: (jump_if_false, t10, L6, _)
29: (return, 2, _, _)
30: (label, L6, _, _)
31: (addition, i, 2, t11)
32: (modulo, n, t11, t12)
33: (equal, t12, 0, t13)
34: (jump_if_false, t13, L7, _)
35: (return, 2, _, _)
36: (label, L7, _, _)
37: (addition, i, 6, t14)
38: (assign, i, t14, _)
39: (goto, L5, _, _)
40: (label, L8, _, _)
41: (return, 1, _, _)
42: (function, main, _, _)
43: (param_list, 0, _, _)
44: (call, input, 0, t15)
45: (assign, number, t15, _)
46: (param_list, 2, _, _)
47: (param_list, 1, _, _)
48: (set_param, number, _, _)
49: (call, isPrime, 1, t16)
50: (set_param, t16, _, _)
51: (set_param, 2, _, _)
52: (call, output, 2, t17)
53: (halt, _, _, _)

********** Código objeto **********

isPrime:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, -1($sp)
    2:	lw	$s0, -1($sp)
    3:	li	$t0, 1
    4:	blet	$s0, $t0, L1
    5:	li	$t1, 2
    6:	mov	$v0, $t1
    7:	jr	$ra
.L1	
    8:	li	$t2, 3
    9:	blet	$s0, $t2, L2
    10:	li	$t3, 1
    11:	mov	$v0, $t3
    12:	jr	$ra
.L2	
    13:	modi	$t4, $s0, 2
    14:	li	$t5, 0
    15:	beq	$t4, $t5, L3
    16:	li	$t6, 2
    17:	mov	$v0, $t6
    18:	jr	$ra
.L3	
    19:	modi	$t7, $s0, 3
    20:	li	$t8, 0
    21:	beq	$t7, $t8, L4
    22:	li	$t9, 2
    23:	mov	$v0, $t9
    24:	jr	$ra
.L4	
    25:	li	$t0, 5
    26:	sw	$t0, 0($sp)
.L5	
    27:	lw	$s1, 0($sp)
    28:	mul	$t0, $s1, $s1
    29:	blet	$t0, $s0, L8
    30:	mod	$t1, $s0, $s1
    31:	li	$t2, 0
    32:	beq	$t1, $t2, L6
    33:	li	$t3, 2
    34:	mov	$v0, $t3
    35:	jr	$ra
.L6	
    36:	addi	$t4, $s1, 2
    37:	mod	$t5, $s0, $t4
    38:	li	$t6, 0
    39:	beq	$t5, $t6, L7
    40:	li	$t7, 2
    41:	mov	$v0, $t7
    42:	jr	$ra
.L7	
    43:	addi	$t8, $s1, 6
    44:	sw	$t8, 0($sp)
    45:	j	L5
.L8	
    46:	li	$t9, 1
    47:	mov	$v0, $t9
    48:	jr	$ra

main:
    49:	addi	$sp, $sp, 0
    50:	in	$t0
    51:	sw	$t0, 0($sp)
    52:	lw	$s0, 0($sp)
    53:	mov	$a0, $s0
    54:	jal	isPrime
    55:	mov	$t1, $v0
    56:	subi	$sp, $sp, 3
    57:	mov	$a0, $t1
    58:	li	$a1, 2
    59:	out	$a0, 2
    60:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011111_00000000000000000000110010; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000011; 	// addi
memoria_instrucoes[2] = 32'b011000_00011_00111_1111111111111111; 	// sw
memoria_instrucoes[3] = 32'b010101_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[4] = 32'b010110_00000_10101_0000000000000001; 	// li
memoria_instrucoes[5] = 32'b011100_01011_10101_0000000000001001; 	// blet
memoria_instrucoes[6] = 32'b010110_00000_10110_0000000000000010; 	// li
memoria_instrucoes[7] = 32'b010100_10110_00001_0000000000000000; 	// mov
memoria_instrucoes[8] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[9] = 32'b010110_00000_10111_0000000000000011; 	// li
memoria_instrucoes[10] = 32'b011100_01011_10111_0000000000001110; 	// blet
memoria_instrucoes[11] = 32'b010110_00000_11000_0000000000000001; 	// li
memoria_instrucoes[12] = 32'b010100_11000_00001_0000000000000000; 	// mov
memoria_instrucoes[13] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[14] = 32'b001010_01011_11001_0000000000000010; 	// modi
memoria_instrucoes[15] = 32'b010110_00000_11010_0000000000000000; 	// li
memoria_instrucoes[16] = 32'b011001_11001_11010_0000000000010100; 	// beq
memoria_instrucoes[17] = 32'b010110_00000_11011_0000000000000010; 	// li
memoria_instrucoes[18] = 32'b010100_11011_00001_0000000000000000; 	// mov
memoria_instrucoes[19] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[20] = 32'b001010_01011_11100_0000000000000011; 	// modi
memoria_instrucoes[21] = 32'b010110_00000_11101_0000000000000000; 	// li
memoria_instrucoes[22] = 32'b011001_11100_11101_0000000000011010; 	// beq
memoria_instrucoes[23] = 32'b010110_00000_11110_0000000000000010; 	// li
memoria_instrucoes[24] = 32'b010100_11110_00001_0000000000000000; 	// mov
memoria_instrucoes[25] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[26] = 32'b010110_00000_10101_0000000000000101; 	// li
memoria_instrucoes[27] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[28] = 32'b010101_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[29] = 32'b000101_01100_01100_10101_00000000000; 	// mul
memoria_instrucoes[30] = 32'b011100_10101_01011_0000000000101111; 	// blet
memoria_instrucoes[31] = 32'b001001_01011_01100_10110_00000000000; 	// mod
memoria_instrucoes[32] = 32'b010110_00000_10111_0000000000000000; 	// li
memoria_instrucoes[33] = 32'b011001_10110_10111_0000000000100101; 	// beq
memoria_instrucoes[34] = 32'b010110_00000_11000_0000000000000010; 	// li
memoria_instrucoes[35] = 32'b010100_11000_00001_0000000000000000; 	// mov
memoria_instrucoes[36] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[37] = 32'b000010_01100_11001_0000000000000010; 	// addi
memoria_instrucoes[38] = 32'b001001_01011_11001_11010_00000000000; 	// mod
memoria_instrucoes[39] = 32'b010110_00000_11011_0000000000000000; 	// li
memoria_instrucoes[40] = 32'b011001_11010_11011_0000000000101100; 	// beq
memoria_instrucoes[41] = 32'b010110_00000_11100_0000000000000010; 	// li
memoria_instrucoes[42] = 32'b010100_11100_00001_0000000000000000; 	// mov
memoria_instrucoes[43] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[44] = 32'b000010_01100_11101_0000000000000110; 	// addi
memoria_instrucoes[45] = 32'b011000_00011_11101_0000000000000000; 	// sw
memoria_instrucoes[46] = 32'b011111_00000000000000000000011100; 	// j
memoria_instrucoes[47] = 32'b010110_00000_11110_0000000000000001; 	// li
memoria_instrucoes[48] = 32'b010100_11110_00001_0000000000000000; 	// mov
memoria_instrucoes[49] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[50] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[51] = 32'b100010_00000_10101_0000000000000000; 	// in
memoria_instrucoes[52] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[53] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[54] = 32'b010100_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[55] = 32'b100000_00000000000000000000000001; 	// jal
memoria_instrucoes[56] = 32'b010100_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[57] = 32'b000100_00011_00011_0000000000000011; 	// subi
memoria_instrucoes[58] = 32'b010100_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[59] = 32'b010110_00000_01000_0000000000000010; 	// li
memoria_instrucoes[60] = 32'b100011_00000_00111_0000000000000010; 	// out
memoria_instrucoes[61] = 32'b111111_00000000000000000000000000; 	// halt
