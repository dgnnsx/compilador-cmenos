# Compilação C- para código intermediário
# Arquivo: testes/eh_numero_primo.txt
# Fim da execução.

********** Código intermediário **********

1: (function, isPrime, _, _)
2: (get_param, n, _, _)
3: (less_than_equal_to, n, 1, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 2, _, _)
6: (label, L1, _, _)
7: (less_than_equal_to, n, 3, t2)
8: (jump_if_false, t2, L2, _)
9: (return, 1, _, _)
10: (label, L2, _, _)
11: (modulo, n, 2, t3)
12: (equal, t3, 0, t4)
13: (jump_if_false, t4, L3, _)
14: (return, 2, _, _)
15: (label, L3, _, _)
16: (modulo, n, 3, t5)
17: (equal, t5, 0, t6)
18: (jump_if_false, t6, L4, _)
19: (return, 2, _, _)
20: (label, L4, _, _)
21: (assign, i, 5, _)
22: (label, L5, _, _)
23: (multiplication, i, i, t7)
24: (less_than_equal_to, t7, n, t8)
25: (jump_if_false, t8, L8, _)
26: (modulo, n, i, t9)
27: (equal, t9, 0, t10)
28: (jump_if_false, t10, L6, _)
29: (return, 2, _, _)
30: (label, L6, _, _)
31: (addition, i, 2, t11)
32: (modulo, n, t11, t12)
33: (equal, t12, 0, t13)
34: (jump_if_false, t13, L7, _)
35: (return, 2, _, _)
36: (label, L7, _, _)
37: (addition, i, 6, t14)
38: (assign, i, t14, _)
39: (goto, L5, _, _)
40: (label, L8, _, _)
41: (return, 1, _, _)
42: (function, main, _, _)
43: (param_list, 0, _, _)
44: (call, input, 0, t15)
45: (assign, number, t15, _)
46: (param_list, 2, _, _)
47: (param_list, 1, _, _)
48: (set_param, number, _, _)
49: (call, isPrime, 1, t16)
50: (set_param, t16, _, _)
51: (set_param, 2, _, _)
52: (call, output, 2, t17)
53: (halt, _, _, _)

********** Código objeto **********

isPrime:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, -1($sp)
    2:	lw	$s0, -1($sp)
    3:	li	$t1, 1
    4:	let	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 2
    7:	mov	$v0, $t2
    8:	jr	$ra
.L1	
    9:	li	$t4, 3
    10:	let	$t3, $s0, $t4
    11:	jf	$t3, L2
    12:	li	$t5, 1
    13:	mov	$v0, $t5
    14:	jr	$ra
.L2	
    15:	modi	$t6, $s0, 2
    16:	li	$t8, 0
    17:	eq	$t7, $t6, $t8
    18:	jf	$t7, L3
    19:	li	$t9, 2
    20:	mov	$v0, $t9
    21:	jr	$ra
.L3	
    22:	modi	$t0, $s0, 3
    23:	li	$t1, 0
    24:	eq	$t0, $t0, $t1
    25:	jf	$t0, L4
    26:	li	$t2, 2
    27:	mov	$v0, $t2
    28:	jr	$ra
.L4	
    29:	li	$t3, 5
    30:	sw	$t3, 0($sp)
.L5	
    31:	lw	$s1, 0($sp)
    32:	mul	$t4, $s1, $s1
    33:	let	$t5, $t4, $s0
    34:	jf	$t5, L8
    35:	mod	$t6, $s0, $s1
    36:	li	$t8, 0
    37:	eq	$t7, $t6, $t8
    38:	jf	$t7, L6
    39:	li	$t9, 2
    40:	mov	$v0, $t9
    41:	jr	$ra
.L6	
    42:	addi	$t0, $s1, 2
    43:	mod	$t0, $s0, $t0
    44:	li	$t2, 0
    45:	eq	$t1, $t0, $t2
    46:	jf	$t1, L7
    47:	li	$t3, 2
    48:	mov	$v0, $t3
    49:	jr	$ra
.L7	
    50:	addi	$t4, $s1, 6
    51:	sw	$t4, 0($sp)
    52:	j	L5
.L8	
    53:	li	$t5, 1
    54:	mov	$v0, $t5
    55:	jr	$ra

main:
    56:	addi	$sp, $sp, 0
    57:	in	$t0
    58:	sw	$t0, 0($sp)
    59:	lw	$s0, 0($sp)
    60:	mov	$a0, $s0
    61:	jal	isPrime
    62:	mov	$t1, $v0
    63:	subi	$sp, $sp, 3
    64:	mov	$a0, $t1
    65:	li	$a1, 2
    66:	out	$a0, 2
    67:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b100101_00000000000000000000111001;		// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000011; 	// addi
memoria_instrucoes[2] = 32'b011110_00011_00111_1111111111111111; 	// sw
memoria_instrucoes[3] = 32'b011011_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[4] = 32'b011100_00000_10110_0000000000000001; 	// li
memoria_instrucoes[5] = 32'b100010_01011_10110_10101_00000000000; 	// let
memoria_instrucoes[6] = 32'b100110_10101_00000_0000000000001010; 	// jf
memoria_instrucoes[7] = 32'b011100_00000_10111_0000000000000010; 	// li
memoria_instrucoes[8] = 32'b011010_10111_00001_0000000000000000; 	// mov
memoria_instrucoes[9] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[10] = 32'b011100_00000_11001_0000000000000011; 	// li
memoria_instrucoes[11] = 32'b100010_01011_11001_11000_00000000000; 	// let
memoria_instrucoes[12] = 32'b100110_11000_00000_0000000000010000; 	// jf
memoria_instrucoes[13] = 32'b011100_00000_11010_0000000000000001; 	// li
memoria_instrucoes[14] = 32'b011010_11010_00001_0000000000000000; 	// mov
memoria_instrucoes[15] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[16] = 32'b001010_01011_11011_0000000000000010; 	// modi
memoria_instrucoes[17] = 32'b011100_00000_11101_0000000000000000; 	// li
memoria_instrucoes[18] = 32'b011111_11011_11101_11100_00000000000; 	// eq
memoria_instrucoes[19] = 32'b100110_11100_00000_0000000000010111; 	// jf
memoria_instrucoes[20] = 32'b011100_00000_11110_0000000000000010; 	// li
memoria_instrucoes[21] = 32'b011010_11110_00001_0000000000000000; 	// mov
memoria_instrucoes[22] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[23] = 32'b001010_01011_10101_0000000000000011; 	// modi
memoria_instrucoes[24] = 32'b011100_00000_10110_0000000000000000; 	// li
memoria_instrucoes[25] = 32'b011111_10101_10110_10101_00000000000; 	// eq
memoria_instrucoes[26] = 32'b100110_10101_00000_0000000000011110; 	// jf
memoria_instrucoes[27] = 32'b011100_00000_10111_0000000000000010; 	// li
memoria_instrucoes[28] = 32'b011010_10111_00001_0000000000000000; 	// mov
memoria_instrucoes[29] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[30] = 32'b011100_00000_11000_0000000000000101; 	// li
memoria_instrucoes[31] = 32'b011110_00011_11000_0000000000000000; 	// sw
memoria_instrucoes[32] = 32'b011011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[33] = 32'b000101_01100_01100_11001_00000000000; 	// mul
memoria_instrucoes[34] = 32'b100010_11001_01011_11010_00000000000; 	// let
memoria_instrucoes[35] = 32'b100110_11010_00000_0000000000110110; 	// jf
memoria_instrucoes[36] = 32'b001001_01011_01100_11011_00000000000; 	// mod
memoria_instrucoes[37] = 32'b011100_00000_11101_0000000000000000; 	// li
memoria_instrucoes[38] = 32'b011111_11011_11101_11100_00000000000; 	// eq
memoria_instrucoes[39] = 32'b100110_11100_00000_0000000000101011; 	// jf
memoria_instrucoes[40] = 32'b011100_00000_11110_0000000000000010; 	// li
memoria_instrucoes[41] = 32'b011010_11110_00001_0000000000000000; 	// mov
memoria_instrucoes[42] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[43] = 32'b000010_01100_10101_0000000000000010; 	// addi
memoria_instrucoes[44] = 32'b001001_01011_10101_10101_00000000000; 	// mod
memoria_instrucoes[45] = 32'b011100_00000_10111_0000000000000000; 	// li
memoria_instrucoes[46] = 32'b011111_10101_10111_10110_00000000000; 	// eq
memoria_instrucoes[47] = 32'b100110_10110_00000_0000000000110011; 	// jf
memoria_instrucoes[48] = 32'b011100_00000_11000_0000000000000010; 	// li
memoria_instrucoes[49] = 32'b011010_11000_00001_0000000000000000; 	// mov
memoria_instrucoes[50] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[51] = 32'b000010_01100_11001_0000000000000110; 	// addi
memoria_instrucoes[52] = 32'b011110_00011_11001_0000000000000000; 	// sw
memoria_instrucoes[53] = 32'b100101_00000000000000000000100000; 	// j
memoria_instrucoes[54] = 32'b011100_00000_11010_0000000000000001; 	// li
memoria_instrucoes[55] = 32'b011010_11010_00001_0000000000000000; 	// mov
memoria_instrucoes[56] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[57] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[58] = 32'b101001_00000_10101_0000000000000000; 	// in
memoria_instrucoes[59] = 32'b011110_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[60] = 32'b011011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[61] = 32'b011010_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[62] = 32'b100111_00000000000000000000000001; 	// jal
memoria_instrucoes[63] = 32'b011010_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[64] = 32'b000100_00011_00011_0000000000000011; 	// subi
memoria_instrucoes[65] = 32'b011010_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[66] = 32'b011100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[67] = 32'b101010_00000_00111_0000000000000010; 	// out
memoria_instrucoes[68] = 32'b111111_00000000000000000000000000; 	// halt
