# Compilação C- para código intermediário
# Arquivo: testes/fatorial.txt
    # -> type int
        # -> function declaration
        # input
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # output
        # <- function declaration
    # <- type void

    # -> type int
        # -> function declaration
        # fatorial
                # -> type int
                    # -> identifier
                    # result
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> constant
                    # 1
                    # <- constant
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # result
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> while
                # -> while: test expression
                    # -> arithmetic operator
                    # -> arithmetic operator: left argument
                        # -> identifier
                        # number
                        # <- identifier
                    # <- arithmetic operator: left argument
                    # -> arithmetic operator: right argument
                        # -> constant
                        # 0
                        # <- constant
                    # <- arithmetic operator: right argument
                    # relational operator: >
                    # <- Operator
                # <- while: test expression
                # -> while: while block
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # result
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> identifier
                                # number
                                # <- identifier
                            # <- arithmetic operator: right argument
                            # arithmetic operator: *
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # result
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                        # -> assign
                        # -> assign: right argument
                            # -> arithmetic operator
                            # -> arithmetic operator: left argument
                                # -> identifier
                                # number
                                # <- identifier
                            # <- arithmetic operator: left argument
                            # -> arithmetic operator: right argument
                                # -> constant
                                # 1
                                # <- constant
                            # <- arithmetic operator: right argument
                            # arithmetic operator: -
                            # <- Operator
                        # <- assign: right argument
                        # -> assign: left argument
                            # -> identifier
                            # number
                            # <- identifier
                        # <- assign: left argument
                        # <- assign
                # <- while: while block
                # <- while
                # -> return
                # -> return: expression
                    # -> identifier
                    # result
                    # <- identifier
                # <- return: expression
                # <- return
        # <- function declaration
    # <- type int

    # -> type void
        # -> function declaration
        # main
                # -> type int
                    # -> identifier
                    # number
                    # <- identifier
                # <- type int

                # -> assign
                # -> assign: right argument
                    # -> function call
                    # input
                    # -> function call: arguments
                    # <- function call: arguments
                    # <- function call
                # <- assign: right argument
                # -> assign: left argument
                    # -> identifier
                    # number
                    # <- identifier
                # <- assign: left argument
                # <- assign
                # -> function call
                # output
                # -> function call: arguments
                    # -> function call
                    # fatorial
                    # -> function call: arguments
                        # -> identifier
                        # number
                        # <- identifier
                    # <- function call: arguments
                    # <- function call
                    # -> constant
                    # 2
                    # <- constant
                # <- function call: arguments
                # <- function call
        # <- function declaration
    # <- type void

# Fim da execução.

********** Código intermediário **********

1: (function, fatorial, _, _)
2: (get_param, number, _, _)
3: (assign, result, 1, _)
4: (label, L1, _, _)
5: (greater_than, number, 0, t1)
6: (jump_if_false, t1, L2, _)
7: (multiplication, result, number, t2)
8: (assign, result, t2, _)
9: (subtraction, number, 1, t3)
10: (assign, number, t3, _)
11: (goto, L1, _, _)
12: (label, L2, _, _)
13: (return, result, _, _)
14: (function, main, _, _)
15: (param_list, 0, _, _)
16: (call, input, 0, t4)
17: (assign, number, t4, _)
18: (param_list, 2, _, _)
19: (param_list, 1, _, _)
20: (set_param, number, _, _)
21: (call, fatorial, 1, t5)
22: (set_param, t5, _, _)
23: (set_param, 2, _, _)
24: (call, output, 2, t6)
25: (halt, _, _, _)

********** Código objeto **********

fatorial:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, -1($sp)
    2:	li	$t0, 1
    3:	sw	$t0, 0($sp)
.L1	
    4:	lw	$s0, -1($sp)
    5:	li	$t1, 0
    6:	bgt	$s0, $t1, L2
    7:	lw	$s1, 0($sp)
    8:	mul	$t2, $s1, $s0
    9:	sw	$t2, 0($sp)
    10:	subi	$t3, $s0, 1
    11:	sw	$t3, -1($sp)
    12:	j	L1
.L2	
    13:	lw	$s2, 0($sp)
    14:	mov	$v0, $s2
    15:	jr	$ra

main:
    16:	addi	$sp, $sp, 0
    17:	in	$t0
    18:	sw	$t0, 0($sp)
    19:	lw	$s0, 0($sp)
    20:	mov	$a0, $s0
    21:	jal	fatorial
    22:	mov	$t1, $v0
    23:	subi	$sp, $sp, 3
    24:	mov	$a0, $t1
    25:	li	$a1, 2
    26:	out	$a0, 2
    27:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b011111_00000000000000000000010001; 	// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000011; 	// addi
memoria_instrucoes[2] = 32'b011000_00011_00111_1111111111111111; 	// sw
memoria_instrucoes[3] = 32'b010110_00000_10101_0000000000000001; 	// li
memoria_instrucoes[4] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[5] = 32'b010101_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[6] = 32'b010110_00000_10110_0000000000000000; 	// li
memoria_instrucoes[7] = 32'b011101_01011_10110_0000000000001110; 	// bgt
memoria_instrucoes[8] = 32'b010101_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[9] = 32'b000101_01100_01011_10111_00000000000; 	// mul
memoria_instrucoes[10] = 32'b011000_00011_10111_0000000000000000; 	// sw
memoria_instrucoes[11] = 32'b000100_01011_11000_0000000000000001; 	// subi
memoria_instrucoes[12] = 32'b011000_00011_11000_1111111111111111; 	// sw
memoria_instrucoes[13] = 32'b011111_00000000000000000000000101; 	// j
memoria_instrucoes[14] = 32'b010101_00011_01101_0000000000000000; 	// lw
memoria_instrucoes[15] = 32'b010100_01101_00001_0000000000000000; 	// mov
memoria_instrucoes[16] = 32'b100001_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[17] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[18] = 32'b100010_00000_10101_0000000000000000; 	// in
memoria_instrucoes[19] = 32'b011000_00011_10101_0000000000000000; 	// sw
memoria_instrucoes[20] = 32'b010101_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[21] = 32'b010100_01011_00111_0000000000000000; 	// mov
memoria_instrucoes[22] = 32'b100000_00000000000000000000000001; 	// jal
memoria_instrucoes[23] = 32'b010100_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[24] = 32'b000100_00011_00011_0000000000000011; 	// subi
memoria_instrucoes[25] = 32'b010100_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[26] = 32'b010110_00000_01000_0000000000000010; 	// li
memoria_instrucoes[27] = 32'b100011_00000_00111_0000000000000010; 	// out
memoria_instrucoes[28] = 32'b111111_00000000000000000000000000; 	// halt
