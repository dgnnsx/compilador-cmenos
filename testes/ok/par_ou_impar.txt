# Compilação C- para código intermediário
# Arquivo: testes/par_ou_impar.txt
# Fim da execução.

********** Código intermediário **********

1: (function, parOuImpar, _, _)
2: (get_param, n, _, _)
3: (modulo, n, 2, t1)
4: (equal, t1, 0, t2)
5: (jump_if_false, t2, L1, _)
6: (param_list, 2, _, _)
7: (set_param, 2, _, _)
8: (set_param, 2, _, _)
9: (call, output, 2, t3)
10: (goto, L2, _, _)
11: (label, L1, _, _)
12: (param_list, 2, _, _)
13: (set_param, 1, _, _)
14: (set_param, 2, _, _)
15: (call, output, 2, t4)
16: (label, L2, _, _)
17: (return, _, _, _)
18: (function, main, _, _)
19: (param_list, 0, _, _)
20: (call, input, 0, t5)
21: (assign, n, t5, _)
22: (param_list, 1, _, _)
23: (set_param, n, _, _)
24: (call, parOuImpar, 1, t6)
25: (halt, _, _, _)

********** Código objeto **********

parOuImpar:
    0:	addi	$sp, $sp, 2
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	modi	$t0, $s0, 2
    4:	li	$t2, 0
    5:	lt	$t1, $t0, $t2
    6:	jf	$t1, L1
    7:	li	$a0, 2
    8:	li	$a1, 2
    9:	out	$a0, 2
    10:	j	L2
.L1	
    11:	li	$a0, 1
    12:	li	$a1, 2
    13:	out	$a0, 2
.L2	
    14:	jr	$ra

main:
    15:	addi	$sp, $sp, 1
    16:	in	$t0
    17:	sw	$t0, 0($sp)
    18:	lw	$s0, 0($sp)
    19:	mov	$a0, $s0
    20:	jal	parOuImpar
    21:	mov	$t1, $v0
    22:	subi	$sp, $sp, 2
    23:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000010000;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000010; 	// addi
assign rom[2] = 32'b010010_11110_00110_0000000000000000; 	// sw
assign rom[3] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[4] = 32'b000101_01010_10100_0000000000000010; 	// modi
assign rom[5] = 32'b010000_00000_10110_0000000000000000; 	// li
assign rom[6] = 32'b000000_10100_10110_10101_00000_001100; 	// lt
assign rom[7] = 32'b010101_10101_00000_0000000000001100; 	// jf
assign rom[8] = 32'b010000_00000_00110_0000000000000010; 	// li
assign rom[9] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[10] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[11] = 32'b010110_00000000000000000000001111; 	// j
assign rom[12] = 32'b010000_00000_00110_0000000000000001; 	// li
assign rom[13] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[14] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[15] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[16] = 32'b000001_11110_11110_0000000000000001; 	// addi
assign rom[17] = 32'b010011_00000_10100_0000000000000000; 	// in
assign rom[18] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[19] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[20] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign rom[21] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[22] = 32'b001110_00001_10101_0000000000000000; 	// mov
assign rom[23] = 32'b000010_11110_11110_0000000000000010; 	// subi
assign rom[24] = 32'b011000_00000000000000000000000000; 	// halt
