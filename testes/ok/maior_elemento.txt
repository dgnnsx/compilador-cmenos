# Compilação C- para código intermediário
# Arquivo: testes/ok/maior_elemento.txt
# Fim da execução.

********** Código intermediário **********

1: (function, findMax, _, _)
2: (get_param, vetor, _, _)
3: (get_param, tam, _, _)
4: (assign, i, 0, _)
5: (assign, max, 0, _)
6: (label, L1, _, _)
7: (less_than, i, tam, t1)
8: (jump_if_false, t1, L3, _)
9: (vector_value, vetor, i, t2)
10: (less_than, max, t2, t3)
11: (jump_if_false, t3, L2, _)
12: (vector_value, vetor, i, t4)
13: (assign, max, t4, _)
14: (assign, pos, i, _)
15: (label, L2, _, _)
16: (addition, i, 1, t5)
17: (assign, i, t5, _)
18: (goto, L1, _, _)
19: (label, L3, _, _)
20: (param_list, 2, _, _)
21: (set_param, pos, _, _)
22: (set_param, 1, _, _)
23: (call, output, 2, t6)
24: (param_list, 2, _, _)
25: (set_param, max, _, _)
26: (set_param, 2, _, _)
27: (call, output, 2, t7)
28: (return, _, _, _)
29: (function, main, _, _)
30: (vector_address, vetor, 0, t9)
31: (assign, vetor, 12, 0)
32: (vector_address, vetor, 1, t10)
33: (assign, vetor, 41, 1)
34: (vector_address, vetor, 2, t11)
35: (assign, vetor, 23, 2)
36: (vector_address, vetor, 3, t12)
37: (assign, vetor, 98, 3)
38: (vector_address, vetor, 4, t13)
39: (assign, vetor, 33, 4)
40: (vector_address, vetor, 5, t14)
41: (assign, vetor, 21, 5)
42: (param_list, 2, _, _)
43: (set_param, vetor, _, _)
44: (set_param, 6, _, _)
45: (call, findMax, 2, t15)
46: (halt, _, _, _)

********** Código objeto **********

findMax:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	sw	$a1, -3($sp)
    3:	li	$t0, 0
    4:	sw	$t0, -2($sp)
    5:	li	$t1, 0
    6:	sw	$t1, 0($sp)
.L1	
    7:	lw	$s0, -2($sp)
    8:	lw	$s1, -3($sp)
    9:	lt	$t2, $s0, $s1
    10:	jf	$t2, L3
    11:	lw	$s2, -4($sp)
    12:	add	$t3, $s2, $s0
    13:	lw	$t3, 0($t3)
    14:	lw	$s3, 0($sp)
    15:	lt	$t4, $s3, $t3
    16:	jf	$t4, L2
    17:	add	$t5, $s2, $s0
    18:	lw	$t5, 0($t5)
    19:	sw	$t5, 0($sp)
    20:	sw	$s0, -1($sp)
.L2	
    21:	addi	$t6, $s0, 1
    22:	sw	$t6, -2($sp)
    23:	j	L1
.L3	
    24:	lw	$s4, -1($sp)
    25:	mov	$a0, $s4
    26:	li	$a1, 1
    27:	out	$a0, 1
    28:	lw	$s5, 0($sp)
    29:	mov	$a0, $s5
    30:	li	$a1, 2
    31:	out	$a0, 2
    32:	jr	$ra

main:
    33:	addi	$sp, $sp, 6
    34:	la	$s0, -5($sp)
    35:	li	$t0, 12
    36:	sw	$t0, 0($s0)
    37:	li	$t1, 41
    38:	sw	$t1, 1($s0)
    39:	li	$t2, 23
    40:	sw	$t2, 2($s0)
    41:	li	$t3, 98
    42:	sw	$t3, 3($s0)
    43:	li	$t4, 33
    44:	sw	$t4, 4($s0)
    45:	li	$t5, 21
    46:	sw	$t5, 5($s0)
    47:	la	$a0, -5($sp)
    48:	li	$a1, 6
    49:	jal	findMax
    50:	mov	$s1, $v0
    51:	subi	$sp, $sp, 7
    52:	halt	

********** Código binário **********

disk[31] <= 32'b010110_00000000000000000001000001;		// Jump to Main
disk[32] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[33] <= 32'b010010_11110_00110_1111111111111100; 	// sw
disk[34] <= 32'b010010_11110_00111_1111111111111101; 	// sw
disk[35] <= 32'b010000_00000_10100_0000000000000000; 	// li
disk[36] <= 32'b010010_11110_10100_1111111111111110; 	// sw
disk[37] <= 32'b010000_00000_10101_0000000000000000; 	// li
disk[38] <= 32'b010010_11110_10101_0000000000000000; 	// sw
disk[39] <= 32'b001111_11110_01010_1111111111111110; 	// lw
disk[40] <= 32'b001111_11110_01011_1111111111111101; 	// lw
disk[41] <= 32'b000000_01010_01011_10110_00000_001110; 	// lt
disk[42] <= 32'b010101_10110_00000_0000000000111000; 	// jf
disk[43] <= 32'b001111_11110_01100_1111111111111100; 	// lw
disk[44] <= 32'b000000_01100_01010_10111_00000_000000; 	// add
disk[45] <= 32'b001111_10111_10111_0000000000000000; 	// lw
disk[46] <= 32'b001111_11110_01101_0000000000000000; 	// lw
disk[47] <= 32'b000000_01101_10111_11000_00000_001110; 	// lt
disk[48] <= 32'b010101_11000_00000_0000000000110101; 	// jf
disk[49] <= 32'b000000_01100_01010_11001_00000_000000; 	// add
disk[50] <= 32'b001111_11001_11001_0000000000000000; 	// lw
disk[51] <= 32'b010010_11110_11001_0000000000000000; 	// sw
disk[52] <= 32'b010010_11110_01010_1111111111111111; 	// sw
disk[53] <= 32'b000001_01010_11010_0000000000000001; 	// addi
disk[54] <= 32'b010010_11110_11010_1111111111111110; 	// sw
disk[55] <= 32'b010110_00000000000000000000100111; 	// j
disk[56] <= 32'b001111_11110_01110_1111111111111111; 	// lw
disk[57] <= 32'b001110_01110_00110_0000000000000000; 	// mov
disk[58] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[59] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[60] <= 32'b001111_11110_01111_0000000000000000; 	// lw
disk[61] <= 32'b001110_01111_00110_0000000000000000; 	// mov
disk[62] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[63] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[64] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[65] <= 32'b000001_11110_11110_0000000000000110; 	// addi
disk[66] <= 32'b010001_11110_01010_1111111111111011; 	// la
disk[67] <= 32'b010000_00000_10100_0000000000001100; 	// li
disk[68] <= 32'b010010_01010_10100_0000000000000000; 	// sw
disk[69] <= 32'b010000_00000_10101_0000000000101001; 	// li
disk[70] <= 32'b010010_01010_10101_0000000000000001; 	// sw
disk[71] <= 32'b010000_00000_10110_0000000000010111; 	// li
disk[72] <= 32'b010010_01010_10110_0000000000000010; 	// sw
disk[73] <= 32'b010000_00000_10111_0000000001100010; 	// li
disk[74] <= 32'b010010_01010_10111_0000000000000011; 	// sw
disk[75] <= 32'b010000_00000_11000_0000000000100001; 	// li
disk[76] <= 32'b010010_01010_11000_0000000000000100; 	// sw
disk[77] <= 32'b010000_00000_11001_0000000000010101; 	// li
disk[78] <= 32'b010010_01010_11001_0000000000000101; 	// sw
disk[79] <= 32'b010001_11110_00110_1111111111111011; 	// la
disk[80] <= 32'b010000_00000_00111_0000000000000110; 	// li
disk[81] <= 32'b010111_00000000000000000000100000; 	// jal
disk[82] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[83] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[84] <= 32'b011000_00000000000000000000000000; 	// halt
