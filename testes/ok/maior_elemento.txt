# Compilação C- para código intermediário
# Arquivo: testes/ok/maior_elemento.txt
# Fim da execução.

********** Código intermediário **********

1: (function, findMax, _, _)
2: (get_param, vetor, _, _)
3: (get_param, tam, _, _)
4: (assign, i, 0, _)
5: (assign, max, 0, _)
6: (param_list, 2, _, _)
7: (vector_value, vetor, 1, t1)
8: (set_param, t1, _, _)
9: (set_param, 2, _, _)
10: (call, output, 2, t2)
11: (label, L1, _, _)
12: (less_than, i, tam, t3)
13: (jump_if_false, t3, L3, _)
14: (vector_value, vetor, i, t4)
15: (less_than, max, t4, t5)
16: (jump_if_false, t5, L2, _)
17: (vector_value, vetor, i, t6)
18: (assign, max, t6, _)
19: (assign, pos, i, _)
20: (label, L2, _, _)
21: (addition, i, 1, t7)
22: (assign, i, t7, _)
23: (goto, L1, _, _)
24: (label, L3, _, _)
25: (return, _, _, _)
26: (function, main, _, _)
27: (vector_address, vetor, 0, t9)
28: (assign, vetor, 12, 0)
29: (vector_address, vetor, 1, t10)
30: (assign, vetor, 41, 1)
31: (vector_address, vetor, 2, t11)
32: (assign, vetor, 23, 2)
33: (vector_address, vetor, 3, t12)
34: (assign, vetor, 98, 3)
35: (vector_address, vetor, 4, t13)
36: (assign, vetor, 33, 4)
37: (vector_address, vetor, 5, t14)
38: (assign, vetor, 21, 5)
39: (param_list, 2, _, _)
40: (vector_value, vetor, 1, t15)
41: (set_param, t15, _, _)
42: (set_param, 1, _, _)
43: (call, output, 2, t16)
44: (param_list, 2, _, _)
45: (set_param, vetor, _, _)
46: (set_param, 6, _, _)
47: (call, findMax, 2, t17)
48: (halt, _, _, _)

********** Código objeto **********

    1:	li	$t0, main
    2:	add	$t0, $t0, $ms
    3:	jr	$t0

findMax:
    4:	addi	$sp, $sp, 7
    5:	sw	$a0, -4($sp)
    6:	sw	$a1, -3($sp)
    7:	li	$t0, 0
    8:	sw	$t0, -2($sp)
    9:	li	$t1, 0
    10:	sw	$t1, 0($sp)
    11:	lw	$s0, -4($sp)
    12:	lw	$t2, 1($s0)
    13:	mov	$a0, $t2
    14:	li	$a1, 2
    15:	out	$a0, 2
.L1	
    16:	lw	$s1, -2($sp)
    17:	lw	$s2, -3($sp)
    18:	lt	$t3, $s1, $s2
    19:	li	$t4, L3
    20:	add	$t4, $t4, $ms
    21:	jf	$t4, $t3
    22:	add	$t5, $s0, $s1
    23:	lw	$t5, 0($t5)
    24:	lw	$s3, 0($sp)
    25:	lt	$t6, $s3, $t5
    26:	li	$t7, L2
    27:	add	$t7, $t7, $ms
    28:	jf	$t7, $t6
    29:	add	$t8, $s0, $s1
    30:	lw	$t8, 0($t8)
    31:	sw	$t8, 0($sp)
    32:	lw	$s3, 0($sp)
    33:	sw	$s1, -1($sp)
.L2	
    34:	addi	$t9, $s1, 1
    35:	sw	$t9, -2($sp)
    36:	lw	$s1, -2($sp)
    37:	li	$t0, L1
    38:	add	$t0, $t0, $ms
    39:	jr	$t0
.L3	
    40:	jr	$ra

main:
    41:	addi	$sp, $sp, 6
    42:	la	$s0, -5($sp)
    43:	li	$t0, 12
    44:	sw	$t0, 0($s0)
    45:	li	$t1, 41
    46:	sw	$t1, 1($s0)
    47:	li	$t2, 23
    48:	sw	$t2, 2($s0)
    49:	li	$t3, 98
    50:	sw	$t3, 3($s0)
    51:	li	$t4, 33
    52:	sw	$t4, 4($s0)
    53:	li	$t5, 21
    54:	sw	$t5, 5($s0)
    55:	lw	$t6, 1($s0)
    56:	mov	$a0, $t6
    57:	li	$a1, 1
    58:	out	$a0, 1
    59:	la	$a0, -5($sp)
    60:	li	$a1, 6
    61:	li	$t7, findMax
    62:	add	$t7, $t7, $ms
    63:	jal	$t7
    64:	mov	$s1, $v0
    65:	subi	$sp, $sp, 7
    66:	halt	

********** Código binário **********

disk[400] <= 32'b010000_00000_10100_0000000000101001; 	// li
disk[401] <= 32'b000000_10100_00010_10100_00000_000000; 	// add
disk[402] <= 32'b000000_10100_00000_00000_00000_010010; 	// jr
disk[403] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[404] <= 32'b010010_11110_00110_1111111111111100; 	// sw
disk[405] <= 32'b010010_11110_00111_1111111111111101; 	// sw
disk[406] <= 32'b010000_00000_10100_0000000000000000; 	// li
disk[407] <= 32'b010010_11110_10100_1111111111111110; 	// sw
disk[408] <= 32'b010000_00000_10101_0000000000000000; 	// li
disk[409] <= 32'b010010_11110_10101_0000000000000000; 	// sw
disk[410] <= 32'b001111_11110_01010_1111111111111100; 	// lw
disk[411] <= 32'b001111_01010_10110_0000000000000001; 	// lw
disk[412] <= 32'b001110_10110_00110_0000000000000000; 	// mov
disk[413] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[414] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[415] <= 32'b001111_11110_01011_1111111111111110; 	// lw
disk[416] <= 32'b001111_11110_01100_1111111111111101; 	// lw
disk[417] <= 32'b000000_01011_01100_10111_00000_001110; 	// lt
disk[418] <= 32'b010000_00000_11000_0000000000101000; 	// li
disk[419] <= 32'b000000_11000_00010_11000_00000_000000; 	// add
disk[420] <= 32'b010101_10111_11000_0000000000000000; 	// jf
disk[421] <= 32'b000000_01010_01011_11001_00000_000000; 	// add
disk[422] <= 32'b001111_11001_11001_0000000000000000; 	// lw
disk[423] <= 32'b001111_11110_01101_0000000000000000; 	// lw
disk[424] <= 32'b000000_01101_11001_11010_00000_001110; 	// lt
disk[425] <= 32'b010000_00000_11011_0000000000100010; 	// li
disk[426] <= 32'b000000_11011_00010_11011_00000_000000; 	// add
disk[427] <= 32'b010101_11010_11011_0000000000000000; 	// jf
disk[428] <= 32'b000000_01010_01011_11100_00000_000000; 	// add
disk[429] <= 32'b001111_11100_11100_0000000000000000; 	// lw
disk[430] <= 32'b010010_11110_11100_0000000000000000; 	// sw
disk[431] <= 32'b001111_11110_01101_0000000000000000; 	// lw
disk[432] <= 32'b010010_11110_01011_1111111111111111; 	// sw
disk[433] <= 32'b000001_01011_11101_0000000000000001; 	// addi
disk[434] <= 32'b010010_11110_11101_1111111111111110; 	// sw
disk[435] <= 32'b001111_11110_01011_1111111111111110; 	// lw
disk[436] <= 32'b010000_00000_10100_0000000000010000; 	// li
disk[437] <= 32'b000000_10100_00010_10100_00000_000000; 	// add
disk[438] <= 32'b000000_10100_00000_00000_00000_010010; 	// jr
disk[439] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[440] <= 32'b000001_11110_11110_0000000000000110; 	// addi
disk[441] <= 32'b010001_11110_01010_1111111111111011; 	// la
disk[442] <= 32'b010000_00000_10100_0000000000001100; 	// li
disk[443] <= 32'b010010_01010_10100_0000000000000000; 	// sw
disk[444] <= 32'b010000_00000_10101_0000000000101001; 	// li
disk[445] <= 32'b010010_01010_10101_0000000000000001; 	// sw
disk[446] <= 32'b010000_00000_10110_0000000000010111; 	// li
disk[447] <= 32'b010010_01010_10110_0000000000000010; 	// sw
disk[448] <= 32'b010000_00000_10111_0000000001100010; 	// li
disk[449] <= 32'b010010_01010_10111_0000000000000011; 	// sw
disk[450] <= 32'b010000_00000_11000_0000000000100001; 	// li
disk[451] <= 32'b010010_01010_11000_0000000000000100; 	// sw
disk[452] <= 32'b010000_00000_11001_0000000000010101; 	// li
disk[453] <= 32'b010010_01010_11001_0000000000000101; 	// sw
disk[454] <= 32'b001111_01010_11010_0000000000000001; 	// lw
disk[455] <= 32'b001110_11010_00110_0000000000000000; 	// mov
disk[456] <= 32'b010000_00000_00111_0000000000000001; 	// li
disk[457] <= 32'b010100_00000_00110_0000000000000001; 	// out
disk[458] <= 32'b010001_11110_00110_1111111111111011; 	// la
disk[459] <= 32'b010000_00000_00111_0000000000000110; 	// li
disk[460] <= 32'b010000_00000_11011_0000000000000100; 	// li
disk[461] <= 32'b000000_11011_00010_11011_00000_000000; 	// add
disk[462] <= 32'b010111_11011_00000_0000000000000000; 	// jal
disk[463] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[464] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[465] <= 32'b011000_00000000000000000000000000; 	// halt
