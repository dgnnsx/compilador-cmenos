# Compilação C- para código intermediário
# Arquivo: testes/foo.txt
# Fim da execução.

********** Código intermediário **********

1: (function, foo, _, _)
2: (get_param, x, _, _)
3: (get_param, y, _, _)
4: (get_param, z, _, _)
5: (get_param, w, _, _)
6: (assign, result, 0, _)
7: (label, L1, _, _)
8: (greater_than_equal_to, result, 0, t2)
9: (jump_if_false, t2, L8, _)
10: (less_than, x, 2, t3)
11: (jump_if_false, t3, L2, _)
12: (addition, x, y, t4)
13: (assign, result, t4, _)
14: (label, L2, _, _)
15: (greater_than, y, 2, t5)
16: (jump_if_false, t5, L3, _)
17: (addition, result, y, t6)
18: (addition, t6, z, t7)
19: (assign, result, t7, _)
20: (goto, L4, _, _)
21: (label, L3, _, _)
22: (multiplication, result, 3, t8)
23: (assign, result, t8, _)
24: (label, L4, _, _)
25: (less_than_equal_to, w, 4, t9)
26: (jump_if_false, t9, L7, _)
27: (equal, z, 0, t10)
28: (jump_if_false, t10, L5, _)
29: (return, 0, _, _)
30: (label, L5, _, _)
31: (not_equal, result, 0, t11)
32: (jump_if_false, t11, L6, _)
33: (subtraction, w, 1, t12)
34: (division, result, t12, t13)
35: (return, t13, _, _)
36: (label, L6, _, _)
37: (label, L7, _, _)
38: (goto, L1, _, _)
39: (label, L8, _, _)
40: (return, _, _, _)
41: (function, main, _, _)
42: (param_list, 0, _, _)
43: (call, input, 0, t14)
44: (vector_address, vetor, 0, t15)
45: (assign, vetor, t14, 0)
46: (param_list, 4, _, _)
47: (set_param, 1, _, _)
48: (vector_value, vetor, 0, t16)
49: (set_param, t16, _, _)
50: (set_param, 3, _, _)
51: (set_param, 4, _, _)
52: (call, foo, 4, t17)
53: (vector_address, vetor, 1, t18)
54: (assign, vetor, t17, 1)
55: (param_list, 2, _, _)
56: (vector_value, vetor, 1, t19)
57: (set_param, t19, _, _)
58: (set_param, 2, _, _)
59: (call, output, 2, t20)
60: (halt, _, _, _)

********** Código objeto **********

foo:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	sw	$a1, -3($sp)
    3:	sw	$a2, -2($sp)
    4:	sw	$a3, -1($sp)
    5:	li	$t0, 0
    6:	sw	$t0, 0($sp)
.L1	
    7:	lw	$s0, 0($sp)
    8:	li	$t2, 0
    9:	get	$t1, $s0, $t2
    10:	jf	$t1, L8
    11:	lw	$s1, -4($sp)
    12:	li	$t4, 2
    13:	lt	$t3, $s1, $t4
    14:	jf	$t3, L2
    15:	lw	$s2, -3($sp)
    16:	add	$t5, $s1, $s2
    17:	sw	$t5, 0($sp)
.L2	
    18:	li	$t7, 2
    19:	gt	$t6, $s2, $t7
    20:	jf	$t6, L3
    21:	lw	$s3, 0($sp)
    22:	add	$t8, $s3, $s2
    23:	lw	$s4, -2($sp)
    24:	add	$t9, $t8, $s4
    25:	sw	$t9, 0($sp)
    26:	j	L4
.L3	
    27:	lw	$s5, 0($sp)
    28:	muli	$t0, $s5, 3
    29:	sw	$t0, 0($sp)
.L4	
    30:	lw	$s6, -1($sp)
    31:	li	$t2, 4
    32:	let	$t1, $s6, $t2
    33:	jf	$t1, L7
    34:	li	$t4, 0
    35:	eq	$t3, $s4, $t4
    36:	jf	$t3, L5
    37:	li	$t5, 0
    38:	mov	$v0, $t5
    39:	jr	$ra
.L5	
    40:	lw	$s7, 0($sp)
    41:	li	$t7, 0
    42:	ne	$t6, $s7, $t7
    43:	jf	$t6, L6
    44:	subi	$t8, $s6, 1
    45:	div	$t9, $s7, $t8
    46:	mov	$v0, $t9
    47:	jr	$ra
.L6	
.L7	
    48:	j	L1
.L8	
    49:	jr	$ra

main:
    50:	addi	$sp, $sp, 0
    51:	in	$t0
    52:	la	$s0, 0($gp)
    53:	sw	$t0, 0($s0)
    54:	li	$a0, 1
    55:	lw	$t1, 0($s0)
    56:	mov	$a1, $t1
    57:	li	$a2, 3
    58:	li	$a3, 4
    59:	jal	foo
    60:	mov	$s1, $v0
    61:	subi	$sp, $sp, 7
    62:	la	$s2, 0($gp)
    63:	sw	$s1, 1($s2)
    64:	lw	$t2, 1($s2)
    65:	mov	$a0, $t2
    66:	li	$a1, 2
    67:	out	$a0, 2
    68:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000110011;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000111; 	// addi
assign rom[2] = 32'b010010_11110_00110_1111111111111100; 	// sw
assign rom[3] = 32'b010010_11110_00111_1111111111111101; 	// sw
assign rom[4] = 32'b010010_11110_01000_1111111111111110; 	// sw
assign rom[5] = 32'b010010_11110_01001_1111111111111111; 	// sw
assign rom[6] = 32'b010000_00000_10100_0000000000000000; 	// li
assign rom[7] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[8] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[9] = 32'b010000_00000_10110_0000000000000000; 	// li
assign rom[10] = 32'b000000_01010_10110_10101_00000_010001; 	// get
assign rom[11] = 32'b010101_10101_00000_0000000000110010; 	// jf
assign rom[12] = 32'b001111_11110_01011_1111111111111100; 	// lw
assign rom[13] = 32'b010000_00000_11000_0000000000000010; 	// li
assign rom[14] = 32'b000000_01011_11000_10111_00000_001110; 	// lt
assign rom[15] = 32'b010101_10111_00000_0000000000010011; 	// jf
assign rom[16] = 32'b001111_11110_01100_1111111111111101; 	// lw
assign rom[17] = 32'b000000_01011_01100_11001_00000_000000; 	// add
assign rom[18] = 32'b010010_11110_11001_0000000000000000; 	// sw
assign rom[19] = 32'b010000_00000_11011_0000000000000010; 	// li
assign rom[20] = 32'b000000_01100_11011_11010_00000_010000; 	// gt
assign rom[21] = 32'b010101_11010_00000_0000000000011100; 	// jf
assign rom[22] = 32'b001111_11110_01101_0000000000000000; 	// lw
assign rom[23] = 32'b000000_01101_01100_11100_00000_000000; 	// add
assign rom[24] = 32'b001111_11110_01110_1111111111111110; 	// lw
assign rom[25] = 32'b000000_11100_01110_11101_00000_000000; 	// add
assign rom[26] = 32'b010010_11110_11101_0000000000000000; 	// sw
assign rom[27] = 32'b010110_00000000000000000000011111; 	// j
assign rom[28] = 32'b001111_11110_01111_0000000000000000; 	// lw
assign rom[29] = 32'b000011_01111_10100_0000000000000011; 	// muli
assign rom[30] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[31] = 32'b001111_11110_10000_1111111111111111; 	// lw
assign rom[32] = 32'b010000_00000_10110_0000000000000100; 	// li
assign rom[33] = 32'b000000_10000_10110_10101_00000_001111; 	// let
assign rom[34] = 32'b010101_10101_00000_0000000000110001; 	// jf
assign rom[35] = 32'b010000_00000_11000_0000000000000000; 	// li
assign rom[36] = 32'b000000_01110_11000_10111_00000_001100; 	// eq
assign rom[37] = 32'b010101_10111_00000_0000000000101001; 	// jf
assign rom[38] = 32'b010000_00000_11001_0000000000000000; 	// li
assign rom[39] = 32'b001110_11001_00001_0000000000000000; 	// mov
assign rom[40] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[41] = 32'b001111_11110_10001_0000000000000000; 	// lw
assign rom[42] = 32'b010000_00000_11011_0000000000000000; 	// li
assign rom[43] = 32'b000000_10001_11011_11010_00000_001101; 	// ne
assign rom[44] = 32'b010101_11010_00000_0000000000110001; 	// jf
assign rom[45] = 32'b000010_10000_11100_0000000000000001; 	// subi
assign rom[46] = 32'b000000_10001_11100_11101_00000_000011; 	// div
assign rom[47] = 32'b001110_11101_00001_0000000000000000; 	// mov
assign rom[48] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[49] = 32'b010110_00000000000000000000001000; 	// j
assign rom[50] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[51] = 32'b000001_11110_11110_0000000000000000; 	// addi
assign rom[52] = 32'b010011_00000_10100_0000000000000000; 	// in
assign rom[53] = 32'b010001_00101_01010_0000000000000000; 	// la
assign rom[54] = 32'b010010_01010_10100_0000000000000000; 	// sw
assign rom[55] = 32'b010000_00000_00110_0000000000000001; 	// li
assign rom[56] = 32'b001111_01010_10101_0000000000000000; 	// lw
assign rom[57] = 32'b001110_10101_00111_0000000000000000; 	// mov
assign rom[58] = 32'b010000_00000_01000_0000000000000011; 	// li
assign rom[59] = 32'b010000_00000_01001_0000000000000100; 	// li
assign rom[60] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[61] = 32'b001110_00001_01011_0000000000000000; 	// mov
assign rom[62] = 32'b000010_11110_11110_0000000000000111; 	// subi
assign rom[63] = 32'b010001_00101_01100_0000000000000000; 	// la
assign rom[64] = 32'b010010_01100_01011_0000000000000001; 	// sw
assign rom[65] = 32'b001111_01100_10110_0000000000000001; 	// lw
assign rom[66] = 32'b001110_10110_00110_0000000000000000; 	// mov
assign rom[67] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[68] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[69] = 32'b011000_00000000000000000000000000; 	// halt
