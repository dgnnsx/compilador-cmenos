# Compilação C- para código intermediário
# Arquivo: testes/sort.txt
# Fim da execução.

********** Código intermediário **********

1: (function, sort, _, _)
2: (get_param, num, _, _)
3: (get_param, tam, _, _)
4: (assign, i, 0, _)
5: (label, L1, _, _)
6: (subtraction, tam, 1, t1)
7: (less_than, i, t1, t2)
8: (jump_if_false, t2, L6, _)
9: (assign, min, i, _)
10: (addition, i, 1, t3)
11: (assign, j, t3, _)
12: (label, L2, _, _)
13: (less_than, j, tam, t4)
14: (jump_if_false, t4, L4, _)
15: (vector_value, num, j, t5)
16: (vector_value, num, min, t6)
17: (less_than, t5, t6, t7)
18: (jump_if_false, t7, L3, _)
19: (assign, min, j, _)
20: (label, L3, _, _)
21: (addition, j, 1, t8)
22: (assign, j, t8, _)
23: (goto, L2, _, _)
24: (label, L4, _, _)
25: (not_equal, i, min, t9)
26: (jump_if_false, t9, L5, _)
27: (vector_value, num, i, t10)
28: (assign, aux, t10, _)
29: (vector_value, num, min, t11)
30: (vector_address, num, i, t12)
31: (assign, t12, t11, _)
32: (vector_address, num, min, t13)
33: (assign, t13, aux, _)
34: (label, L5, _, _)
35: (addition, i, 1, t14)
36: (assign, i, t14, _)
37: (goto, L1, _, _)
38: (label, L6, _, _)
39: (return, _, _, _)
40: (function, main, _, _)
41: (vector_address, vetor, 0, t16)
42: (assign, vetor, 9, 0)
43: (vector_address, vetor, 1, t17)
44: (assign, vetor, 6, 1)
45: (vector_address, vetor, 2, t18)
46: (assign, vetor, 8, 2)
47: (vector_address, vetor, 3, t19)
48: (assign, vetor, 7, 3)
49: (param_list, 2, _, _)
50: (set_param, vetor, _, _)
51: (set_param, 4, _, _)
52: (call, sort, 2, t20)
53: (param_list, 0, _, _)
54: (call, input, 0, t21)
55: (assign, i, t21, _)
56: (param_list, 2, _, _)
57: (vector_value, vetor, i, t22)
58: (set_param, t22, _, _)
59: (set_param, 2, _, _)
60: (call, output, 2, t23)
61: (halt, _, _, _)

********** Código objeto **********

sort:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -5($sp)
    2:	sw	$a1, -4($sp)
    3:	li	$t0, 0
    4:	sw	$t0, -3($sp)
.L1	
    5:	lw	$s0, -4($sp)
    6:	subi	$t1, $s0, 1
    7:	lw	$s1, -3($sp)
    8:	lt	$t2, $s1, $t1
    9:	jf	$t2, L6
    10:	sw	$s1, -1($sp)
    11:	addi	$t3, $s1, 1
    12:	sw	$t3, -2($sp)
.L2	
    13:	lw	$s2, -2($sp)
    14:	lt	$t4, $s2, $s0
    15:	jf	$t4, L4
    16:	lw	$s3, -5($sp)
    17:	add	$t5, $s3, $s2
    18:	lw	$t5, 0($t5)
    19:	lw	$s4, -1($sp)
    20:	add	$t6, $s3, $s4
    21:	lw	$t6, 0($t6)
    22:	lt	$t7, $t5, $t6
    23:	jf	$t7, L3
    24:	sw	$s2, -1($sp)
.L3	
    25:	addi	$t8, $s2, 1
    26:	sw	$t8, -2($sp)
    27:	j	L2
.L4	
    28:	lw	$s5, -1($sp)
    29:	ne	$t9, $s1, $s5
    30:	jf	$t9, L5
    31:	add	$t0, $s3, $s1
    32:	lw	$t0, 0($t0)
    33:	sw	$t0, 0($sp)
    34:	add	$t1, $s3, $s5
    35:	lw	$t1, 0($t1)
    36:	add	$t2, $s3, $s1
    37:	sw	$t1, 0($t2)
    38:	add	$t3, $s3, $s5
    39:	lw	$s6, 0($sp)
    40:	sw	$s6, 0($t3)
.L5	
    41:	addi	$t4, $s1, 1
    42:	sw	$t4, -3($sp)
    43:	j	L1
.L6	
    44:	jr	$ra

main:
    45:	addi	$sp, $sp, 5
    46:	la	$s0, -4($sp)
    47:	li	$t0, 9
    48:	sw	$t0, 0($s0)
    49:	li	$t1, 6
    50:	sw	$t1, 1($s0)
    51:	li	$t2, 8
    52:	sw	$t2, 2($s0)
    53:	li	$t3, 7
    54:	sw	$t3, 3($s0)
    55:	la	$a0, -4($sp)
    56:	li	$a1, 4
    57:	jal	sort
    58:	mov	$t4, $v0
    59:	subi	$sp, $sp, 7
    60:	in	$t5
    61:	sw	$t5, 0($sp)
    62:	la	$s0, -4($sp)
    63:	lw	$s1, 0($sp)
    64:	add	$t6, $s0, $s1
    65:	lw	$t6, 0($t6)
    66:	mov	$a0, $t6
    67:	li	$a1, 2
    68:	out	$a0, 2
    69:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000101110;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000111; 	// addi
assign rom[2] = 32'b010010_11110_00110_1111111111111011; 	// sw
assign rom[3] = 32'b010010_11110_00111_1111111111111100; 	// sw
assign rom[4] = 32'b010000_00000_10100_0000000000000000; 	// li
assign rom[5] = 32'b010010_11110_10100_1111111111111101; 	// sw
assign rom[6] = 32'b001111_11110_01010_1111111111111100; 	// lw
assign rom[7] = 32'b000010_01010_10101_0000000000000001; 	// subi
assign rom[8] = 32'b001111_11110_01011_1111111111111101; 	// lw
assign rom[9] = 32'b000000_01011_10101_10110_00000_001110; 	// lt
assign rom[10] = 32'b010101_10110_00000_0000000000101101; 	// jf
assign rom[11] = 32'b010010_11110_01011_1111111111111111; 	// sw
assign rom[12] = 32'b000001_01011_10111_0000000000000001; 	// addi
assign rom[13] = 32'b010010_11110_10111_1111111111111110; 	// sw
assign rom[14] = 32'b001111_11110_01100_1111111111111110; 	// lw
assign rom[15] = 32'b000000_01100_01010_11000_00000_001110; 	// lt
assign rom[16] = 32'b010101_11000_00000_0000000000011101; 	// jf
assign rom[17] = 32'b001111_11110_01101_1111111111111011; 	// lw
assign rom[18] = 32'b000000_01101_01100_11001_00000_000000; 	// add
assign rom[19] = 32'b001111_11001_11001_0000000000000000; 	// lw
assign rom[20] = 32'b001111_11110_01110_1111111111111111; 	// lw
assign rom[21] = 32'b000000_01101_01110_11010_00000_000000; 	// add
assign rom[22] = 32'b001111_11010_11010_0000000000000000; 	// lw
assign rom[23] = 32'b000000_11001_11010_11011_00000_001110; 	// lt
assign rom[24] = 32'b010101_11011_00000_0000000000011010; 	// jf
assign rom[25] = 32'b010010_11110_01100_1111111111111111; 	// sw
assign rom[26] = 32'b000001_01100_11100_0000000000000001; 	// addi
assign rom[27] = 32'b010010_11110_11100_1111111111111110; 	// sw
assign rom[28] = 32'b010110_00000000000000000000001110; 	// j
assign rom[29] = 32'b001111_11110_01111_1111111111111111; 	// lw
assign rom[30] = 32'b000000_01011_01111_11101_00000_001101; 	// ne
assign rom[31] = 32'b010101_11101_00000_0000000000101010; 	// jf
assign rom[32] = 32'b000000_01101_01011_10100_00000_000000; 	// add
assign rom[33] = 32'b001111_10100_10100_0000000000000000; 	// lw
assign rom[34] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[35] = 32'b000000_01101_01111_10101_00000_000000; 	// add
assign rom[36] = 32'b001111_10101_10101_0000000000000000; 	// lw
assign rom[37] = 32'b000000_01101_01011_10110_00000_000000; 	// add
assign rom[38] = 32'b010010_10110_10101_0000000000000000; 	// sw
assign rom[39] = 32'b000000_01101_01111_10111_00000_000000; 	// add
assign rom[40] = 32'b001111_11110_10000_0000000000000000; 	// lw
assign rom[41] = 32'b010010_10111_10000_0000000000000000; 	// sw
assign rom[42] = 32'b000001_01011_11000_0000000000000001; 	// addi
assign rom[43] = 32'b010010_11110_11000_1111111111111101; 	// sw
assign rom[44] = 32'b010110_00000000000000000000000110; 	// j
assign rom[45] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[46] = 32'b000001_11110_11110_0000000000000101; 	// addi
assign rom[47] = 32'b010001_11110_01010_1111111111111100; 	// la
assign rom[48] = 32'b010000_00000_10100_0000000000001001; 	// li
assign rom[49] = 32'b010010_01010_10100_0000000000000000; 	// sw
assign rom[50] = 32'b010000_00000_10101_0000000000000110; 	// li
assign rom[51] = 32'b010010_01010_10101_0000000000000001; 	// sw
assign rom[52] = 32'b010000_00000_10110_0000000000001000; 	// li
assign rom[53] = 32'b010010_01010_10110_0000000000000010; 	// sw
assign rom[54] = 32'b010000_00000_10111_0000000000000111; 	// li
assign rom[55] = 32'b010010_01010_10111_0000000000000011; 	// sw
assign rom[56] = 32'b010001_11110_00110_1111111111111100; 	// la
assign rom[57] = 32'b010000_00000_00111_0000000000000100; 	// li
assign rom[58] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[59] = 32'b001110_00001_11000_0000000000000000; 	// mov
assign rom[60] = 32'b000010_11110_11110_0000000000000111; 	// subi
assign rom[61] = 32'b010011_00000_11001_0000000000000000; 	// in
assign rom[62] = 32'b010010_11110_11001_0000000000000000; 	// sw
assign rom[63] = 32'b010001_11110_01010_1111111111111100; 	// la
assign rom[64] = 32'b001111_11110_01011_0000000000000000; 	// lw
assign rom[65] = 32'b000000_01010_01011_11010_00000_000000; 	// add
assign rom[66] = 32'b001111_11010_11010_0000000000000000; 	// lw
assign rom[67] = 32'b001110_11010_00110_0000000000000000; 	// mov
assign rom[68] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[69] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[70] = 32'b011000_00000000000000000000000000; 	// halt
