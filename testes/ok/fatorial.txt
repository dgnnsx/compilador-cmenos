# Compilação C- para código intermediário
# Arquivo: testes/fatorial.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fatorial, _, _)
2: (get_param, number, _, _)
3: (assign, result, 1, _)
4: (label, L1, _, _)
5: (greater_than, number, 0, t1)
6: (jump_if_false, t1, L2, _)
7: (multiplication, result, number, t2)
8: (assign, result, t2, _)
9: (subtraction, number, 1, t3)
10: (assign, number, t3, _)
11: (goto, L1, _, _)
12: (label, L2, _, _)
13: (return, result, _, _)
14: (function, main, _, _)
15: (param_list, 0, _, _)
16: (call, input, 0, t4)
17: (assign, number, t4, _)
18: (param_list, 2, _, _)
19: (param_list, 1, _, _)
20: (set_param, number, _, _)
21: (call, fatorial, 1, t5)
22: (set_param, t5, _, _)
23: (set_param, 2, _, _)
24: (call, output, 2, t6)
25: (halt, _, _, _)

********** Código objeto **********

fatorial:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, -1($sp)
    2:	li	$t0, 1
    3:	sw	$t0, 0($sp)
.L1	
    4:	lw	$s0, -1($sp)
    5:	li	$t2, 0
    6:	gt	$t1, $s0, $t2
    7:	jf	$t1, L2
    8:	lw	$s1, 0($sp)
    9:	mul	$t3, $s1, $s0
    10:	sw	$t3, 0($sp)
    11:	subi	$t4, $s0, 1
    12:	sw	$t4, -1($sp)
    13:	j	L1
.L2	
    14:	lw	$s2, 0($sp)
    15:	mov	$v0, $s2
    16:	jr	$ra

main:
    17:	addi	$sp, $sp, 1
    18:	in	$t0
    19:	sw	$t0, 0($sp)
    20:	lw	$s0, 0($sp)
    21:	mov	$a0, $s0
    22:	jal	fatorial
    23:	mov	$t1, $v0
    24:	subi	$sp, $sp, 3
    25:	mov	$a0, $t1
    26:	li	$a1, 2
    27:	out	$a0, 2
    28:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000010010;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000011; 	// addi
assign rom[2] = 32'b010010_11110_00110_1111111111111111; 	// sw
assign rom[3] = 32'b010000_00000_10100_0000000000000001; 	// li
assign rom[4] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[5] = 32'b001111_11110_01010_1111111111111111; 	// lw
assign rom[6] = 32'b010000_00000_10110_0000000000000000; 	// li
assign rom[7] = 32'b000000_01010_10110_10101_00000_010000; 	// gt
assign rom[8] = 32'b010101_10101_00000_0000000000001111; 	// jf
assign rom[9] = 32'b001111_11110_01011_0000000000000000; 	// lw
assign rom[10] = 32'b000000_01011_01010_10111_00000_000010; 	// mul
assign rom[11] = 32'b010010_11110_10111_0000000000000000; 	// sw
assign rom[12] = 32'b000010_01010_11000_0000000000000001; 	// subi
assign rom[13] = 32'b010010_11110_11000_1111111111111111; 	// sw
assign rom[14] = 32'b010110_00000000000000000000000101; 	// j
assign rom[15] = 32'b001111_11110_01100_0000000000000000; 	// lw
assign rom[16] = 32'b001110_01100_00001_0000000000000000; 	// mov
assign rom[17] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[18] = 32'b000001_11110_11110_0000000000000001; 	// addi
assign rom[19] = 32'b010011_00000_10100_0000000000000000; 	// in
assign rom[20] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[21] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[22] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign rom[23] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[24] = 32'b001110_00001_10101_0000000000000000; 	// mov
assign rom[25] = 32'b000010_11110_11110_0000000000000011; 	// subi
assign rom[26] = 32'b001110_10101_00110_0000000000000000; 	// mov
assign rom[27] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[28] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[29] = 32'b011000_00000000000000000000000000; 	// halt
