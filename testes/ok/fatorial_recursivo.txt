# Compilação C- para código intermediário
# Arquivo: testes/fatorial_recursivo.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fat, _, _)
2: (get_param, n, _, _)
3: (equal, n, 0, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 1, _, _)
6: (goto, L4, _, _)
7: (label, L1, _, _)
8: (equal, n, 1, t2)
9: (jump_if_false, t2, L2, _)
10: (return, 1, _, _)
11: (goto, L3, _, _)
12: (label, L2, _, _)
13: (param_list, 1, _, _)
14: (subtraction, n, 1, t3)
15: (set_param, t3, _, _)
16: (call, fat, 1, t4)
17: (multiplication, t4, n, t5)
18: (return, t5, _, _)
19: (label, L3, _, _)
20: (label, L4, _, _)
21: (return, _, _, _)
22: (function, main, _, _)
23: (param_list, 0, _, _)
24: (call, input, 0, t6)
25: (assign, n, t6, _)
26: (param_list, 2, _, _)
27: (param_list, 1, _, _)
28: (set_param, n, _, _)
29: (call, fat, 1, t7)
30: (set_param, t7, _, _)
31: (set_param, 2, _, _)
32: (call, output, 2, t8)
33: (halt, _, _, _)

********** Código objeto **********

fat:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t1, 0
    4:	eq	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 1
    7:	mov	$v0, $t2
    8:	jr	$ra
    9:	j	L4
.L1	
    10:	li	$t4, 1
    11:	eq	$t3, $s0, $t4
    12:	jf	$t3, L2
    13:	li	$t5, 1
    14:	mov	$v0, $t5
    15:	jr	$ra
    16:	j	L3
.L2	
    17:	subi	$t6, $s0, 1
    18:	mov	$a0, $t6
    19:	sw	$ra, -2($sp)
    20:	sw	$s0, 0($sp)
    21:	jal	fat
    22:	subi	$sp, $sp, 3
    23:	lw	$ra, -2($sp)
    24:	lw	$s0, 0($sp)
    25:	mov	$s1, $v0
    26:	mul	$t7, $s1, $s0
    27:	mov	$v0, $t7
    28:	jr	$ra
.L3	
.L4	
    29:	jr	$ra

main:
    30:	addi	$sp, $sp, 1
    31:	in	$t0
    32:	sw	$t0, 0($sp)
    33:	lw	$s0, 0($sp)
    34:	mov	$a0, $s0
    35:	sw	$s0, 0($sp)
    36:	jal	fat
    37:	mov	$s1, $v0
    38:	subi	$sp, $sp, 3
    39:	lw	$s0, 0($sp)
    40:	mov	$a0, $s1
    41:	li	$a1, 2
    42:	out	$a0, 2
    43:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000011111;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[2] <= 32'b010010_11110_00110_0000000000000000; 	// sw
disk[3] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[4] <= 32'b010000_00000_10101_0000000000000000; 	// li
disk[5] <= 32'b000000_01010_10101_10100_00000_001100; 	// eq
disk[6] <= 32'b010101_10100_00000_0000000000001011; 	// jf
disk[7] <= 32'b010000_00000_10110_0000000000000001; 	// li
disk[8] <= 32'b001110_10110_00001_0000000000000000; 	// mov
disk[9] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[10] <= 32'b010110_00000000000000000000011110; 	// j
disk[11] <= 32'b010000_00000_11000_0000000000000001; 	// li
disk[12] <= 32'b000000_01010_11000_10111_00000_001100; 	// eq
disk[13] <= 32'b010101_10111_00000_0000000000010010; 	// jf
disk[14] <= 32'b010000_00000_11001_0000000000000001; 	// li
disk[15] <= 32'b001110_11001_00001_0000000000000000; 	// mov
disk[16] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[17] <= 32'b010110_00000000000000000000011110; 	// j
disk[18] <= 32'b000010_01010_11010_0000000000000001; 	// subi
disk[19] <= 32'b001110_11010_00110_0000000000000000; 	// mov
disk[20] <= 32'b010010_11110_11111_1111111111111110; 	// sw
disk[21] <= 32'b010010_11110_01010_0000000000000000; 	// sw
disk[22] <= 32'b010111_00000000000000000000000001; 	// jal
disk[23] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[24] <= 32'b001111_11110_11111_1111111111111110; 	// lw
disk[25] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[26] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[27] <= 32'b000000_01011_01010_11011_00000_000010; 	// mul
disk[28] <= 32'b001110_11011_00001_0000000000000000; 	// mov
disk[29] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[30] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[31] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[32] <= 32'b010011_00000_10100_0000000000000000; 	// in
disk[33] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[34] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[35] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[36] <= 32'b010010_11110_01010_0000000000000000; 	// sw
disk[37] <= 32'b010111_00000000000000000000000001; 	// jal
disk[38] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[39] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[40] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[41] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[42] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[43] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[44] <= 32'b011000_00000000000000000000000000; 	// halt
