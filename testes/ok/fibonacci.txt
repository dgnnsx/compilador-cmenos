# Compilação C- para código intermediário
# Arquivo: testes/fibonacci.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fibonacci, _, _)
2: (get_param, n, _, _)
3: (assign, first, 0, _)
4: (assign, second, 1, _)
5: (assign, c, 0, _)
6: (label, L1, _, _)
7: (less_than_equal_to, c, n, t1)
8: (jump_if_false, t1, L4, _)
9: (less_than_equal_to, c, 1, t2)
10: (jump_if_false, t2, L2, _)
11: (assign, next, c, _)
12: (goto, L3, _, _)
13: (label, L2, _, _)
14: (addition, first, second, t3)
15: (assign, next, t3, _)
16: (assign, first, second, _)
17: (assign, second, next, _)
18: (label, L3, _, _)
19: (addition, c, 1, t4)
20: (assign, c, t4, _)
21: (goto, L1, _, _)
22: (label, L4, _, _)
23: (return, next, _, _)
24: (function, main, _, _)
25: (param_list, 0, _, _)
26: (call, input, 0, t5)
27: (assign, n, t5, _)
28: (param_list, 2, _, _)
29: (param_list, 1, _, _)
30: (set_param, n, _, _)
31: (call, fibonacci, 1, t6)
32: (set_param, t6, _, _)
33: (set_param, 2, _, _)
34: (call, output, 2, t7)
35: (halt, _, _, _)

********** Código objeto **********

fibonacci:
    0:	addi	$sp, $sp, 6
    1:	sw	$a0, -4($sp)
    2:	li	$t0, 0
    3:	sw	$t0, -1($sp)
    4:	li	$t1, 1
    5:	sw	$t1, 0($sp)
    6:	li	$t2, 0
    7:	sw	$t2, -3($sp)
.L1	
    8:	lw	$s0, -3($sp)
    9:	lw	$s1, -4($sp)
    10:	let	$t3, $s0, $s1
    11:	jf	$t3, L4
    12:	li	$t5, 1
    13:	let	$t4, $s0, $t5
    14:	jf	$t4, L2
    15:	sw	$s0, -2($sp)
    16:	j	L3
.L2	
    17:	lw	$s2, -1($sp)
    18:	lw	$s3, 0($sp)
    19:	add	$t6, $s2, $s3
    20:	sw	$t6, -2($sp)
    21:	sw	$s3, -1($sp)
    22:	lw	$s4, -2($sp)
    23:	sw	$s4, 0($sp)
.L3	
    24:	addi	$t7, $s0, 1
    25:	sw	$t7, -3($sp)
    26:	j	L1
.L4	
    27:	mov	$v0, $s4
    28:	jr	$ra

main:
    29:	addi	$sp, $sp, 1
    30:	in	$t0
    31:	sw	$t0, 0($sp)
    32:	lw	$s0, 0($sp)
    33:	mov	$a0, $s0
    34:	jal	fibonacci
    35:	mov	$t1, $v0
    36:	subi	$sp, $sp, 6
    37:	mov	$a0, $t1
    38:	li	$a1, 2
    39:	out	$a0, 2
    40:	halt	

********** Código binário **********

assign rom[0] = 32'b010110_00000000000000000000011110;		// Jump to Main
assign rom[1] = 32'b000001_11110_11110_0000000000000110; 	// addi
assign rom[2] = 32'b010010_11110_00110_1111111111111100; 	// sw
assign rom[3] = 32'b010000_00000_10100_0000000000000000; 	// li
assign rom[4] = 32'b010010_11110_10100_1111111111111111; 	// sw
assign rom[5] = 32'b010000_00000_10101_0000000000000001; 	// li
assign rom[6] = 32'b010010_11110_10101_0000000000000000; 	// sw
assign rom[7] = 32'b010000_00000_10110_0000000000000000; 	// li
assign rom[8] = 32'b010010_11110_10110_1111111111111101; 	// sw
assign rom[9] = 32'b001111_11110_01010_1111111111111101; 	// lw
assign rom[10] = 32'b001111_11110_01011_1111111111111100; 	// lw
assign rom[11] = 32'b000000_01010_01011_10111_00000_001111; 	// let
assign rom[12] = 32'b010101_10111_00000_0000000000011100; 	// jf
assign rom[13] = 32'b010000_00000_11001_0000000000000001; 	// li
assign rom[14] = 32'b000000_01010_11001_11000_00000_001111; 	// let
assign rom[15] = 32'b010101_11000_00000_0000000000010010; 	// jf
assign rom[16] = 32'b010010_11110_01010_1111111111111110; 	// sw
assign rom[17] = 32'b010110_00000000000000000000011001; 	// j
assign rom[18] = 32'b001111_11110_01100_1111111111111111; 	// lw
assign rom[19] = 32'b001111_11110_01101_0000000000000000; 	// lw
assign rom[20] = 32'b000000_01100_01101_11010_00000_000000; 	// add
assign rom[21] = 32'b010010_11110_11010_1111111111111110; 	// sw
assign rom[22] = 32'b010010_11110_01101_1111111111111111; 	// sw
assign rom[23] = 32'b001111_11110_01110_1111111111111110; 	// lw
assign rom[24] = 32'b010010_11110_01110_0000000000000000; 	// sw
assign rom[25] = 32'b000001_01010_11011_0000000000000001; 	// addi
assign rom[26] = 32'b010010_11110_11011_1111111111111101; 	// sw
assign rom[27] = 32'b010110_00000000000000000000001001; 	// j
assign rom[28] = 32'b001110_01110_00001_0000000000000000; 	// mov
assign rom[29] = 32'b000000_11111_00000_00000_00000_010010; 	// jr
assign rom[30] = 32'b000001_11110_11110_0000000000000001; 	// addi
assign rom[31] = 32'b010011_00000_10100_0000000000000000; 	// in
assign rom[32] = 32'b010010_11110_10100_0000000000000000; 	// sw
assign rom[33] = 32'b001111_11110_01010_0000000000000000; 	// lw
assign rom[34] = 32'b001110_01010_00110_0000000000000000; 	// mov
assign rom[35] = 32'b010111_00000000000000000000000001; 	// jal
assign rom[36] = 32'b001110_00001_10101_0000000000000000; 	// mov
assign rom[37] = 32'b000010_11110_11110_0000000000000110; 	// subi
assign rom[38] = 32'b001110_10101_00110_0000000000000000; 	// mov
assign rom[39] = 32'b010000_00000_00111_0000000000000010; 	// li
assign rom[40] = 32'b010100_00000_00110_0000000000000010; 	// out
assign rom[41] = 32'b011000_00000000000000000000000000; 	// halt
