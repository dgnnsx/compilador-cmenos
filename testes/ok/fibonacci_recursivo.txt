# Compilação C- para código intermediário
# Arquivo: testes/fibonacci_recursivo.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fib, _, _)
2: (get_param, x, _, _)
3: (less_than, x, 2, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 1, _, _)
6: (label, L1, _, _)
7: (param_list, 1, _, _)
8: (subtraction, x, 1, t2)
9: (set_param, t2, _, _)
10: (call, fib, 1, t3)
11: (param_list, 1, _, _)
12: (subtraction, x, 2, t4)
13: (set_param, t4, _, _)
14: (call, fib, 1, t5)
15: (addition, t3, t5, t6)
16: (return, t6, _, _)
17: (function, main, _, _)
18: (param_list, 0, _, _)
19: (call, input, 0, t7)
20: (assign, n, t7, _)
21: (param_list, 2, _, _)
22: (param_list, 1, _, _)
23: (set_param, n, _, _)
24: (call, fib, 1, t8)
25: (set_param, t8, _, _)
26: (set_param, 2, _, _)
27: (call, output, 2, t9)
28: (halt, _, _, _)

********** Código objeto **********

fib:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	li	$t1, 2
    4:	lt	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 1
    7:	mov	$v0, $t2
    8:	jr	$ra
.L1	
    9:	subi	$t3, $s0, 1
    10:	mov	$a0, $t3
    11:	sw	$ra, -2($sp)
    12:	sw	$s0, 0($sp)
    13:	jal	fib
    14:	subi	$sp, $sp, 3
    15:	lw	$ra, -2($sp)
    16:	lw	$s0, 0($sp)
    17:	mov	$s1, $v0
    18:	subi	$t4, $s0, 2
    19:	mov	$a0, $t4
    20:	sw	$ra, -2($sp)
    21:	sw	$s0, 0($sp)
    22:	sw	$s1, -1($sp)
    23:	jal	fib
    24:	subi	$sp, $sp, 3
    25:	lw	$ra, -2($sp)
    26:	lw	$s0, 0($sp)
    27:	lw	$s1, -1($sp)
    28:	mov	$s2, $v0
    29:	add	$t5, $s1, $s2
    30:	mov	$v0, $t5
    31:	jr	$ra

main:
    32:	addi	$sp, $sp, 1
    33:	in	$t0
    34:	sw	$t0, 0($sp)
    35:	lw	$s0, 0($sp)
    36:	mov	$a0, $s0
    37:	sw	$s0, 0($sp)
    38:	jal	fib
    39:	mov	$s1, $v0
    40:	subi	$sp, $sp, 3
    41:	lw	$s0, 0($sp)
    42:	mov	$a0, $s1
    43:	li	$a1, 2
    44:	out	$a0, 2
    45:	halt	

********** Código binário **********

disk[0] <= 32'b010110_00000000000000000000100001;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[2] <= 32'b010010_11110_00110_0000000000000000; 	// sw
disk[3] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[4] <= 32'b010000_00000_10101_0000000000000010; 	// li
disk[5] <= 32'b000000_01010_10101_10100_00000_001110; 	// lt
disk[6] <= 32'b010101_10100_00000_0000000000001010; 	// jf
disk[7] <= 32'b010000_00000_10110_0000000000000001; 	// li
disk[8] <= 32'b001110_10110_00001_0000000000000000; 	// mov
disk[9] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[10] <= 32'b000010_01010_10111_0000000000000001; 	// subi
disk[11] <= 32'b001110_10111_00110_0000000000000000; 	// mov
disk[12] <= 32'b010010_11110_11111_1111111111111110; 	// sw
disk[13] <= 32'b010010_11110_01010_0000000000000000; 	// sw
disk[14] <= 32'b010111_00000000000000000000000001; 	// jal
disk[15] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[16] <= 32'b001111_11110_11111_1111111111111110; 	// lw
disk[17] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[18] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[19] <= 32'b000010_01010_11000_0000000000000010; 	// subi
disk[20] <= 32'b001110_11000_00110_0000000000000000; 	// mov
disk[21] <= 32'b010010_11110_11111_1111111111111110; 	// sw
disk[22] <= 32'b010010_11110_01010_0000000000000000; 	// sw
disk[23] <= 32'b010010_11110_01011_1111111111111111; 	// sw
disk[24] <= 32'b010111_00000000000000000000000001; 	// jal
disk[25] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[26] <= 32'b001111_11110_11111_1111111111111110; 	// lw
disk[27] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[28] <= 32'b001111_11110_01011_1111111111111111; 	// lw
disk[29] <= 32'b001110_00001_01100_0000000000000000; 	// mov
disk[30] <= 32'b000000_01011_01100_11001_00000_000000; 	// add
disk[31] <= 32'b001110_11001_00001_0000000000000000; 	// mov
disk[32] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[33] <= 32'b000001_11110_11110_0000000000000001; 	// addi
disk[34] <= 32'b010011_00000_10100_0000000000000000; 	// in
disk[35] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[36] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[37] <= 32'b001110_01010_00110_0000000000000000; 	// mov
disk[38] <= 32'b010010_11110_01010_0000000000000000; 	// sw
disk[39] <= 32'b010111_00000000000000000000000001; 	// jal
disk[40] <= 32'b001110_00001_01011_0000000000000000; 	// mov
disk[41] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[42] <= 32'b001111_11110_01010_0000000000000000; 	// lw
disk[43] <= 32'b001110_01011_00110_0000000000000000; 	// mov
disk[44] <= 32'b010000_00000_00111_0000000000000010; 	// li
disk[45] <= 32'b010100_00000_00110_0000000000000010; 	// out
disk[46] <= 32'b011000_00000000000000000000000000; 	// halt
