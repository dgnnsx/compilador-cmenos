# Compilação C- para código intermediário
# Arquivo: testes/fibonacci.txt
# Fim da execução.

********** Código intermediário **********

1: (function, fibonacci, _, _)
2: (get_param, n, _, _)
3: (assign, first, first, _)
4: (assign, second, second, _)
5: (assign, c, c, _)
6: (label, L1, _, _)
7: (less_than_equal_to, c, n, t1)
8: (jump_if_false, t1, L4, _)
9: (less_than_equal_to, c, 1, t2)
10: (jump_if_false, t2, L2, _)
11: (assign, next, next, _)
12: (goto, L3, _, _)
13: (label, L2, _, _)
14: (addition, first, second, t3)
15: (assign, next, next, _)
16: (assign, first, first, _)
17: (assign, second, second, _)
18: (label, L3, _, _)
19: (addition, c, 1, t4)
20: (assign, c, c, _)
21: (goto, L1, _, _)
22: (label, L4, _, _)
23: (return, next, _, _)
24: (function, main, _, _)
25: (param_list, 0, _, _)
26: (call, input, 0, t5)
27: (assign, n, n, _)
28: (param_list, 2, _, _)
29: (param_list, 1, _, _)
30: (set_param, n, _, _)
31: (call, fibonacci, 1, t6)
32: (set_param, t6, _, _)
33: (set_param, 2, _, _)
34: (call, output, 2, t7)
35: (halt, _, _, _)

********** Código objeto **********

fibonacci:
    0:	addi	$sp, $sp, 6
    1:	sw	$a0, -4($sp)
    2:	lw	$s0, -1($sp)
    3:	sw	$s0, -1($sp)
    4:	lw	$s1, 0($sp)
    5:	sw	$s1, 0($sp)
    6:	lw	$s2, -3($sp)
    7:	sw	$s2, -3($sp)
.L1	
    8:	lw	$s3, -3($sp)
    9:	lw	$s4, -4($sp)
    10:	let	$t0, $s3, $s4
    11:	jf	$t0, L4
    12:	let	$t1, $s3, 1
    13:	jf	$t1, L2
    14:	lw	$s5, -2($sp)
    15:	sw	$s5, -2($sp)
    16:	j	L3
.L2	
    17:	lw	$s6, -1($sp)
    18:	lw	$s7, 0($sp)
    19:	add	$t2, $s6, $s7
    20:	lw	$s8, -2($sp)
    21:	sw	$s8, -2($sp)
    22:	sw	$s6, -1($sp)
    23:	sw	$s7, 0($sp)
.L3	
    24:	addi	$t3, $s3, 1
    25:	sw	$s3, -3($sp)
    26:	j	L1
.L4	
    27:	lw	$s9, -2($sp)
    28:	mov	$v0, $s9
    29:	jr	$ra

main:
    30:	addi	$sp, $sp, 0
    31:	in	$t0
    32:	lw	$s0, 0($sp)
    33:	sw	$s0, 0($sp)
    34:	lw	$s1, 0($sp)
    35:	mov	$a0, $s1
    36:	jal	fibonacci
    37:	mov	$t1, $v0
    38:	subi	$sp, $sp, 6
    39:	mov	$a0, $t1
    40:	li	$a1, 2
    41:	out	$a0, 2
    42:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b100101_00000000000000000000011111;		// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000110; 	// addi
memoria_instrucoes[2] = 32'b011110_00011_00111_1111111111111100; 	// sw
memoria_instrucoes[3] = 32'b011011_00011_01011_1111111111111111; 	// lw
memoria_instrucoes[4] = 32'b011110_00011_01011_1111111111111111; 	// sw
memoria_instrucoes[5] = 32'b011011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[6] = 32'b011110_00011_01100_0000000000000000; 	// sw
memoria_instrucoes[7] = 32'b011011_00011_01101_1111111111111101; 	// lw
memoria_instrucoes[8] = 32'b011110_00011_01101_1111111111111101; 	// sw
memoria_instrucoes[9] = 32'b011011_00011_01110_1111111111111101; 	// lw
memoria_instrucoes[10] = 32'b011011_00011_01111_1111111111111100; 	// lw
memoria_instrucoes[11] = 32'b100010_01110_01111_10101_00000000000; 	// let
memoria_instrucoes[12] = 32'b100110_10101_00000_0000000000011100; 	// jf
memoria_instrucoes[13] = 32'b100010_01110_10110_0000000000000001; 	// let
memoria_instrucoes[14] = 32'b100110_10110_00000_0000000000010010; 	// jf
memoria_instrucoes[15] = 32'b011011_00011_10000_1111111111111110; 	// lw
memoria_instrucoes[16] = 32'b011110_00011_10000_1111111111111110; 	// sw
memoria_instrucoes[17] = 32'b100101_00000000000000000000011001; 	// j
memoria_instrucoes[18] = 32'b011011_00011_10001_1111111111111111; 	// lw
memoria_instrucoes[19] = 32'b011011_00011_10010_0000000000000000; 	// lw
memoria_instrucoes[20] = 32'b000001_10001_10010_10111_00000000000; 	// add
memoria_instrucoes[21] = 32'b011011_00011_10011_1111111111111110; 	// lw
memoria_instrucoes[22] = 32'b011110_00011_10011_1111111111111110; 	// sw
memoria_instrucoes[23] = 32'b011110_00011_10001_1111111111111111; 	// sw
memoria_instrucoes[24] = 32'b011110_00011_10010_0000000000000000; 	// sw
memoria_instrucoes[25] = 32'b000010_01110_11000_0000000000000001; 	// addi
memoria_instrucoes[26] = 32'b011110_00011_01110_1111111111111101; 	// sw
memoria_instrucoes[27] = 32'b100101_00000000000000000000001001; 	// j
memoria_instrucoes[28] = 32'b011011_00011_10100_1111111111111110; 	// lw
memoria_instrucoes[29] = 32'b011010_10100_00001_0000000000000000; 	// mov
memoria_instrucoes[30] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[31] = 32'b000010_00011_00011_0000000000000000; 	// addi
memoria_instrucoes[32] = 32'b101001_00000_10101_0000000000000000; 	// in
memoria_instrucoes[33] = 32'b011011_00011_01011_0000000000000000; 	// lw
memoria_instrucoes[34] = 32'b011110_00011_01011_0000000000000000; 	// sw
memoria_instrucoes[35] = 32'b011011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[36] = 32'b011010_01100_00111_0000000000000000; 	// mov
memoria_instrucoes[37] = 32'b100111_00000000000000000000000001; 	// jal
memoria_instrucoes[38] = 32'b011010_00001_10110_0000000000000000; 	// mov
memoria_instrucoes[39] = 32'b000100_00011_00011_0000000000000110; 	// subi
memoria_instrucoes[40] = 32'b011010_10110_00111_0000000000000000; 	// mov
memoria_instrucoes[41] = 32'b011100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[42] = 32'b101010_00000_00111_0000000000000010; 	// out
memoria_instrucoes[43] = 32'b111111_00000000000000000000000000; 	// halt
