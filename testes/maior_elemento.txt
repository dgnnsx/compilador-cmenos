# Compilação C- para código intermediário
# Arquivo: testes/maior_elemento.txt
# Fim da execução.

********** Código intermediário **********

1: (function, findMax, _, _)
2: (get_param, vetor, _, _)
3: (get_param, tam, _, _)
4: (assign, i, i, _)
5: (assign, max, max, _)
6: (label, L1, _, _)
7: (less_than, i, tam, t1)
8: (jump_if_false, t1, L3, _)
9: (vector_value, vetor, i, t2)
10: (less_than, max, t2, t3)
11: (jump_if_false, t3, L2, _)
12: (vector_value, vetor, i, t4)
13: (assign, max, max, _)
14: (assign, pos, pos, _)
15: (label, L2, _, _)
16: (addition, i, 1, t5)
17: (assign, i, i, _)
18: (goto, L1, _, _)
19: (label, L3, _, _)
20: (param_list, 2, _, _)
21: (set_param, pos, _, _)
22: (set_param, 1, _, _)
23: (call, output, 2, t6)
24: (param_list, 2, _, _)
25: (set_param, max, _, _)
26: (set_param, 2, _, _)
27: (call, output, 2, t7)
28: (return, _, _, _)
29: (function, main, _, _)
30: (vector_address, vetor, 0, t9)
31: (assign, vetor, t9, 0)
32: (vector_address, vetor, 1, t10)
33: (assign, vetor, t10, 1)
34: (vector_address, vetor, 2, t11)
35: (assign, vetor, t11, 2)
36: (vector_address, vetor, 3, t12)
37: (assign, vetor, t12, 3)
38: (vector_address, vetor, 4, t13)
39: (assign, vetor, t13, 4)
40: (vector_address, vetor, 5, t14)
41: (assign, vetor, t14, 5)
42: (param_list, 2, _, _)
43: (set_param, vetor, _, _)
44: (set_param, 6, _, _)
45: (call, findMax, 2, t15)
46: (halt, _, _, _)

********** Código objeto **********

findMax:
    0:	addi	$sp, $sp, 6
    1:	sw	$a0, -4($sp)
    2:	sw	$a1, -3($sp)
    3:	lw	$s0, -2($sp)
    4:	sw	$s0, -2($sp)
    5:	lw	$s1, 0($sp)
    6:	sw	$s1, 0($sp)
.L1	
    7:	lw	$s2, -2($sp)
    8:	lw	$s3, -3($sp)
    9:	lt	$t0, $s2, $s3
    10:	jf	$t0, L3
    11:	lw	$s4, -4($sp)
    12:	add	$t1, $s4, $s2
    13:	lw	$t1, 0($t1)
    14:	lw	$s5, 0($sp)
    15:	lt	$t2, $s5, $t1
    16:	jf	$t2, L2
    17:	add	$t3, $s4, $s2
    18:	lw	$t3, 0($t3)
    19:	sw	$s5, 0($sp)
    20:	lw	$s6, -1($sp)
    21:	sw	$s6, -1($sp)
.L2	
    22:	addi	$t4, $s2, 1
    23:	sw	$s2, -2($sp)
    24:	j	L1
.L3	
    25:	lw	$s7, -1($sp)
    26:	mov	$a0, $s7
    27:	li	$a1, 1
    28:	out	$a0, 1
    29:	lw	$s8, 0($sp)
    30:	mov	$a0, $s8
    31:	li	$a1, 2
    32:	out	$a0, 2
    33:	jr	$ra

main:
    34:	addi	$sp, $sp, 5
    35:	la	$s0, -5($sp)
    36:	lw	$t0, $t0
    37:	sw	$t0, 0($s0)
    38:	lw	$t1, $t1
    39:	sw	$t1, 1($s0)
    40:	lw	$t2, $t2
    41:	sw	$t2, 2($s0)
    42:	lw	$t3, $t3
    43:	sw	$t3, 3($s0)
    44:	lw	$t4, $t4
    45:	sw	$t4, 4($s0)
    46:	lw	$t5, $t5
    47:	sw	$t5, 5($s0)
    48:	la	$a0, -5($sp)
    49:	li	$a1, 6
    50:	jal	findMax
    51:	mov	$t6, $v0
    52:	subi	$sp, $sp, 6
    53:	halt	

********** Código binário **********

memoria_instrucoes[0] = 32'b100101_00000000000000000000100011;		// Jump to Main
memoria_instrucoes[1] = 32'b000010_00011_00011_0000000000000110; 	// addi
memoria_instrucoes[2] = 32'b011110_00011_00111_1111111111111100; 	// sw
memoria_instrucoes[3] = 32'b011110_00011_01000_1111111111111101; 	// sw
memoria_instrucoes[4] = 32'b011011_00011_01011_1111111111111110; 	// lw
memoria_instrucoes[5] = 32'b011110_00011_01011_1111111111111110; 	// sw
memoria_instrucoes[6] = 32'b011011_00011_01100_0000000000000000; 	// lw
memoria_instrucoes[7] = 32'b011110_00011_01100_0000000000000000; 	// sw
memoria_instrucoes[8] = 32'b011011_00011_01101_1111111111111110; 	// lw
memoria_instrucoes[9] = 32'b011011_00011_01110_1111111111111101; 	// lw
memoria_instrucoes[10] = 32'b100001_01101_01110_10101_00000000000; 	// lt
memoria_instrucoes[11] = 32'b100110_10101_00000_0000000000011010; 	// jf
memoria_instrucoes[12] = 32'b011011_00011_01111_1111111111111100; 	// lw
memoria_instrucoes[13] = 32'b000001_01111_01101_10110_00000000000; 	// add
memoria_instrucoes[14] = 32'b011011_10110_10110_0000000000000000; 	// lw
memoria_instrucoes[15] = 32'b011011_00011_10000_0000000000000000; 	// lw
memoria_instrucoes[16] = 32'b100001_10000_10110_10111_00000000000; 	// lt
memoria_instrucoes[17] = 32'b100110_10111_00000_0000000000010111; 	// jf
memoria_instrucoes[18] = 32'b000001_01111_01101_11000_00000000000; 	// add
memoria_instrucoes[19] = 32'b011011_11000_11000_0000000000000000; 	// lw
memoria_instrucoes[20] = 32'b011110_00011_10000_0000000000000000; 	// sw
memoria_instrucoes[21] = 32'b011011_00011_10001_1111111111111111; 	// lw
memoria_instrucoes[22] = 32'b011110_00011_10001_1111111111111111; 	// sw
memoria_instrucoes[23] = 32'b000010_01101_11001_0000000000000001; 	// addi
memoria_instrucoes[24] = 32'b011110_00011_01101_1111111111111110; 	// sw
memoria_instrucoes[25] = 32'b100101_00000000000000000000001000; 	// j
memoria_instrucoes[26] = 32'b011011_00011_10010_1111111111111111; 	// lw
memoria_instrucoes[27] = 32'b011010_10010_00111_0000000000000000; 	// mov
memoria_instrucoes[28] = 32'b011100_00000_01000_0000000000000001; 	// li
memoria_instrucoes[29] = 32'b101010_00000_00111_0000000000000001; 	// out
memoria_instrucoes[30] = 32'b011011_00011_10011_0000000000000000; 	// lw
memoria_instrucoes[31] = 32'b011010_10011_00111_0000000000000000; 	// mov
memoria_instrucoes[32] = 32'b011100_00000_01000_0000000000000010; 	// li
memoria_instrucoes[33] = 32'b101010_00000_00111_0000000000000010; 	// out
memoria_instrucoes[34] = 32'b101000_00000_11111_0000000000000000; 	// jr
memoria_instrucoes[35] = 32'b000010_00011_00011_0000000000000101; 	// addi
memoria_instrucoes[36] = 32'b011101_00011_01011_1111111111111011; 	// la
memoria_instrucoes[37] = 32'b011011_10101_10101_0000000000000000; 	// lw
memoria_instrucoes[38] = 32'b011110_01011_10101_0000000000000000; 	// sw
memoria_instrucoes[39] = 32'b011011_10110_10110_0000000000000000; 	// lw
memoria_instrucoes[40] = 32'b011110_01011_10110_0000000000000001; 	// sw
memoria_instrucoes[41] = 32'b011011_10111_10111_0000000000000000; 	// lw
memoria_instrucoes[42] = 32'b011110_01011_10111_0000000000000010; 	// sw
memoria_instrucoes[43] = 32'b011011_11000_11000_0000000000000000; 	// lw
memoria_instrucoes[44] = 32'b011110_01011_11000_0000000000000011; 	// sw
memoria_instrucoes[45] = 32'b011011_11001_11001_0000000000000000; 	// lw
memoria_instrucoes[46] = 32'b011110_01011_11001_0000000000000100; 	// sw
memoria_instrucoes[47] = 32'b011011_11010_11010_0000000000000000; 	// lw
memoria_instrucoes[48] = 32'b011110_01011_11010_0000000000000101; 	// sw
memoria_instrucoes[49] = 32'b011101_00011_00111_1111111111111011; 	// la
memoria_instrucoes[50] = 32'b011100_00000_01000_0000000000000110; 	// li
memoria_instrucoes[51] = 32'b100111_00000000000000000000000001; 	// jal
memoria_instrucoes[52] = 32'b011010_00001_11011_0000000000000000; 	// mov
memoria_instrucoes[53] = 32'b000100_00011_00011_0000000000000110; 	// subi
memoria_instrucoes[54] = 32'b111111_00000000000000000000000000; 	// halt
