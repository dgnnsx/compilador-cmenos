********** Código intermediário **********

1: (function, fibonacci, _, _)
2: (get_param, n, _, _)
3: (assign, first, 0, _)
4: (assign, second, 1, _)
5: (assign, c, 0, _)
6: (label, L1, _, _)
7: (less_than_equal_to, c, n, t1)
8: (jump_if_false, t1, L4, _)
9: (less_than_equal_to, c, 1, t2)
10: (jump_if_false, t2, L2, _)
11: (assign, next, c, _)
12: (goto, L3, _, _)
13: (label, L2, _, _)
14: (addition, first, second, t3)
15: (assign, next, t3, _)
16: (assign, first, second, _)
17: (assign, second, next, _)
18: (label, L3, _, _)
19: (addition, c, 1, t4)
20: (assign, c, t4, _)
21: (goto, L1, _, _)
22: (label, L4, _, _)
23: (return, next, _, _)
24: (function, main, _, _)
25: (param_list, 0, _, _)
26: (call, input, 0, t5)
27: (assign, n, t5, _)
28: (param_list, 2, _, _)
29: (param_list, 1, _, _)
30: (set_param, n, _, _)
31: (call, fibonacci, 1, t6)
32: (set_param, t6, _, _)
33: (set_param, 2, _, _)
34: (call, output, 2, t7)
35: (syscall, _, _, _)

********** Código objeto **********

fibonacci:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	li	$t0, 0
    3:	sw	$t0, -1($sp)
    4:	li	$t1, 1
    5:	sw	$t1, 0($sp)
    6:	li	$t2, 0
    7:	sw	$t2, -3($sp)
.L1	
    8:	lw	$s0, -3($sp)
    9:	lw	$s1, -4($sp)
    10:	let	$t3, $s0, $s1
    11:	jf	$t3, L4
    12:	li	$t5, 1
    13:	let	$t4, $s0, $t5
    14:	jf	$t4, L2
    15:	sw	$s0, -2($sp)
    16:	j	L3
.L2	
    17:	lw	$s0, -1($sp)
    18:	lw	$s1, 0($sp)
    19:	add	$t6, $s0, $s1
    20:	sw	$t6, -2($sp)
    21:	sw	$s1, -1($sp)
    22:	lw	$s0, -1($sp)
    23:	lw	$s2, -2($sp)
    24:	sw	$s2, 0($sp)
    25:	lw	$s1, 0($sp)
.L3	
    26:	lw	$s0, -3($sp)
    27:	addi	$t7, $s0, 1
    28:	sw	$t7, -3($sp)
    29:	lw	$s0, -3($sp)
    30:	j	L1
.L4	
    31:	lw	$s0, -2($sp)
    32:	mov	$v0, $s0
    33:	jr	$ra

main:
    34:	addi	$sp, $sp, 2
    35:	preIO	
    36:	in	$t0
    37:	sw	$t0, 0($sp)
    38:	lw	$s0, 0($sp)
    39:	mov	$a0, $s0
    40:	sw	$ra, -1($sp)
    41:	jal	fibonacci
    42:	subi	$sp, $sp, 7
    43:	lw	$ra, -1($sp)
    44:	mov	$s0, $v0
    45:	mov	$a0, $s0
    46:	li	$a1, 2
    47:	out	$a0, 2
    48:	subi	$sp, $sp, 2
    49:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000100011;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111100; 	// sw
disk[3] <= 32'b010000_00000_01111_0000000000000000; 	// li
disk[4] <= 32'b010010_11110_01111_1111111111111111; 	// sw
disk[5] <= 32'b010000_00000_10000_0000000000000001; 	// li
disk[6] <= 32'b010010_11110_10000_0000000000000000; 	// sw
disk[7] <= 32'b010000_00000_10001_0000000000000000; 	// li
disk[8] <= 32'b010010_11110_10001_1111111111111101; 	// sw
disk[9] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[10] <= 32'b001111_11110_00110_1111111111111100; 	// lw
disk[11] <= 32'b000000_00101_00110_10010_00000_001111; 	// let
disk[12] <= 32'b010101_10010_00000_0000000000100000; 	// jf
disk[13] <= 32'b010000_00000_10100_0000000000000001; 	// li
disk[14] <= 32'b000000_00101_10100_10011_00000_001111; 	// let
disk[15] <= 32'b010101_10011_00000_0000000000010010; 	// jf
disk[16] <= 32'b010010_11110_00101_1111111111111110; 	// sw
disk[17] <= 32'b111100_00000000000000000000011011; 	// j
disk[18] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[19] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[20] <= 32'b000000_00101_00110_10101_00000_000000; 	// add
disk[21] <= 32'b010010_11110_10101_1111111111111110; 	// sw
disk[22] <= 32'b010010_11110_00110_1111111111111111; 	// sw
disk[23] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[24] <= 32'b001111_11110_00111_1111111111111110; 	// lw
disk[25] <= 32'b010010_11110_00111_0000000000000000; 	// sw
disk[26] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[27] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[28] <= 32'b000001_00101_10110_0000000000000001; 	// addi
disk[29] <= 32'b010010_11110_10110_1111111111111101; 	// sw
disk[30] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[31] <= 32'b111100_00000000000000000000001001; 	// j
disk[32] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[33] <= 32'b001110_00101_11000_0000000000000000; 	// mov
disk[34] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[35] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[36] <= 32'b100100_00000000000000000000000000; 	// preIO
disk[37] <= 32'b010011_00000_01111_0000000000000000; 	// in
disk[38] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[39] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[40] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[41] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[42] <= 32'b111110_00000000000000000000000001; 	// jal
disk[43] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[44] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[45] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[46] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[47] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[48] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[49] <= 32'b000010_11110_11110_0000000000000010; 	// subi
disk[50] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
