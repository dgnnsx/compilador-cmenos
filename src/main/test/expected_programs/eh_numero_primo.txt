********** Código intermediário **********

1: (function, isPrime, _, _)
2: (get_param, n, _, _)
3: (less_than_equal_to, n, 1, t1)
4: (jump_if_false, t1, L1, _)
5: (return, 2, _, _)
6: (label, L1, _, _)
7: (less_than_equal_to, n, 3, t2)
8: (jump_if_false, t2, L2, _)
9: (return, 1, _, _)
10: (label, L2, _, _)
11: (modulo, n, 2, t3)
12: (equal, t3, 0, t4)
13: (jump_if_false, t4, L3, _)
14: (return, 2, _, _)
15: (label, L3, _, _)
16: (modulo, n, 3, t5)
17: (equal, t5, 0, t6)
18: (jump_if_false, t6, L4, _)
19: (return, 2, _, _)
20: (label, L4, _, _)
21: (assign, i, 5, _)
22: (label, L5, _, _)
23: (multiplication, i, i, t7)
24: (less_than_equal_to, t7, n, t8)
25: (jump_if_false, t8, L8, _)
26: (modulo, n, i, t9)
27: (equal, t9, 0, t10)
28: (jump_if_false, t10, L6, _)
29: (return, 2, _, _)
30: (label, L6, _, _)
31: (addition, i, 2, t11)
32: (modulo, n, t11, t12)
33: (equal, t12, 0, t13)
34: (jump_if_false, t13, L7, _)
35: (return, 2, _, _)
36: (label, L7, _, _)
37: (addition, i, 6, t14)
38: (assign, i, t14, _)
39: (goto, L5, _, _)
40: (label, L8, _, _)
41: (return, 1, _, _)
42: (function, main, _, _)
43: (param_list, 0, _, _)
44: (call, input, 0, t15)
45: (assign, number, t15, _)
46: (param_list, 2, _, _)
47: (param_list, 1, _, _)
48: (set_param, number, _, _)
49: (call, isPrime, 1, t16)
50: (set_param, t16, _, _)
51: (set_param, 2, _, _)
52: (call, output, 2, t17)
53: (syscall, _, _, _)

********** Código objeto **********

isPrime:
    0:	addi	$sp, $sp, 4
    1:	sw	$a0, -1($sp)
    2:	lw	$s0, -1($sp)
    3:	li	$t1, 1
    4:	let	$t0, $s0, $t1
    5:	jf	$t0, L1
    6:	li	$t2, 2
    7:	mov	$v0, $t2
    8:	jr	$ra
.L1	
    9:	lw	$s0, -1($sp)
    10:	li	$t4, 3
    11:	let	$t3, $s0, $t4
    12:	jf	$t3, L2
    13:	li	$t5, 1
    14:	mov	$v0, $t5
    15:	jr	$ra
.L2	
    16:	lw	$s0, -1($sp)
    17:	modi	$t6, $s0, 2
    18:	li	$t8, 0
    19:	eq	$t7, $t6, $t8
    20:	jf	$t7, L3
    21:	li	$t0, 2
    22:	mov	$v0, $t0
    23:	jr	$ra
.L3	
    24:	lw	$s0, -1($sp)
    25:	modi	$t1, $s0, 3
    26:	li	$t3, 0
    27:	eq	$t2, $t1, $t3
    28:	jf	$t2, L4
    29:	li	$t4, 2
    30:	mov	$v0, $t4
    31:	jr	$ra
.L4	
    32:	li	$t5, 5
    33:	sw	$t5, 0($sp)
.L5	
    34:	lw	$s0, 0($sp)
    35:	mul	$t6, $s0, $s0
    36:	lw	$s1, -1($sp)
    37:	let	$t7, $t6, $s1
    38:	jf	$t7, L8
    39:	mod	$t8, $s1, $s0
    40:	li	$t1, 0
    41:	eq	$t0, $t8, $t1
    42:	jf	$t0, L6
    43:	li	$t2, 2
    44:	mov	$v0, $t2
    45:	jr	$ra
.L6	
    46:	lw	$s0, 0($sp)
    47:	addi	$t3, $s0, 2
    48:	lw	$s1, -1($sp)
    49:	mod	$t4, $s1, $t3
    50:	li	$t6, 0
    51:	eq	$t5, $t4, $t6
    52:	jf	$t5, L7
    53:	li	$t7, 2
    54:	mov	$v0, $t7
    55:	jr	$ra
.L7	
    56:	lw	$s0, 0($sp)
    57:	addi	$t8, $s0, 6
    58:	sw	$t8, 0($sp)
    59:	lw	$s0, 0($sp)
    60:	j	L5
.L8	
    61:	li	$t0, 1
    62:	mov	$v0, $t0
    63:	jr	$ra

main:
    64:	addi	$sp, $sp, 2
    65:	preIO	
    66:	in	$t0
    67:	sw	$t0, 0($sp)
    68:	lw	$s0, 0($sp)
    69:	mov	$a0, $s0
    70:	sw	$ra, -1($sp)
    71:	jal	isPrime
    72:	subi	$sp, $sp, 4
    73:	lw	$ra, -1($sp)
    74:	mov	$s0, $v0
    75:	mov	$a0, $s0
    76:	li	$a1, 2
    77:	out	$a0, 2
    78:	subi	$sp, $sp, 2
    79:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000001000001;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000100; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111111; 	// sw
disk[3] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[4] <= 32'b010000_00000_10000_0000000000000001; 	// li
disk[5] <= 32'b000000_00101_10000_01111_00000_001111; 	// let
disk[6] <= 32'b010101_01111_00000_0000000000001010; 	// jf
disk[7] <= 32'b010000_00000_10001_0000000000000010; 	// li
disk[8] <= 32'b001110_10001_11000_0000000000000000; 	// mov
disk[9] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[10] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[11] <= 32'b010000_00000_10011_0000000000000011; 	// li
disk[12] <= 32'b000000_00101_10011_10010_00000_001111; 	// let
disk[13] <= 32'b010101_10010_00000_0000000000010001; 	// jf
disk[14] <= 32'b010000_00000_10100_0000000000000001; 	// li
disk[15] <= 32'b001110_10100_11000_0000000000000000; 	// mov
disk[16] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[17] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[18] <= 32'b000101_00101_10101_0000000000000010; 	// modi
disk[19] <= 32'b010000_00000_10111_0000000000000000; 	// li
disk[20] <= 32'b000000_10101_10111_10110_00000_001100; 	// eq
disk[21] <= 32'b010101_10110_00000_0000000000011001; 	// jf
disk[22] <= 32'b010000_00000_01111_0000000000000010; 	// li
disk[23] <= 32'b001110_01111_11000_0000000000000000; 	// mov
disk[24] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[25] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[26] <= 32'b000101_00101_10000_0000000000000011; 	// modi
disk[27] <= 32'b010000_00000_10010_0000000000000000; 	// li
disk[28] <= 32'b000000_10000_10010_10001_00000_001100; 	// eq
disk[29] <= 32'b010101_10001_00000_0000000000100001; 	// jf
disk[30] <= 32'b010000_00000_10011_0000000000000010; 	// li
disk[31] <= 32'b001110_10011_11000_0000000000000000; 	// mov
disk[32] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[33] <= 32'b010000_00000_10100_0000000000000101; 	// li
disk[34] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[35] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[36] <= 32'b000000_00101_00101_10101_00000_000010; 	// mul
disk[37] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[38] <= 32'b000000_10101_00110_10110_00000_001111; 	// let
disk[39] <= 32'b010101_10110_00000_0000000000111110; 	// jf
disk[40] <= 32'b000000_00110_00101_10111_00000_000100; 	// mod
disk[41] <= 32'b010000_00000_10000_0000000000000000; 	// li
disk[42] <= 32'b000000_10111_10000_01111_00000_001100; 	// eq
disk[43] <= 32'b010101_01111_00000_0000000000101111; 	// jf
disk[44] <= 32'b010000_00000_10001_0000000000000010; 	// li
disk[45] <= 32'b001110_10001_11000_0000000000000000; 	// mov
disk[46] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[47] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[48] <= 32'b000001_00101_10010_0000000000000010; 	// addi
disk[49] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[50] <= 32'b000000_00110_10010_10011_00000_000100; 	// mod
disk[51] <= 32'b010000_00000_10101_0000000000000000; 	// li
disk[52] <= 32'b000000_10011_10101_10100_00000_001100; 	// eq
disk[53] <= 32'b010101_10100_00000_0000000000111001; 	// jf
disk[54] <= 32'b010000_00000_10110_0000000000000010; 	// li
disk[55] <= 32'b001110_10110_11000_0000000000000000; 	// mov
disk[56] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[57] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[58] <= 32'b000001_00101_10111_0000000000000110; 	// addi
disk[59] <= 32'b010010_11110_10111_0000000000000000; 	// sw
disk[60] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[61] <= 32'b111100_00000000000000000000100011; 	// j
disk[62] <= 32'b010000_00000_01111_0000000000000001; 	// li
disk[63] <= 32'b001110_01111_11000_0000000000000000; 	// mov
disk[64] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[65] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[66] <= 32'b100100_00000000000000000000000000; 	// preIO
disk[67] <= 32'b010011_00000_01111_0000000000000000; 	// in
disk[68] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[69] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[70] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[71] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[72] <= 32'b111110_00000000000000000000000001; 	// jal
disk[73] <= 32'b000010_11110_11110_0000000000000100; 	// subi
disk[74] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[75] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[76] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[77] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[78] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[79] <= 32'b000010_11110_11110_0000000000000010; 	// subi
disk[80] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
