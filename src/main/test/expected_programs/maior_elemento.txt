********** Código intermediário **********

1: (function, findMax, _, _)
2: (get_param, vetor, _, _)
3: (get_param, tam, _, _)
4: (assign, i, 0, _)
5: (assign, max, 0, _)
6: (param_list, 2, _, _)
7: (vector_value, vetor, 1, t1)
8: (set_param, t1, _, _)
9: (set_param, 2, _, _)
10: (call, output, 2, t2)
11: (label, L1, _, _)
12: (less_than, i, tam, t3)
13: (jump_if_false, t3, L3, _)
14: (vector_value, vetor, i, t4)
15: (less_than, max, t4, t5)
16: (jump_if_false, t5, L2, _)
17: (vector_value, vetor, i, t6)
18: (assign, max, t6, _)
19: (assign, pos, i, _)
20: (label, L2, _, _)
21: (addition, i, 1, t7)
22: (assign, i, t7, _)
23: (goto, L1, _, _)
24: (label, L3, _, _)
25: (return, _, _, _)
26: (function, main, _, _)
27: (vector_address, vetor, 0, t9)
28: (assign, vetor, 12, 0)
29: (vector_address, vetor, 1, t10)
30: (assign, vetor, 41, 1)
31: (vector_address, vetor, 2, t11)
32: (assign, vetor, 23, 2)
33: (vector_address, vetor, 3, t12)
34: (assign, vetor, 98, 3)
35: (vector_address, vetor, 4, t13)
36: (assign, vetor, 33, 4)
37: (vector_address, vetor, 5, t14)
38: (assign, vetor, 21, 5)
39: (param_list, 2, _, _)
40: (vector_value, vetor, 1, t15)
41: (set_param, t15, _, _)
42: (set_param, 1, _, _)
43: (call, output, 2, t16)
44: (param_list, 2, _, _)
45: (set_param, vetor, _, _)
46: (set_param, 6, _, _)
47: (call, findMax, 2, t17)
48: (syscall, _, _, _)

********** Código objeto **********

findMax:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	sw	$a1, -3($sp)
    3:	li	$t0, 0
    4:	sw	$t0, -2($sp)
    5:	li	$t1, 0
    6:	sw	$t1, 0($sp)
    7:	lw	$s0, -4($sp)
    8:	lw	$t2, 1($s0)
    9:	mov	$a0, $t2
    10:	li	$a1, 2
    11:	out	$a0, 2
.L1	
    12:	lw	$s0, -2($sp)
    13:	lw	$s1, -3($sp)
    14:	lt	$t3, $s0, $s1
    15:	jf	$t3, L3
    16:	lw	$s2, -4($sp)
    17:	add	$t4, $s2, $s0
    18:	lw	$t4, 0($t4)
    19:	lw	$s3, 0($sp)
    20:	lt	$t5, $s3, $t4
    21:	jf	$t5, L2
    22:	add	$t6, $s2, $s0
    23:	lw	$t6, 0($t6)
    24:	sw	$t6, 0($sp)
    25:	lw	$s3, 0($sp)
    26:	sw	$s0, -1($sp)
.L2	
    27:	lw	$s0, -2($sp)
    28:	addi	$t7, $s0, 1
    29:	sw	$t7, -2($sp)
    30:	lw	$s0, -2($sp)
    31:	j	L1
.L3	
    32:	jr	$ra

main:
    33:	addi	$sp, $sp, 7
    34:	la	$s0, -5($sp)
    35:	li	$t0, 12
    36:	sw	$t0, 0($s0)
    37:	li	$t1, 41
    38:	sw	$t1, 1($s0)
    39:	li	$t2, 23
    40:	sw	$t2, 2($s0)
    41:	li	$t3, 98
    42:	sw	$t3, 3($s0)
    43:	li	$t4, 33
    44:	sw	$t4, 4($s0)
    45:	li	$t5, 21
    46:	sw	$t5, 5($s0)
    47:	lw	$t6, 1($s0)
    48:	mov	$a0, $t6
    49:	li	$a1, 1
    50:	out	$a0, 1
    51:	la	$a0, -5($sp)
    52:	li	$a1, 6
    53:	sw	$ra, -6($sp)
    54:	jal	findMax
    55:	subi	$sp, $sp, 7
    56:	lw	$ra, -6($sp)
    57:	mov	$s0, $v0
    58:	subi	$sp, $sp, 7
    59:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000100010;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111100; 	// sw
disk[3] <= 32'b010010_11110_00010_1111111111111101; 	// sw
disk[4] <= 32'b010000_00000_01111_0000000000000000; 	// li
disk[5] <= 32'b010010_11110_01111_1111111111111110; 	// sw
disk[6] <= 32'b010000_00000_10000_0000000000000000; 	// li
disk[7] <= 32'b010010_11110_10000_0000000000000000; 	// sw
disk[8] <= 32'b001111_11110_00101_1111111111111100; 	// lw
disk[9] <= 32'b001111_00101_10001_0000000000000001; 	// lw
disk[10] <= 32'b001110_10001_00001_0000000000000000; 	// mov
disk[11] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[12] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[13] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[14] <= 32'b001111_11110_00110_1111111111111101; 	// lw
disk[15] <= 32'b000000_00101_00110_10010_00000_001110; 	// lt
disk[16] <= 32'b010101_10010_00000_0000000000100001; 	// jf
disk[17] <= 32'b001111_11110_00111_1111111111111100; 	// lw
disk[18] <= 32'b000000_00111_00101_10011_00000_000000; 	// add
disk[19] <= 32'b001111_10011_10011_0000000000000000; 	// lw
disk[20] <= 32'b001111_11110_01000_0000000000000000; 	// lw
disk[21] <= 32'b000000_01000_10011_10100_00000_001110; 	// lt
disk[22] <= 32'b010101_10100_00000_0000000000011100; 	// jf
disk[23] <= 32'b000000_00111_00101_10101_00000_000000; 	// add
disk[24] <= 32'b001111_10101_10101_0000000000000000; 	// lw
disk[25] <= 32'b010010_11110_10101_0000000000000000; 	// sw
disk[26] <= 32'b001111_11110_01000_0000000000000000; 	// lw
disk[27] <= 32'b010010_11110_00101_1111111111111111; 	// sw
disk[28] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[29] <= 32'b000001_00101_10110_0000000000000001; 	// addi
disk[30] <= 32'b010010_11110_10110_1111111111111110; 	// sw
disk[31] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[32] <= 32'b111100_00000000000000000000001101; 	// j
disk[33] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[34] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[35] <= 32'b010001_11110_00101_1111111111111011; 	// la
disk[36] <= 32'b010000_00000_01111_0000000000001100; 	// li
disk[37] <= 32'b010010_00101_01111_0000000000000000; 	// sw
disk[38] <= 32'b010000_00000_10000_0000000000101001; 	// li
disk[39] <= 32'b010010_00101_10000_0000000000000001; 	// sw
disk[40] <= 32'b010000_00000_10001_0000000000010111; 	// li
disk[41] <= 32'b010010_00101_10001_0000000000000010; 	// sw
disk[42] <= 32'b010000_00000_10010_0000000001100010; 	// li
disk[43] <= 32'b010010_00101_10010_0000000000000011; 	// sw
disk[44] <= 32'b010000_00000_10011_0000000000100001; 	// li
disk[45] <= 32'b010010_00101_10011_0000000000000100; 	// sw
disk[46] <= 32'b010000_00000_10100_0000000000010101; 	// li
disk[47] <= 32'b010010_00101_10100_0000000000000101; 	// sw
disk[48] <= 32'b001111_00101_10101_0000000000000001; 	// lw
disk[49] <= 32'b001110_10101_00001_0000000000000000; 	// mov
disk[50] <= 32'b010000_00000_00010_0000000000000001; 	// li
disk[51] <= 32'b010100_00000_00001_0000000000000001; 	// out
disk[52] <= 32'b010001_11110_00001_1111111111111011; 	// la
disk[53] <= 32'b010000_00000_00010_0000000000000110; 	// li
disk[54] <= 32'b010010_11110_11111_1111111111111010; 	// sw
disk[55] <= 32'b111110_00000000000000000000000001; 	// jal
disk[56] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[57] <= 32'b001111_11110_11111_1111111111111010; 	// lw
disk[58] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[59] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[60] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
