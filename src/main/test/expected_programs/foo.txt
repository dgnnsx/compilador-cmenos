********** Código intermediário **********

1: (function, foo, _, _)
2: (get_param, x, _, _)
3: (get_param, y, _, _)
4: (get_param, z, _, _)
5: (get_param, w, _, _)
6: (assign, result, 0, _)
7: (label, L1, _, _)
8: (greater_than_equal_to, result, 0, t2)
9: (jump_if_false, t2, L8, _)
10: (less_than, x, 2, t3)
11: (jump_if_false, t3, L2, _)
12: (addition, x, y, t4)
13: (assign, result, t4, _)
14: (label, L2, _, _)
15: (greater_than, y, 2, t5)
16: (jump_if_false, t5, L3, _)
17: (addition, result, y, t6)
18: (addition, t6, z, t7)
19: (assign, result, t7, _)
20: (goto, L4, _, _)
21: (label, L3, _, _)
22: (multiplication, result, 3, t8)
23: (assign, result, t8, _)
24: (label, L4, _, _)
25: (less_than_equal_to, w, 4, t9)
26: (jump_if_false, t9, L7, _)
27: (equal, z, 0, t10)
28: (jump_if_false, t10, L5, _)
29: (return, 0, _, _)
30: (label, L5, _, _)
31: (not_equal, result, 0, t11)
32: (jump_if_false, t11, L6, _)
33: (subtraction, w, 1, t12)
34: (division, result, t12, t13)
35: (return, t13, _, _)
36: (label, L6, _, _)
37: (label, L7, _, _)
38: (goto, L1, _, _)
39: (label, L8, _, _)
40: (return, _, _, _)
41: (function, main, _, _)
42: (param_list, 0, _, _)
43: (call, input, 0, t14)
44: (vector_address, vetor, 0, t15)
45: (assign, vetor, t14, 0)
46: (param_list, 4, _, _)
47: (set_param, 1, _, _)
48: (vector_value, vetor, 0, t16)
49: (set_param, t16, _, _)
50: (set_param, 3, _, _)
51: (set_param, 4, _, _)
52: (call, foo, 4, t17)
53: (vector_address, vetor, 1, t18)
54: (assign, vetor, t17, 1)
55: (param_list, 2, _, _)
56: (vector_value, vetor, 1, t19)
57: (set_param, t19, _, _)
58: (set_param, 2, _, _)
59: (call, output, 2, t20)
60: (syscall, _, _, _)

********** Código objeto **********

foo:
    0:	addi	$sp, $sp, 7
    1:	sw	$a0, -4($sp)
    2:	sw	$a1, -3($sp)
    3:	sw	$a2, -2($sp)
    4:	sw	$a3, -1($sp)
    5:	li	$t0, 0
    6:	sw	$t0, 0($sp)
.L1	
    7:	lw	$s0, 0($sp)
    8:	li	$t2, 0
    9:	get	$t1, $s0, $t2
    10:	jf	$t1, L8
    11:	lw	$s1, -4($sp)
    12:	li	$t4, 2
    13:	lt	$t3, $s1, $t4
    14:	jf	$t3, L2
    15:	lw	$s2, -3($sp)
    16:	add	$t5, $s1, $s2
    17:	sw	$t5, 0($sp)
    18:	lw	$s0, 0($sp)
.L2	
    19:	lw	$s0, -3($sp)
    20:	li	$t7, 2
    21:	gt	$t6, $s0, $t7
    22:	jf	$t6, L3
    23:	lw	$s1, 0($sp)
    24:	add	$t8, $s1, $s0
    25:	lw	$s2, -2($sp)
    26:	add	$t0, $t8, $s2
    27:	sw	$t0, 0($sp)
    28:	lw	$s1, 0($sp)
    29:	j	L4
.L3	
    30:	lw	$s0, 0($sp)
    31:	muli	$t1, $s0, 3
    32:	sw	$t1, 0($sp)
    33:	lw	$s0, 0($sp)
.L4	
    34:	lw	$s0, -1($sp)
    35:	li	$t3, 4
    36:	let	$t2, $s0, $t3
    37:	jf	$t2, L7
    38:	lw	$s1, -2($sp)
    39:	li	$t5, 0
    40:	eq	$t4, $s1, $t5
    41:	jf	$t4, L5
    42:	li	$t6, 0
    43:	mov	$v0, $t6
    44:	jr	$ra
.L5	
    45:	lw	$s0, 0($sp)
    46:	li	$t8, 0
    47:	ne	$t7, $s0, $t8
    48:	jf	$t7, L6
    49:	lw	$s1, -1($sp)
    50:	subi	$t0, $s1, 1
    51:	div	$t1, $s0, $t0
    52:	mov	$v0, $t1
    53:	jr	$ra
.L6	
.L7	
    54:	j	L1
.L8	
    55:	jr	$ra

main:
    56:	addi	$sp, $gp, 1
    57:	addi	$sp, $sp, 3
    58:	preIO	
    59:	in	$t0
    60:	la	$s0, 0($gp)
    61:	sw	$t0, 0($s0)
    62:	li	$a0, 1
    63:	lw	$t1, 0($s0)
    64:	mov	$a1, $t1
    65:	li	$a2, 3
    66:	li	$a3, 4
    67:	sw	$ra, 0($sp)
    68:	jal	foo
    69:	subi	$sp, $sp, 7
    70:	lw	$ra, 0($sp)
    71:	mov	$s0, $v0
    72:	la	$s1, 0($gp)
    73:	sw	$s0, 1($s1)
    74:	lw	$t2, 1($s1)
    75:	mov	$a0, $t2
    76:	li	$a1, 2
    77:	out	$a0, 2
    78:	subi	$sp, $sp, 3
    79:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000111001;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000111; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111100; 	// sw
disk[3] <= 32'b010010_11110_00010_1111111111111101; 	// sw
disk[4] <= 32'b010010_11110_00011_1111111111111110; 	// sw
disk[5] <= 32'b010010_11110_00100_1111111111111111; 	// sw
disk[6] <= 32'b010000_00000_01111_0000000000000000; 	// li
disk[7] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[8] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[9] <= 32'b010000_00000_10001_0000000000000000; 	// li
disk[10] <= 32'b000000_00101_10001_10000_00000_010001; 	// get
disk[11] <= 32'b010101_10000_00000_0000000000111000; 	// jf
disk[12] <= 32'b001111_11110_00110_1111111111111100; 	// lw
disk[13] <= 32'b010000_00000_10011_0000000000000010; 	// li
disk[14] <= 32'b000000_00110_10011_10010_00000_001110; 	// lt
disk[15] <= 32'b010101_10010_00000_0000000000010100; 	// jf
disk[16] <= 32'b001111_11110_00111_1111111111111101; 	// lw
disk[17] <= 32'b000000_00110_00111_10100_00000_000000; 	// add
disk[18] <= 32'b010010_11110_10100_0000000000000000; 	// sw
disk[19] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[20] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[21] <= 32'b010000_00000_10110_0000000000000010; 	// li
disk[22] <= 32'b000000_00101_10110_10101_00000_010000; 	// gt
disk[23] <= 32'b010101_10101_00000_0000000000011111; 	// jf
disk[24] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[25] <= 32'b000000_00110_00101_10111_00000_000000; 	// add
disk[26] <= 32'b001111_11110_00111_1111111111111110; 	// lw
disk[27] <= 32'b000000_10111_00111_01111_00000_000000; 	// add
disk[28] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[29] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[30] <= 32'b111100_00000000000000000000100011; 	// j
disk[31] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[32] <= 32'b000011_00101_10000_0000000000000011; 	// muli
disk[33] <= 32'b010010_11110_10000_0000000000000000; 	// sw
disk[34] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[35] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[36] <= 32'b010000_00000_10010_0000000000000100; 	// li
disk[37] <= 32'b000000_00101_10010_10001_00000_001111; 	// let
disk[38] <= 32'b010101_10001_00000_0000000000110111; 	// jf
disk[39] <= 32'b001111_11110_00110_1111111111111110; 	// lw
disk[40] <= 32'b010000_00000_10100_0000000000000000; 	// li
disk[41] <= 32'b000000_00110_10100_10011_00000_001100; 	// eq
disk[42] <= 32'b010101_10011_00000_0000000000101110; 	// jf
disk[43] <= 32'b010000_00000_10101_0000000000000000; 	// li
disk[44] <= 32'b001110_10101_11000_0000000000000000; 	// mov
disk[45] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[46] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[47] <= 32'b010000_00000_10111_0000000000000000; 	// li
disk[48] <= 32'b000000_00101_10111_10110_00000_001101; 	// ne
disk[49] <= 32'b010101_10110_00000_0000000000110111; 	// jf
disk[50] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[51] <= 32'b000010_00110_01111_0000000000000001; 	// subi
disk[52] <= 32'b000000_00101_01111_10000_00000_000011; 	// div
disk[53] <= 32'b001110_10000_11000_0000000000000000; 	// mov
disk[54] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[55] <= 32'b111100_00000000000000000000001000; 	// j
disk[56] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[57] <= 32'b000001_11101_11110_0000000000000001; 	// addi
disk[58] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[59] <= 32'b100100_00000000000000000000000000; 	// preIO
disk[60] <= 32'b010011_00000_01111_0000000000000000; 	// in
disk[61] <= 32'b010001_11101_00101_0000000000000000; 	// la
disk[62] <= 32'b010010_00101_01111_0000000000000000; 	// sw
disk[63] <= 32'b010000_00000_00001_0000000000000001; 	// li
disk[64] <= 32'b001111_00101_10000_0000000000000000; 	// lw
disk[65] <= 32'b001110_10000_00010_0000000000000000; 	// mov
disk[66] <= 32'b010000_00000_00011_0000000000000011; 	// li
disk[67] <= 32'b010000_00000_00100_0000000000000100; 	// li
disk[68] <= 32'b010010_11110_11111_0000000000000000; 	// sw
disk[69] <= 32'b111110_00000000000000000000000001; 	// jal
disk[70] <= 32'b000010_11110_11110_0000000000000111; 	// subi
disk[71] <= 32'b001111_11110_11111_0000000000000000; 	// lw
disk[72] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[73] <= 32'b010001_11101_00110_0000000000000000; 	// la
disk[74] <= 32'b010010_00110_00101_0000000000000001; 	// sw
disk[75] <= 32'b001111_00110_10001_0000000000000001; 	// lw
disk[76] <= 32'b001110_10001_00001_0000000000000000; 	// mov
disk[77] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[78] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[79] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[80] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
