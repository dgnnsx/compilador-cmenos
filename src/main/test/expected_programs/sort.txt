********** Código intermediário **********

1: (function, sort, _, _)
2: (get_param, num, _, _)
3: (get_param, tam, _, _)
4: (assign, i, 0, _)
5: (label, L1, _, _)
6: (subtraction, tam, 1, t1)
7: (less_than, i, t1, t2)
8: (jump_if_false, t2, L6, _)
9: (assign, min, i, _)
10: (addition, i, 1, t3)
11: (assign, j, t3, _)
12: (label, L2, _, _)
13: (less_than, j, tam, t4)
14: (jump_if_false, t4, L4, _)
15: (vector_value, num, j, t5)
16: (vector_value, num, min, t6)
17: (less_than, t5, t6, t7)
18: (jump_if_false, t7, L3, _)
19: (assign, min, j, _)
20: (label, L3, _, _)
21: (addition, j, 1, t8)
22: (assign, j, t8, _)
23: (goto, L2, _, _)
24: (label, L4, _, _)
25: (not_equal, i, min, t9)
26: (jump_if_false, t9, L5, _)
27: (vector_value, num, i, t10)
28: (assign, aux, t10, _)
29: (vector_value, num, min, t11)
30: (vector_address, num, i, t12)
31: (assign, t12, t11, _)
32: (vector_address, num, min, t13)
33: (assign, t13, aux, _)
34: (label, L5, _, _)
35: (addition, i, 1, t14)
36: (assign, i, t14, _)
37: (goto, L1, _, _)
38: (label, L6, _, _)
39: (return, _, _, _)
40: (function, main, _, _)
41: (vector_address, vetor, 0, t16)
42: (assign, vetor, 9, 0)
43: (vector_address, vetor, 1, t17)
44: (assign, vetor, 6, 1)
45: (vector_address, vetor, 2, t18)
46: (assign, vetor, 8, 2)
47: (vector_address, vetor, 3, t19)
48: (assign, vetor, 7, 3)
49: (param_list, 2, _, _)
50: (set_param, vetor, _, _)
51: (set_param, 4, _, _)
52: (call, sort, 2, t20)
53: (param_list, 0, _, _)
54: (call, input, 0, t21)
55: (assign, i, t21, _)
56: (param_list, 2, _, _)
57: (vector_value, vetor, i, t22)
58: (set_param, t22, _, _)
59: (set_param, 2, _, _)
60: (call, output, 2, t23)
61: (syscall, _, _, _)

********** Código objeto **********

sort:
    0:	addi	$sp, $sp, 8
    1:	sw	$a0, -5($sp)
    2:	sw	$a1, -4($sp)
    3:	li	$t0, 0
    4:	sw	$t0, -3($sp)
.L1	
    5:	lw	$s0, -4($sp)
    6:	subi	$t1, $s0, 1
    7:	lw	$s1, -3($sp)
    8:	lt	$t2, $s1, $t1
    9:	jf	$t2, L6
    10:	sw	$s1, -1($sp)
    11:	addi	$t3, $s1, 1
    12:	sw	$t3, -2($sp)
.L2	
    13:	lw	$s0, -2($sp)
    14:	lw	$s1, -4($sp)
    15:	lt	$t4, $s0, $s1
    16:	jf	$t4, L4
    17:	lw	$s2, -5($sp)
    18:	add	$t5, $s2, $s0
    19:	lw	$t5, 0($t5)
    20:	lw	$s3, -1($sp)
    21:	add	$t6, $s2, $s3
    22:	lw	$t6, 0($t6)
    23:	lt	$t7, $t5, $t6
    24:	jf	$t7, L3
    25:	sw	$s0, -1($sp)
    26:	lw	$s3, -1($sp)
.L3	
    27:	lw	$s0, -2($sp)
    28:	addi	$t8, $s0, 1
    29:	sw	$t8, -2($sp)
    30:	lw	$s0, -2($sp)
    31:	j	L2
.L4	
    32:	lw	$s0, -3($sp)
    33:	lw	$s1, -1($sp)
    34:	ne	$t0, $s0, $s1
    35:	jf	$t0, L5
    36:	lw	$s2, -5($sp)
    37:	add	$t1, $s2, $s0
    38:	lw	$t1, 0($t1)
    39:	sw	$t1, 0($sp)
    40:	add	$t2, $s2, $s1
    41:	lw	$t2, 0($t2)
    42:	add	$t3, $s2, $s0
    43:	sw	$t2, 0($t3)
    44:	add	$t4, $s2, $s1
    45:	lw	$s3, 0($sp)
    46:	sw	$s3, 0($t4)
.L5	
    47:	lw	$s0, -3($sp)
    48:	addi	$t5, $s0, 1
    49:	sw	$t5, -3($sp)
    50:	lw	$s0, -3($sp)
    51:	j	L1
.L6	
    52:	jr	$ra

main:
    53:	addi	$sp, $sp, 6
    54:	la	$s0, -4($sp)
    55:	li	$t0, 9
    56:	sw	$t0, 0($s0)
    57:	li	$t1, 6
    58:	sw	$t1, 1($s0)
    59:	li	$t2, 8
    60:	sw	$t2, 2($s0)
    61:	li	$t3, 7
    62:	sw	$t3, 3($s0)
    63:	la	$a0, -4($sp)
    64:	li	$a1, 4
    65:	sw	$ra, -5($sp)
    66:	jal	sort
    67:	subi	$sp, $sp, 8
    68:	lw	$ra, -5($sp)
    69:	mov	$s0, $v0
    70:	preIO	
    71:	in	$t4
    72:	sw	$t4, 0($sp)
    73:	la	$s1, -4($sp)
    74:	lw	$s2, 0($sp)
    75:	add	$t5, $s1, $s2
    76:	lw	$t5, 0($t5)
    77:	mov	$a0, $t5
    78:	li	$a1, 2
    79:	out	$a0, 2
    80:	subi	$sp, $sp, 6
    81:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000110110;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000001000; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111011; 	// sw
disk[3] <= 32'b010010_11110_00010_1111111111111100; 	// sw
disk[4] <= 32'b010000_00000_01111_0000000000000000; 	// li
disk[5] <= 32'b010010_11110_01111_1111111111111101; 	// sw
disk[6] <= 32'b001111_11110_00101_1111111111111100; 	// lw
disk[7] <= 32'b000010_00101_10000_0000000000000001; 	// subi
disk[8] <= 32'b001111_11110_00110_1111111111111101; 	// lw
disk[9] <= 32'b000000_00110_10000_10001_00000_001110; 	// lt
disk[10] <= 32'b010101_10001_00000_0000000000110101; 	// jf
disk[11] <= 32'b010010_11110_00110_1111111111111111; 	// sw
disk[12] <= 32'b000001_00110_10010_0000000000000001; 	// addi
disk[13] <= 32'b010010_11110_10010_1111111111111110; 	// sw
disk[14] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[15] <= 32'b001111_11110_00110_1111111111111100; 	// lw
disk[16] <= 32'b000000_00101_00110_10011_00000_001110; 	// lt
disk[17] <= 32'b010101_10011_00000_0000000000100001; 	// jf
disk[18] <= 32'b001111_11110_00111_1111111111111011; 	// lw
disk[19] <= 32'b000000_00111_00101_10100_00000_000000; 	// add
disk[20] <= 32'b001111_10100_10100_0000000000000000; 	// lw
disk[21] <= 32'b001111_11110_01000_1111111111111111; 	// lw
disk[22] <= 32'b000000_00111_01000_10101_00000_000000; 	// add
disk[23] <= 32'b001111_10101_10101_0000000000000000; 	// lw
disk[24] <= 32'b000000_10100_10101_10110_00000_001110; 	// lt
disk[25] <= 32'b010101_10110_00000_0000000000011100; 	// jf
disk[26] <= 32'b010010_11110_00101_1111111111111111; 	// sw
disk[27] <= 32'b001111_11110_01000_1111111111111111; 	// lw
disk[28] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[29] <= 32'b000001_00101_10111_0000000000000001; 	// addi
disk[30] <= 32'b010010_11110_10111_1111111111111110; 	// sw
disk[31] <= 32'b001111_11110_00101_1111111111111110; 	// lw
disk[32] <= 32'b111100_00000000000000000000001110; 	// j
disk[33] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[34] <= 32'b001111_11110_00110_1111111111111111; 	// lw
disk[35] <= 32'b000000_00101_00110_01111_00000_001101; 	// ne
disk[36] <= 32'b010101_01111_00000_0000000000110000; 	// jf
disk[37] <= 32'b001111_11110_00111_1111111111111011; 	// lw
disk[38] <= 32'b000000_00111_00101_10000_00000_000000; 	// add
disk[39] <= 32'b001111_10000_10000_0000000000000000; 	// lw
disk[40] <= 32'b010010_11110_10000_0000000000000000; 	// sw
disk[41] <= 32'b000000_00111_00110_10001_00000_000000; 	// add
disk[42] <= 32'b001111_10001_10001_0000000000000000; 	// lw
disk[43] <= 32'b000000_00111_00101_10010_00000_000000; 	// add
disk[44] <= 32'b010010_10010_10001_0000000000000000; 	// sw
disk[45] <= 32'b000000_00111_00110_10011_00000_000000; 	// add
disk[46] <= 32'b001111_11110_01000_0000000000000000; 	// lw
disk[47] <= 32'b010010_10011_01000_0000000000000000; 	// sw
disk[48] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[49] <= 32'b000001_00101_10100_0000000000000001; 	// addi
disk[50] <= 32'b010010_11110_10100_1111111111111101; 	// sw
disk[51] <= 32'b001111_11110_00101_1111111111111101; 	// lw
disk[52] <= 32'b111100_00000000000000000000000110; 	// j
disk[53] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[54] <= 32'b000001_11110_11110_0000000000000110; 	// addi
disk[55] <= 32'b010001_11110_00101_1111111111111100; 	// la
disk[56] <= 32'b010000_00000_01111_0000000000001001; 	// li
disk[57] <= 32'b010010_00101_01111_0000000000000000; 	// sw
disk[58] <= 32'b010000_00000_10000_0000000000000110; 	// li
disk[59] <= 32'b010010_00101_10000_0000000000000001; 	// sw
disk[60] <= 32'b010000_00000_10001_0000000000001000; 	// li
disk[61] <= 32'b010010_00101_10001_0000000000000010; 	// sw
disk[62] <= 32'b010000_00000_10010_0000000000000111; 	// li
disk[63] <= 32'b010010_00101_10010_0000000000000011; 	// sw
disk[64] <= 32'b010001_11110_00001_1111111111111100; 	// la
disk[65] <= 32'b010000_00000_00010_0000000000000100; 	// li
disk[66] <= 32'b010010_11110_11111_1111111111111011; 	// sw
disk[67] <= 32'b111110_00000000000000000000000001; 	// jal
disk[68] <= 32'b000010_11110_11110_0000000000001000; 	// subi
disk[69] <= 32'b001111_11110_11111_1111111111111011; 	// lw
disk[70] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[71] <= 32'b100100_00000000000000000000000000; 	// preIO
disk[72] <= 32'b010011_00000_10011_0000000000000000; 	// in
disk[73] <= 32'b010010_11110_10011_0000000000000000; 	// sw
disk[74] <= 32'b010001_11110_00110_1111111111111100; 	// la
disk[75] <= 32'b001111_11110_00111_0000000000000000; 	// lw
disk[76] <= 32'b000000_00110_00111_10100_00000_000000; 	// add
disk[77] <= 32'b001111_10100_10100_0000000000000000; 	// lw
disk[78] <= 32'b001110_10100_00001_0000000000000000; 	// mov
disk[79] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[80] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[81] <= 32'b000010_11110_11110_0000000000000110; 	// subi
disk[82] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
