********** Código intermediário **********

1: (function, fatorial, _, _)
2: (get_param, number, _, _)
3: (assign, result, 1, _)
4: (label, L1, _, _)
5: (greater_than, number, 0, t1)
6: (jump_if_false, t1, L2, _)
7: (multiplication, result, number, t2)
8: (assign, result, t2, _)
9: (subtraction, number, 1, t3)
10: (assign, number, t3, _)
11: (goto, L1, _, _)
12: (label, L2, _, _)
13: (return, result, _, _)
14: (function, main, _, _)
15: (param_list, 0, _, _)
16: (call, input, 0, t4)
17: (assign, number, t4, _)
18: (param_list, 2, _, _)
19: (param_list, 1, _, _)
20: (set_param, number, _, _)
21: (call, fatorial, 1, t5)
22: (set_param, t5, _, _)
23: (set_param, 2, _, _)
24: (call, output, 2, t6)
25: (syscall, _, _, _)

********** Código objeto **********

fatorial:
    0:	addi	$sp, $sp, 4
    1:	sw	$a0, -1($sp)
    2:	li	$t0, 1
    3:	sw	$t0, 0($sp)
.L1	
    4:	lw	$s0, -1($sp)
    5:	li	$t2, 0
    6:	gt	$t1, $s0, $t2
    7:	jf	$t1, L2
    8:	lw	$s1, 0($sp)
    9:	mul	$t3, $s1, $s0
    10:	sw	$t3, 0($sp)
    11:	lw	$s1, 0($sp)
    12:	subi	$t4, $s0, 1
    13:	sw	$t4, -1($sp)
    14:	lw	$s0, -1($sp)
    15:	j	L1
.L2	
    16:	lw	$s0, 0($sp)
    17:	mov	$v0, $s0
    18:	jr	$ra

main:
    19:	addi	$sp, $sp, 2
    20:	preIO	
    21:	in	$t0
    22:	sw	$t0, 0($sp)
    23:	lw	$s0, 0($sp)
    24:	mov	$a0, $s0
    25:	sw	$ra, -1($sp)
    26:	jal	fatorial
    27:	subi	$sp, $sp, 4
    28:	lw	$ra, -1($sp)
    29:	mov	$s0, $v0
    30:	mov	$a0, $s0
    31:	li	$a1, 2
    32:	out	$a0, 2
    33:	subi	$sp, $sp, 2
    34:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000010100;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000100; 	// addi
disk[2] <= 32'b010010_11110_00001_1111111111111111; 	// sw
disk[3] <= 32'b010000_00000_01111_0000000000000001; 	// li
disk[4] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[5] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[6] <= 32'b010000_00000_10001_0000000000000000; 	// li
disk[7] <= 32'b000000_00101_10001_10000_00000_010000; 	// gt
disk[8] <= 32'b010101_10000_00000_0000000000010001; 	// jf
disk[9] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[10] <= 32'b000000_00110_00101_10010_00000_000010; 	// mul
disk[11] <= 32'b010010_11110_10010_0000000000000000; 	// sw
disk[12] <= 32'b001111_11110_00110_0000000000000000; 	// lw
disk[13] <= 32'b000010_00101_10011_0000000000000001; 	// subi
disk[14] <= 32'b010010_11110_10011_1111111111111111; 	// sw
disk[15] <= 32'b001111_11110_00101_1111111111111111; 	// lw
disk[16] <= 32'b111100_00000000000000000000000101; 	// j
disk[17] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[18] <= 32'b001110_00101_11000_0000000000000000; 	// mov
disk[19] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[20] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[21] <= 32'b100100_00000000000000000000000000; 	// preIO
disk[22] <= 32'b010011_00000_01111_0000000000000000; 	// in
disk[23] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[24] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[25] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[26] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[27] <= 32'b111110_00000000000000000000000001; 	// jal
disk[28] <= 32'b000010_11110_11110_0000000000000100; 	// subi
disk[29] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[30] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[31] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[32] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[33] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[34] <= 32'b000010_11110_11110_0000000000000010; 	// subi
disk[35] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
