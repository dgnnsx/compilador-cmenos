********** Código intermediário **********

1: (function, parOuImpar, _, _)
2: (get_param, n, _, _)
3: (modulo, n, 2, t1)
4: (equal, t1, 0, t2)
5: (jump_if_false, t2, L1, _)
6: (param_list, 2, _, _)
7: (set_param, 2, _, _)
8: (set_param, 2, _, _)
9: (call, output, 2, t3)
10: (goto, L2, _, _)
11: (label, L1, _, _)
12: (param_list, 2, _, _)
13: (set_param, 1, _, _)
14: (set_param, 2, _, _)
15: (call, output, 2, t4)
16: (label, L2, _, _)
17: (return, _, _, _)
18: (function, main, _, _)
19: (param_list, 0, _, _)
20: (call, input, 0, t5)
21: (assign, n, t5, _)
22: (param_list, 1, _, _)
23: (set_param, n, _, _)
24: (call, parOuImpar, 1, t6)
25: (syscall, _, _, _)

********** Código objeto **********

parOuImpar:
    0:	addi	$sp, $sp, 3
    1:	sw	$a0, 0($sp)
    2:	lw	$s0, 0($sp)
    3:	modi	$t0, $s0, 2
    4:	li	$t2, 0
    5:	eq	$t1, $t0, $t2
    6:	jf	$t1, L1
    7:	li	$a0, 2
    8:	li	$a1, 2
    9:	out	$a0, 2
    10:	j	L2
.L1	
    11:	li	$a0, 1
    12:	li	$a1, 2
    13:	out	$a0, 2
.L2	
    14:	jr	$ra

main:
    15:	addi	$sp, $sp, 2
    16:	preIO	
    17:	in	$t0
    18:	sw	$t0, 0($sp)
    19:	lw	$s0, 0($sp)
    20:	mov	$a0, $s0
    21:	sw	$ra, -1($sp)
    22:	jal	parOuImpar
    23:	subi	$sp, $sp, 3
    24:	lw	$ra, -1($sp)
    25:	mov	$s0, $v0
    26:	subi	$sp, $sp, 2
    27:	syscall	, $k0

********** Código binário **********

disk[0] <= 32'b111101_00000000000000000000010000;		// Jump to Main
disk[1] <= 32'b000001_11110_11110_0000000000000011; 	// addi
disk[2] <= 32'b010010_11110_00001_0000000000000000; 	// sw
disk[3] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[4] <= 32'b000101_00101_01111_0000000000000010; 	// modi
disk[5] <= 32'b010000_00000_10001_0000000000000000; 	// li
disk[6] <= 32'b000000_01111_10001_10000_00000_001100; 	// eq
disk[7] <= 32'b010101_10000_00000_0000000000001100; 	// jf
disk[8] <= 32'b010000_00000_00001_0000000000000010; 	// li
disk[9] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[10] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[11] <= 32'b111100_00000000000000000000001111; 	// j
disk[12] <= 32'b010000_00000_00001_0000000000000001; 	// li
disk[13] <= 32'b010000_00000_00010_0000000000000010; 	// li
disk[14] <= 32'b010100_00000_00001_0000000000000010; 	// out
disk[15] <= 32'b000000_11111_00000_00000_00000_010010; 	// jr
disk[16] <= 32'b000001_11110_11110_0000000000000010; 	// addi
disk[17] <= 32'b100100_00000000000000000000000000; 	// preIO
disk[18] <= 32'b010011_00000_01111_0000000000000000; 	// in
disk[19] <= 32'b010010_11110_01111_0000000000000000; 	// sw
disk[20] <= 32'b001111_11110_00101_0000000000000000; 	// lw
disk[21] <= 32'b001110_00101_00001_0000000000000000; 	// mov
disk[22] <= 32'b010010_11110_11111_1111111111111111; 	// sw
disk[23] <= 32'b111110_00000000000000000000000001; 	// jal
disk[24] <= 32'b000010_11110_11110_0000000000000011; 	// subi
disk[25] <= 32'b001111_11110_11111_1111111111111111; 	// lw
disk[26] <= 32'b001110_11000_00101_0000000000000000; 	// mov
disk[27] <= 32'b000010_11110_11110_0000000000000010; 	// subi
disk[28] <= 32'b111001_11001_00000_0000000000000000; 	// syscall
